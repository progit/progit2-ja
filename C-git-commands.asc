[#C-git-commands]
[appendix]
//////////////////////////
== Git Commands
//////////////////////////
== Gitのコマンド

//////////////////////////
Throughout the book we have introduced dozens of Git commands and have tried hard to introduce them within something of a narrative, adding more commands to the story slowly.
However, this leaves us with examples of usage of the commands somewhat scattered throughout the whole book.
//////////////////////////
本書を通して、数多くのGitコマンドを紹介してきました。コマンドの説明にあたっては、物語風に、使うコマンドを少しずつ増やしていくように心掛けてきました。しかしその結果、コマンドの使用例が本書の全体に散在する形になってしまいました。

//////////////////////////
In this appendix, we'll go through all the Git commands we addressed throughout the book, grouped roughly by what they're used for.
We'll talk about what each command very generally does and then point out where in the book you can find us having used it.
//////////////////////////
この付録では、本書で扱ったすべてのGitコマンドを見ていきます。コマンドはその用途ごとに大まかにまとめてあります。ここでは、それぞれのコマンドが一般的に何を行うのか、そして本書のどこでそのコマンドが使われていたかについて述べていきます。

//////////////////////////
=== Setup and Config
//////////////////////////
=== セットアップと設定

//////////////////////////
There are two commands that are used quite a lot, from the first invocations of Git to common every day tweaking and referencing, the `config` and `help` commands.
//////////////////////////
最初のGitの呼び出しから、日々行われる微調整や参照に至るまで、非常によく使われるコマンドが2つあります。 `config` コマンドと `help` コマンドです。

==== git config

//////////////////////////
Git has a default way of doing hundreds of things.
For a lot of these things, you can tell Git to default to doing them a different way, or set your preferences.
This involves everything from telling Git what your name is to specific terminal color preferences or what editor you use.
There are several files this command will read from and write to so you can set values globally or down to specific repositories.
//////////////////////////
Gitでは、様々な処理についてデフォルトの処理方法があります。その多くでは、デフォルトの処理方法を変えたり、あなた好みの設定をしたりできます。これには、Gitにあなたの名前を教えることから、端末の色の変更や使用するエディタの設定まですべてが含まれます。 このコマンドが読み書きするファイルはいくつかあり、それによってグローバルな設定をしたり特定のリポジトリだけの設定をしたりできるようになっています。

//////////////////////////
The `git config` command has been used in nearly every chapter of the book.
//////////////////////////
`git config` コマンドは、本書のほぼすべての章で使用されています。

//////////////////////////
In <<ch01-introduction#r_first_time>> we used it to specify our name, email address and editor preference before we even got started using Git.
//////////////////////////
<<ch01-introduction#r_first_time>> では、Gitを使い始める前に、名前、メールアドレス、エディタの設定を行う際に使用しました。

//////////////////////////
In <<ch02-git-basics#r_git_aliases>> we showed how you could use it to create shorthand commands that expand to long option sequences so you don't have to type them every time.
//////////////////////////
<<ch02-git-basics#r_git_aliases>> では、大量のオプションを毎回打ち込まなくてもいいように、`git config` を使って省略形のコマンドを作成する方法を示しました。

//////////////////////////
In <<ch03-git-branching#r_rebasing>> we used it to make `--rebase` the default when you run `git pull`.
//////////////////////////
<<ch03-git-branching#r_rebasing>> では、`git pull` の実行時に `--rebase` をデフォルトにするのに使用しました。

//////////////////////////
In <<ch07-git-tools#r_credential_caching>> we used it to set up a default store for your HTTP passwords.
//////////////////////////
<<ch07-git-tools#r_credential_caching>> では、HTTPパスワードのデフォルトの保存先を設定するのに使用しました。

//////////////////////////
In <<ch08-customizing-git#r_keyword_expansion>> we showed how to set up smudge and clean filters on content coming in and out of Git.
//////////////////////////
<<ch08-customizing-git#r_keyword_expansion>> では、Gitへ入ってくるコンテンツ、Gitから出ていくコンテンツに対して、smudgeとcleanフィルタを設定する方法を示しました。

//////////////////////////
Finally, basically the entirety of <<ch08-customizing-git#r_git_config>> is dedicated to the command.
//////////////////////////
最後に、<<ch08-customizing-git#r_git_config>> の内容は基本的にすべてこのコマンドに関するものです。

==== git help

//////////////////////////
The `git help` command is used to show you all the documentation shipped with Git about any command.
While we're giving a rough overview of most of the more popular ones in this appendix, for a full listing of all of the possible options and flags for every command, you can always run `git help <command>`.
//////////////////////////
`git help` コマンドは、任意のコマンドについて、Gitに同梱されているあらゆるドキュメントを表示します。一般的なものの多くはこの付録でも概要を示していきますが、各コマンドで指定可能なオプションとフラグすべての一覧は、いつでも `git help <command>` で表示できます。

//////////////////////////
We introduced the `git help` command in <<ch01-introduction#r_git_help>> and showed you how to use it to find more information about the `git shell` in <<ch04-git-server#r_setting_up_server>>.
//////////////////////////
<<ch01-introduction#r_git_help>> では、 `git help` コマンドの紹介を行いました。 <<ch04-git-server#r_setting_up_server>> では、 `git shell` に関する詳細情報を見る方法を示しました。


//////////////////////////
=== Getting and Creating Projects
//////////////////////////
=== プロジェクトの取得と作成

//////////////////////////
There are two ways to get a Git repository.
One is to copy it from an existing repository on the network or elsewhere and the other is to create a new one in an existing directory.
//////////////////////////
Gitリポジトリを取得するには、2つの方法があります。一つはネットワーク上かどこかにある既存のリポジトリをコピーしてくる方法、もう一つは既存のディレクトリに新しくリポジトリを作成する方法です。

==== git init

//////////////////////////
To take a directory and turn it into a new Git repository so you can start version controlling it, you can simply run `git init`.
//////////////////////////
ディレクトリを選んで、そこをGitのリポジトリにしてバージョン管理を始められるようにするには、単に `git init` を実行します。

//////////////////////////
We first introduce this in <<ch02-git-basics#r_getting_a_repo>>, where we show creating a brand new repository to start working with.
//////////////////////////
これを最初に紹介したのは <<ch02-git-basics#r_getting_a_repo>> で、作業の開始にあたり新規にリポジトリを作成しました。

//////////////////////////
We talk briefly about how you can change the default branch from ``master'' in <<ch03-git-branching#r_remote_branches>>.
//////////////////////////
<<ch03-git-branching#r_remote_branches>> では、デフォルトのブランチを ``master'' から変更する方法を簡単に述べました。

//////////////////////////
We use this command to create an empty bare repository for a server in <<ch04-git-server#r_bare_repo>>.
//////////////////////////
<<ch04-git-server#r_bare_repo>> では、サーバ用に空のベアリポジトリを作成するのにこのコマンドを使用しました。

//////////////////////////
Finally, we go through some of the details of what it actually does behind the scenes in <<ch10-git-internals#r_plumbing_porcelain>>.
//////////////////////////
最後に、 <<ch10-git-internals#r_plumbing_porcelain>> では、舞台裏で実際に行われていることの詳細について、その一部を見てきました。

==== git clone

//////////////////////////
The `git clone` command is actually something of a wrapper around several other commands.
It creates a new directory, goes into it and runs `git init` to make it an empty Git repository, adds a remote (`git remote add`) to the URL that you pass it (by default named `origin`), runs a `git fetch` from that remote repository and then checks out the latest commit into your working directory with `git checkout`.
//////////////////////////
`git clone` は、実際にはいくつかの他のコマンドのラッパーのようなものです。新しいディレクトリを作成し、そこに入って `git init` を実行して空のGitリポジトリを作成し、渡したURLをリモートに追加（`git remote add`）し（デフォルトでは `origin` という名前が付けられる）、そのリモートリポジトリから `git fetch` し、最後に `git checkout` でワーキングディレクトリに最新のコミットをチェックアウトします。

//////////////////////////
The `git clone` command is used in dozens of places throughout the book, but we'll just list a few interesting places.
//////////////////////////
`git clone` コマンドは本書全体を通して何十回も使用されてきましたが、ここでは興味深い数カ所を列挙します。

//////////////////////////
It's basically introduced and explained in <<ch02-git-basics#r_git_cloning>>, where we go through a few examples.
//////////////////////////
基本的には <<ch02-git-basics#r_git_cloning>> でコマンドの紹介と説明を行いました。ここではいくつかの例を示しました。

//////////////////////////
In <<ch04-git-server#r_git_on_the_server>> we look at using the `--bare` option to create a copy of a Git repository with no working directory.
//////////////////////////
<<ch04-git-server#r_git_on_the_server>> では、 `--bare` オプションを使用してワーキングディレクトリのないGitリポジトリのコピーを作成する方法を見てきました。

//////////////////////////
In <<ch07-git-tools#r_bundling>> we use it to unbundle a bundled Git repository.
//////////////////////////
<<ch07-git-tools#r_bundling>> では、Gitリポジトリのバンドルファイルを展開するのに使用しました。

//////////////////////////
Finally, in <<ch07-git-tools#r_cloning_submodules>> we learn the `--recursive` option to make cloning a repository with submodules a little simpler.
//////////////////////////
最後に、 <<ch07-git-tools#r_cloning_submodules>> では、 `--recursive` オプションを使って、サブモジュールつきのリポジトリのクローンを簡単に行う方法を学びました。

//////////////////////////
Though it's used in many other places through the book, these are the ones that are somewhat unique or where it is used in ways that are a little different.
//////////////////////////
このコマンドは本書の他の多くの箇所でも使われていますが、ここではちょっとユニークだったり、他とは違う使われ方をしている箇所を挙げました。


//////////////////////////
=== Basic Snapshotting
//////////////////////////
=== 基本的なスナップショット

//////////////////////////
For the basic workflow of staging content and committing it to your history, there are only a few basic commands.
//////////////////////////
コンテンツをステージングしたり、それを歴史に対してコミットしたりする基本的なワークフローについては、基本的なコマンドが少しあるだけです。

==== git add

//////////////////////////
The `git add` command adds content from the working directory into the staging area (or ``index'') for the next commit.
When the `git commit` command is run, by default it only looks at this staging area, so `git add` is used to craft what exactly you would like your next commit snapshot to look like.
//////////////////////////
`git add` コマンドは、次のコミット用に、ワーキングディレクトリからステージングエリア（または ``インデックス''）へコンテンツを追加します。`git commit` コマンドの実行時、デフォルトではこのステージングエリアしか参照しません。そのため、 `git add` は、次のコミットのスナップショットが正確にはどのようになっていて欲しいのかを組み立てるのに使用されます。

//////////////////////////
This command is an incredibly important command in Git and is mentioned or used dozens of times in this book.
We'll quickly cover some of the unique uses that can be found.
//////////////////////////
このコマンドは、Gitの中でも非常に重要なコマンドです。本書の中でも、何十回も言及したり使用したりしています。ここでは、その中で見られるユニークな使用法をいくつか取り上げます。

//////////////////////////
We first introduce and explain `git add` in detail in <<ch02-git-basics#r_tracking_files>>.
//////////////////////////
`git add` の紹介と詳細な説明を最初に行ったのは <<ch02-git-basics#r_tracking_files>> でした。

//////////////////////////
We mention how to use it to resolve merge conflicts in <<ch03-git-branching#r_basic_merge_conflicts>>.
//////////////////////////
<<ch03-git-branching#r_basic_merge_conflicts>> では、マージの衝突を解決するためにこのコマンドを使用する方法について言及しました。

//////////////////////////
We go over using it to interactively stage only specific parts of a modified file in <<ch07-git-tools#r_interactive_staging>>.
//////////////////////////
<<ch07-git-tools#r_interactive_staging>> では、このコマンドを使って、変更されたファイルのうち、特定の部分だけを対話的にステージングする方法について細かく見てきました。

//////////////////////////
Finally, we emulate it at a low level in <<ch10-git-internals#r_tree_objects>>, so you can get an idea of what it's doing behind the scenes.
//////////////////////////
最後に、 <<ch10-git-internals#r_tree_objects>> では、舞台裏で何を行っているかを理解するため、このコマンドを低レベルで模倣しました。

==== git status

//////////////////////////
The `git status` command will show you the different states of files in your working directory and staging area.
Which files are modified and unstaged and which are staged but not yet committed.
In its normal form, it also will show you some basic hints on how to move files between these stages.
//////////////////////////
`git status` コマンドは、作業ディレクトリとステージングエリアとに対して、ファイルの状態について別々の内容を表示します。それぞれ、変更されているがステージングされていないファイルはどれか、ステージングされているがまだコミットされていないファイルはどれかを表示します。通常の使用法では、これらのステージの間でファイルを移動する方法について、基本的なヒントも表示します。

//////////////////////////
We first cover `status` in <<ch02-git-basics#r_checking_status>>, both in its basic and simplified forms.
While we use it throughout the book, pretty much everything you can do with the `git status` command is covered there.
//////////////////////////
最初に `status` を取り上げたのは <<ch02-git-basics#r_checking_status>> で、基本的な使用法と単純化された使用法の両方を取り上げました。本書の全体を通してこのコマンドを使ってきましたが、`git status` コマンドで行えることのほぼすべてをここで取り上げています。

==== git diff

//////////////////////////
The `git diff` command is used when you want to see differences between any two trees.
This could be the difference between your working environment and your staging area (`git diff` by itself), between your staging area and your last commit (`git diff --staged`), or between two commits (`git diff master branchB`).
//////////////////////////
`git diff` は、2つの任意のツリーで確認したい場合に使用します。これは、作業中の環境とステージングエリアの差異(`git diff` だけで表示される)でもよいですし、ステージングエリアと最後のコミットの差異(`git diff --staged`)でもよいですし、2つのコミットの差異(`git diff master branchB`)でもよいです。

//////////////////////////
We first look at the basic uses of `git diff` in <<ch02-git-basics#r_git_diff_staged>>, where we show how to see what changes are staged and which are not yet staged.
//////////////////////////
`git diff` の基本的な使用法を最初に見たのは <<ch02-git-basics#r_git_diff_staged>> でした。ここでは、どの変更がステージングされていて、どの変更がまだステージングされていないのか見る方法を示しました。

//////////////////////////
We use it to look for possible whitespace issues before committing with the `--check` option in <<ch05-distributed-git#r_commit_guidelines>>.
//////////////////////////
<<ch05-distributed-git#r_commit_guidelines>> では、`--check` オプションを使って、問題となる空白文字がないかをコミット前に探すのに使いました。

//////////////////////////
We see how to check the differences between branches more effectively with the `git diff A...B` syntax in <<ch05-distributed-git#r_what_is_introduced>>.
//////////////////////////
<<ch05-distributed-git#r_what_is_introduced>> では、`git diff A...B` という文法を使って、ブランチ間の差異をより効率的にチェックする方法を見てきました。

//////////////////////////
We use it to filter out whitespace differences with `-b` and how to compare different stages of conflicted files with `--theirs`, `--ours` and `--base` in <<ch07-git-tools#r_advanced_merging>>.
//////////////////////////
<<ch07-git-tools#r_advanced_merging>> では、`-b` を使って空白文字の差異をフィルタしました。また、 `--theirs`、 `--ours`、 `--base` を使って、衝突しているファイルのいろいろな段階を比較しました。

//////////////////////////
Finally, we use it to effectively compare submodule changes with `--submodule` in <<ch07-git-tools#r_starting_submodules>>.
//////////////////////////
最後に、 <<ch07-git-tools#r_starting_submodules>> では、サブモジュールの変更を効率的に比較するために `--submodule` を使いました。

==== git difftool

//////////////////////////
The `git difftool` command simply launches an external tool to show you the difference between two trees in case you want to use something other than the built in `git diff` command.
//////////////////////////
`git difftool` コマンドは、単に外部ツールを起動して、2つのツリーの差異を表示します。これは、ビルトインの `git diff` 以外のコマンドを使いたい場合に使用します。

//////////////////////////
We only briefly mention this in <<ch02-git-basics#r_git_diff_staged>>.
//////////////////////////
このコマンドについては、 <<ch02-git-basics#r_git_diff_staged>> で簡単に言及しただけです。

==== git commit

//////////////////////////
The `git commit` command takes all the file contents that have been staged with `git add` and records a new permanent snapshot in the database and then moves the branch pointer on the current branch up to it.
//////////////////////////
`git commit` コマンドは、`git add` でステージングされたすべてのファイルの内容を取得し、データベースに新しく永続的なスナップショットを記録し、最後に現在のブランチのブランチポインタをそこまで進めます。

//////////////////////////
We first cover the basics of committing in <<ch02-git-basics#r_committing_changes>>.
There we also demonstrate how to use the `-a` flag to skip the `git add` step in daily workflows and how to use the `-m` flag to pass a commit message in on the command line instead of firing up an editor.
//////////////////////////
コミットの基本を最初に取り上げたのは <<ch02-git-basics#r_committing_changes>> でした。そこではまた、 `-a` フラグを使って、日々のワークフローで `git add` を行うステップを省略する方法の実例を示しました。また、`-m` フラグを使って、コミットメッセージを、エディタを起動するのではなくコマンドラインから渡す方法についても説明しました。

//////////////////////////
In <<ch02-git-basics#r_undoing>> we cover using the `--amend` option to redo the most recent commit.
//////////////////////////
<<ch02-git-basics#r_undoing>> では、`--amend` オプションを使って最新のコミットを取り消す方法を取り上げました。

//////////////////////////
In <<ch03-git-branching#r_git_branches_overview>>, we go into much more detail about what `git commit` does and why it does it like that.
//////////////////////////
<<ch03-git-branching#r_git_branches_overview>> では、`git commit` が何を行っているか、なぜそのようなことをするのかについて非常に細かいところまで説明しました。

//////////////////////////
We looked at how to sign commits cryptographically with the `-S` flag in <<ch07-git-tools#r_signing_commits>>.
//////////////////////////
<<ch07-git-tools#r_signing_commits>> では、`-S` フラグを使って、コミットに暗号を使って署名を行う方法を見てきました。

//////////////////////////
Finally, we take a look at what the `git commit` command does in the background and how it's actually implemented in <<ch10-git-internals#r_git_commit_objects>>.
//////////////////////////
最後に、 <<ch10-git-internals#r_git_commit_objects>> では、 `git commit` コマンドがバックグラウンドで何を行っているのか、またそれが実際どのように実装されているのかを簡単に見てきました。

==== git reset

//////////////////////////
The `git reset` command is primarily used to undo things, as you can possibly tell by the verb.
It moves around the `HEAD` pointer and optionally changes the `index` or staging area and can also optionally change the working directory if you use `--hard`.
This final option makes it possible for this command to lose your work if used incorrectly, so make sure you understand it before using it.
//////////////////////////
`git reset` コマンドは、その動詞から分かるかも知れませんが、主に物事を元に戻すのに使われます。このコマンドは、 `HEAD` ポインタをあちこち動かし、必要に応じて `インデックス` またはステージングエリアに変更を加えます。 `--hard` を使えば作業ディレクトリを変更することもできます。この最後のオプションは、誤って使用すると作業結果を失う可能性があるので、必ずその点を理解した上で使用してください。

//////////////////////////
We first effectively cover the simplest use of `git reset` in <<ch02-git-basics#r_unstaging>>, where we use it to unstage a file we had run `git add` on.
//////////////////////////
`git reset` の最も単純な使用法を実質的に初めて取り上げたのは <<ch02-git-basics#r_unstaging>> でした。ここでは、 `git add` したファイルのステージを解除するのに使いました。

//////////////////////////
We then cover it in quite some detail in <<ch07-git-tools#r_git_reset>>, which is entirely devoted to explaining this command.
//////////////////////////
<<ch07-git-tools#r_git_reset>> は、全体がこのコマンドの説明に費やされており、このコマンドについてかなり詳細に取り上げています。

//////////////////////////
We use `git reset --hard` to abort a merge in <<ch07-git-tools#r_abort_merge>>, where we also use `git merge --abort`, which is a bit of a wrapper for the `git reset` command.
//////////////////////////
<<ch07-git-tools#r_abort_merge>> では、 `git reset --hard` を使用してマージを中断しました。また、`git reset` コマンドのちょっとしたラッパーである `git merge --abort` も使用しました。

==== git rm

//////////////////////////
The `git rm` command is used to remove files from the staging area and working directory for Git.
It is similar to `git add` in that it stages a removal of a file for the next commit.
//////////////////////////
`git rm` コマンドは、ステージングエリアおよびGitの作業ディレクトリからファイルを削除するのに使用されます。これは、次のコミット用に `git add` でファイルの削除をステージングするのに似ています。

//////////////////////////
We cover the `git rm` command in some detail in <<ch02-git-basics#r_removing_files>>, including recursively removing files and only removing files from the staging area but leaving them in the working directory with `--cached`.
//////////////////////////
<<ch02-git-basics#r_removing_files>> では、 `git rm` コマンドの詳細を取り上げました。ファイルを再帰的に削除する方法、 `--cached` を使って作業ディレクトリにファイルを残しつつステージングエリアからファイルを削除する方法などについて取り上げました。

//////////////////////////
The only other differing use of `git rm` in the book is in <<ch10-git-internals#r_removing_objects>> where we briefly use and explain the `--ignore-unmatch` when running `git filter-branch`, which simply makes it not error out when the file we are trying to remove doesn't exist.
This can be useful for scripting purposes.
//////////////////////////
これ以外の方法で `git rm` を使用したのは <<ch10-git-internals#r_removing_objects>> だけです。ここでは、 `git filter-branch` を実行した際に、 `--ignore-unmatch` について簡単に説明しました。これは、削除しようとしているファイルが存在しなかった場合でもエラーとしないオプションで、スクリプトを作成する際に役立ちます。

==== git mv

//////////////////////////
The `git mv` command is a thin convenience command to move a file and then run `git add` on the new file and `git rm` on the old file.
//////////////////////////
`git mv` は簡単な便利コマンドで、ファイルを移動した上で、新しいファイルを `git add` し、古いファイルを `git rm` します。

//////////////////////////
We only briefly mention this command in <<ch02-git-basics#r_git_mv>>.
//////////////////////////
このコマンドについては、 <<ch02-git-basics#r_git_mv>> で簡単に言及しただけです。

==== git clean

//////////////////////////
The `git clean` command is used to remove unwanted files from your working directory.
This could include removing temporary build artifacts or merge conflict files.
//////////////////////////
`git clean` コマンドは、作業ディレクトリから不要なファイルを削除するのに使用されます。これには、ビルド時の一時ファイルやマージ衝突ファイルの削除が含まれます。

//////////////////////////
We cover many of the options and scenarios in which you might used the clean command in <<ch07-git-tools#r_git_clean>>.
//////////////////////////
<<ch07-git-tools#r_git_clean>> では、cleanコマンドのオプションの多くや、cleanコマンドを使用する シナリオについて取り上げました。

//////////////////////////
=== Branching and Merging
//////////////////////////
=== ブランチとマージ

//////////////////////////
There are just a handful of commands that implement most of the branching and merging functionality in Git.
//////////////////////////
Gitのブランチとマージの機能は、その大半がほんの一握りのコマンドで実装されています。

==== git branch

//////////////////////////
The `git branch` command is actually something of a branch management tool.
It can list the branches you have, create a new branch, delete branches and rename branches.
//////////////////////////
`git branch` コマンドは、実際にはブランチ管理ツールのようなものです。あなたの持っているブランチを一覧表示したり、新しいブランチを作成したり、ブランチを削除したり、ブランチの名前を変更したりできます。

//////////////////////////
Most of <<ch03-git-branching#ch03-git-branching>> is dedicated to the `branch` command and it's used throughout the entire chapter.
We first introduce it in <<ch03-git-branching#r_create_new_branch>> and we go through most of its other features (listing and deleting) in <<ch03-git-branching#r_branch_management>>.
//////////////////////////
<<ch03-git-branching#ch03-git-branching>> のほとんどは `branch` コマンドに費やされており、この章の全体に渡って `branch` コマンドが使用されています。最初にこのコマンドを紹介したのは <<ch03-git-branching#r_create_new_branch>> で、そこで扱った以外の機能（一覧表示と削除）のほとんどは <<ch03-git-branching#r_branch_management>> で見てきました。

//////////////////////////
In <<ch03-git-branching#r_tracking_branches>> we use the `git branch -u` option to set up a tracking branch.
//////////////////////////
<<ch03-git-branching#r_tracking_branches>> では、 `git branch -u` を使用して追跡ブランチを設定しました。

//////////////////////////
Finally, we go through some of what it does in the background in <<ch10-git-internals#r_git_refs>>.
//////////////////////////
最後に、<<ch10-git-internals#r_git_refs>> では、このコマンドがバックグラウンドで行っていることについて見てきました。

==== git checkout

//////////////////////////
The `git checkout` command is used to switch branches and check content out into your working directory.
//////////////////////////
`git checkout` コマンドは、ブランチを切り替える際と、コンテンツを作業ディレクトリへチェックアウトするのに使用されます。

//////////////////////////
We first encounter the command in <<ch03-git-branching#r_switching_branches>> along with the `git branch` command.
//////////////////////////
このコマンドは、 <<ch03-git-branching#r_switching_branches>> で、 `git branch` コマンドとともに初めて登場しました。

//////////////////////////
We see how to use it to start tracking branches with the `--track` flag in <<ch03-git-branching#r_tracking_branches>>.
//////////////////////////
<<ch03-git-branching#r_tracking_branches>> では、`--track` フラグを使用して、ブランチの追跡を開始する方法を見てきました。

//////////////////////////
We use it to reintroduce file conflicts with `--conflict=diff3` in <<ch07-git-tools#r_checking_out_conflicts>>.
//////////////////////////
<<ch07-git-tools#r_checking_out_conflicts>> では、 `--conflict=diff3` を使用して、ファイルの衝突部分を再表示しました。

//////////////////////////
We go into closer detail on its relationship with `git reset` in <<ch07-git-tools#r_git_reset>>.
//////////////////////////
<<ch07-git-tools#r_git_reset>> では、`git checkout` と `git reset` の関係の詳細を見てきました。

//////////////////////////
Finally, we go into some implementation detail in <<ch10-git-internals#r_the_head>>.
//////////////////////////
最後に、<<ch10-git-internals#r_the_head>> では、実装の詳細の一部を見てきました。

==== git merge

//////////////////////////
The `git merge` tool is used to merge one or more branches into the branch you have checked out.
It will then advance the current branch to the result of the merge.
//////////////////////////
`git merge` は、チェックアウト中のブランチに、1つまたは複数のブランチをマージする際に使用されるツールです。 このコマンドは、現在のブランチをマージの結果まで進めます。

//////////////////////////
The `git merge` command was first introduced in <<ch03-git-branching#r_basic_branching>>.
Though it is used in various places in the book, there are very few variations of the `merge` command -- generally just `git merge <branch>` with the name of the single branch you want to merge in.
//////////////////////////
`git merge` コマンドを最初に紹介したのは <<ch03-git-branching#r_basic_branching>> でした。このコマンドは本書の様々な場所で使用されていますが、 `merge` コマンドにはごく少数のバリエーションしかありません -- その多くは、単に `git merge <branch>` でマージする単一のブランチの名前を指定しているだけです。

//////////////////////////
We covered how to do a squashed merge (where Git merges the work but pretends like it's just a new commit without recording the history of the branch you're merging in) at the very end of <<ch05-distributed-git#r_public_project>>.
//////////////////////////
<<ch05-distributed-git#r_public_project>> の最後では、マージの際にコミットをひとつにまとめる（Gitがマージを行う際に、マージするブランチの歴史を記録せず、あたかも新しくコミットされたかのようにする）方法について取り上げました。 

//////////////////////////
We went over a lot about the merge process and command, including the `-Xignore-space-change` command and the `--abort` flag to abort a problem merge in <<ch07-git-tools#r_advanced_merging>>.
//////////////////////////
<<ch07-git-tools#r_advanced_merging>> では、マージのプロセスとコマンドについて多くを見てきました。これには、`-Xignore-space-change` コマンドや、 `--abort` フラグを使って問題のあるマージを中断する方法が含まれます。

//////////////////////////
We learned how to verify signatures before merging if your project is using GPG signing in <<ch07-git-tools#r_signing_commits>>.
//////////////////////////
<<ch07-git-tools#r_signing_commits>> では、あなたのプロジェクトでGPG署名を使っている場合に、マージする前に署名を確認する方法を学びました。

//////////////////////////
Finally, we learned about Subtree merging in <<ch07-git-tools#r_subtree_merge>>.
//////////////////////////
最後に、<<ch07-git-tools#r_subtree_merge>> では、サブツリーマージについて学びました。

==== git mergetool

//////////////////////////
The `git mergetool` command simply launches an external merge helper in case you have issues with a merge in Git.
//////////////////////////
`git mergetool` コマンドは、Gitのマージに問題があった場合に、単に外部のマージ補助ツールを起動するコマンドです。

//////////////////////////
We mention it quickly in <<ch03-git-branching#r_basic_merge_conflicts>> and go into detail on how to implement your own external merge tool in <<ch08-customizing-git#r_external_merge_tools>>.
//////////////////////////
<<ch03-git-branching#r_basic_merge_conflicts>> では、このコマンドについて簡単に言及しました。また、<<ch08-customizing-git#r_external_merge_tools>> では、独自の外部マージツールを実装する方法について詳細に見てきました。

==== git log

//////////////////////////
The `git log` command is used to show the reachable recorded history of a project from the most recent commit snapshot backwards.
By default it will only show the history of the branch you're currently on, but can be given different or even multiple heads or branches from which to traverse.
It is also often used to show differences between two or more branches at the commit level.
//////////////////////////
`git log` コマンドは、プロジェクトに記録されている歴史を、最新のコミットのスナップショットから後ろ向きに走査して到達可能な歴史を表示するのに使用されます。デフォルトでは現在のブランチの歴史だけを表示しますが、別のブランチ、または複数のブランチのHEADを与えて走査させることもできます。また、コミットレベルで複数のブランチ間の差異を表示するために使用されることもあります。

//////////////////////////
This command is used in nearly every chapter of the book to demonstrate the history of a project.
//////////////////////////
このコマンドは、本書のほぼすべての章で、プロジェクトの歴史の実例を表示するのに使用されています。

//////////////////////////
We introduce the command and cover it in some depth in <<ch02-git-basics#r_viewing_history>>.
There we look at the `-p` and `--stat` option to get an idea of what was introduced in each commit and the `--pretty` and `--oneline` options to view the history more concisely, along with some simple date and author filtering options.
//////////////////////////
<<ch02-git-basics#r_viewing_history>> では、このコマンドを紹介し、ある程度深く説明を行いました。ここでは、各コミットで何が取り込まれたかを `-p` および `--stat` オプションを使って知る方法、 `--pretty` および `--oneline` オプションで歴史をより簡潔な形で見る方法、および日付や作者で簡単なフィルタリングを行うオプションを見てきました。

//////////////////////////
In <<ch03-git-branching#r_create_new_branch>> we use it with the `--decorate` option to easily visualize where our branch pointers are located and we also use the `--graph` option to see what divergent histories look like.
//////////////////////////
<<ch03-git-branching#r_create_new_branch>> では、 `--decorate` オプションを使用して、ブランチポインタがどこを指しているかを簡単に可視化しました。また、 `--graph` オプションを使用して、分岐した歴史がどのようになっているかを見てきました。

//////////////////////////
In <<ch05-distributed-git#r_private_team>> and <<ch07-git-tools#r_commit_ranges>> we cover the `branchA..branchB` syntax to use the `git log` command to see what commits are unique to a branch relative to another branch.
In <<ch07-git-tools#r_commit_ranges>> we go through this fairly extensively.
//////////////////////////
<<ch05-distributed-git#r_private_team>> および <<ch07-git-tools#r_commit_ranges>> では、 `git log` コマンドで `branchA..branchB` 形式の構文を使用して、 他のブランチと比較して、あるブランチに固有のコミットはどれかを見る方法を取り上げました。<<ch07-git-tools#r_commit_ranges>> では、かなり広範囲に渡ってこのコマンドを見てきました。

//////////////////////////
In <<ch07-git-tools#r_merge_log>> and <<ch07-git-tools#r_triple_dot>> we cover using the `branchA...branchB` format and the `--left-right` syntax to see what is in one branch or the other but not in both.
In <<ch07-git-tools#r_merge_log>> we also look at how to use the `--merge` option to help with merge conflict debugging as well as using the `--cc` option to look at merge commit conflicts in your history.
//////////////////////////
<<ch07-git-tools#r_merge_log>> および <<ch07-git-tools#r_triple_dot>> では、どちらか一方のブランチにだけ入っているものは何かを見るための `branchA...branchB` 形式および `--left-right` 構文の使い方を扱いました。<<ch07-git-tools#r_merge_log>> では、マージ衝突のデバッグを支援するための `--merge` オプションの使い方と、歴史の中のマージコミットの衝突を見るための `--cc` オプションの使い方を見てきました。

//////////////////////////
In <<ch07-git-tools#r_git_reflog>> we use the `-g` option to view the Git reflog through this tool instead of doing branch traversal.
//////////////////////////
<<ch07-git-tools#r_git_reflog>> では、ブランチを走査する代わりにこのツールを使用してGit reflogを見るために `-g` オプションを使いました。

//////////////////////////
In <<ch07-git-tools#r_searching>> we look at using the `-S` and `-L` options to do fairly sophisticated searches for something that happened historically in the code such as seeing the history of a function.
//////////////////////////
<<ch07-git-tools#r_searching>> では、ある機能の歴史など、コードの歴史上で起こった出来事を検索するために、 `-S` および `-L` オプションを使用して非常に洗練された検索を行う方法を見てきました。

//////////////////////////
In <<ch07-git-tools#r_signing_commits>> we see how to use `--show-signature` to add a validation string to each commit in the `git log` output based on if it was validly signed or not.
//////////////////////////
<<ch07-git-tools#r_signing_commits>> では、 `--show-signature` を使って、各コミットが正当に署名されているかどうかに基づいて、 `git log` の出力に対してバリデーション文字列を付け加える方法を見てきました。

==== git stash

//////////////////////////
The `git stash` command is used to temporarily store uncommitted work in order to clean out your working directory without having to commit unfinished work on a branch.
//////////////////////////
`git stash` コマンドは、未コミットの作業を一時的に保存する際に使用されます。これは、ワーキングディレクトリをきれいにしたいが、作業中の内容をブランチにコミットしたくないという場合に使用されます。

//////////////////////////
This is basically entirely covered in <<ch07-git-tools#r_git_stashing>>.
//////////////////////////
このコマンドの機能は基本的にすべて <<ch07-git-tools#r_git_stashing>> で取り上げました。

==== git tag

//////////////////////////
The `git tag` command is used to give a permanent bookmark to a specific point in the code history.
Generally this is used for things like releases.
//////////////////////////
`git tag` コマンドは、コードの歴史の中で、特定のポイントに永続的なブックマークを付与するのに使用されます。一般的には、このコマンドはリリース作業などで使用されます。

//////////////////////////
This command is introduced and covered in detail in <<ch02-git-basics#r_git_tagging>> and we use it in practice in <<ch05-distributed-git#r_tagging_releases>>.
//////////////////////////
<<ch02-git-basics#r_git_tagging>> では、このコマンドの紹介と詳細な説明を行いました。また、<<ch05-distributed-git#r_tagging_releases>> では、実際にこのコマンドを使用しました。

//////////////////////////
We also cover how to create a GPG signed tag with the `-s` flag and verify one with the `-v` flag in <<ch07-git-tools#r_signing>>.
//////////////////////////
<<ch07-git-tools#r_signing>> では、 `-s` フラグを使ってGPGで署名されたタグを作成する方法、および `-v` フラグを使ってタグの署名を検証する方法を取り上げました。


//////////////////////////
=== Sharing and Updating Projects
//////////////////////////
=== プロジェクトの共有とアップデート

//////////////////////////
There are not very many commands in Git that access the network, nearly all of the commands operate on the local database.
When you are ready to share your work or pull changes from elsewhere, there are a handful of commands that deal with remote repositories.
//////////////////////////
Gitにおいて、ネットワークにアクセスするコマンドはそれほど多くありません。ほぼ全てのコマンドはローカル・データベース上で動作します。成果物を共有したり、他の場所から変更点をプルする準備ができたら、リモートリポジトリを扱うほんの一握りのコマンドを使います。

==== git fetch

//////////////////////////
The `git fetch` command communicates with a remote repository and fetches down all the information that is in that repository that is not in your current one and stores it in your local database.
//////////////////////////
`git fetch` コマンドは、リモートリポジトリと通信し、そのリポジトリにあって現在のリポジトリにない情報を全て取得します。またその上で、取得した情報をローカル・データベースへ保存します。

//////////////////////////
We first look at this command in <<ch02-git-basics#r_fetching_and_pulling>> and we continue to see examples of it use in <<ch03-git-branching#r_remote_branches>>.
//////////////////////////
このコマンドを最初に見たのは <<ch02-git-basics#r_fetching_and_pulling>> でした。続いて、その使用例を <<ch03-git-branching#r_remote_branches>> で見てきました。

//////////////////////////
We also use it in several of the examples in <<ch05-distributed-git#r_contributing_project>>.
//////////////////////////
<<ch05-distributed-git#r_contributing_project>> では、例のいくつかでこのコマンドを使用しました。

//////////////////////////
We use it to fetch a single specific reference that is outside of the default space in <<ch06-github#r_pr_refs>> and we see how to fetch from a bundle in <<ch07-git-tools#r_bundling>>.
//////////////////////////
<<ch06-github#r_pr_refs>> では、デフォルトの範囲の外側から、特定の単一の参照を取得するのにこのコマンドを使用しました。また、 <<ch07-git-tools#r_bundling>> では、バンドルからフェッチする方法を見てきました。

//////////////////////////
We set up highly custom refspecs in order to make `git fetch` do something a little different than the default in <<ch10-git-internals#r_refspec>>.
//////////////////////////
<<ch10-git-internals#r_refspec>> では、 `git fetch` にデフォルトとは少し違った動きをさせるために、高度にカスタマイズされたrefspecをセットアップしました。

==== git pull

//////////////////////////
The `git pull` command is basically a combination of the `git fetch` and `git merge` commands, where Git will fetch from the remote you specify and then immediately try to merge it into the branch you're on.
//////////////////////////
`git pull` コマンドは、基本的には `git fetch` コマンドと `git merge` コマンドの組み合わせです。Gitは指定したリモートからフェッチを行い、続けて現在のブランチへそれをマージするよう試みます。

//////////////////////////
We introduce it quickly in <<ch02-git-basics#r_fetching_and_pulling>> and show how to see what it will merge if you run it in <<ch02-git-basics#r_inspecting_remote>>.
//////////////////////////
<<ch02-git-basics#r_fetching_and_pulling>> では、このコマンドについて簡単に紹介しました。 <<ch02-git-basics#r_inspecting_remote>> では、このコマンドを実行した場合に何がマージされるのかを見る方法を示しました。

//////////////////////////
We also see how to use it to help with rebasing difficulties in <<ch03-git-branching#r_rebase_rebase>>.
//////////////////////////
<<ch03-git-branching#r_rebase_rebase>> では、リベースの際の問題に対する支援としてこのコマンドを使用する方法を見てきました。

//////////////////////////
We show how to use it with a URL to pull in changes in a one-off fashion in <<ch05-distributed-git#r_checking_out_remotes>>.
//////////////////////////
<<ch05-distributed-git#r_checking_out_remotes>> では、このコマンドにURLを指定して、一回限りのやり方で変更点をプルする方法を示しました。

//////////////////////////
Finally, we very quickly mention that you can use the `--verify-signatures` option to it in order to verify that commits you are pulling have been GPG signed in <<ch07-git-tools#r_signing_commits>>.
//////////////////////////
最後に、<<ch07-git-tools#r_signing_commits>> では、このコマンドに `--verify-signatures` オプションを使用して、pullの対象のコミットがGPGで署名されていることを検証できることに、ごく簡単に言及しました。

==== git push

//////////////////////////
The `git push` command is used to communicate with another repository, calculate what your local database has that the remote one does not, and then pushes the difference into the other repository.
It requires write access to the other repository and so normally is authenticated somehow.
//////////////////////////
`git push` コマンドは、他のリポジトリと通信し、自分のローカル・データベースにあって通信先のリポジトリにないものは何かを計算した上で、差分を通信先のリポジトリへプッシュします。このコマンドは、通信先のリポジトリへの書き込みアクセスを必要とするので、通常は何らかの形で認証が行われます。

//////////////////////////
We first look at the `git push` command in <<ch02-git-basics#r_pushing_remotes>>.
Here we cover the basics of pushing a branch to a remote repository.
In <<ch03-git-branching#r_pushing_branches>> we go a little deeper into pushing specific branches and in <<ch03-git-branching#r_tracking_branches>> we see how to set up tracking branches to automatically push to.
In <<ch03-git-branching#r_delete_branches>> we use the `--delete` flag to delete a branch on the server with `git push`.
//////////////////////////
最初に `git push` コマンドについて見たのは <<ch02-git-basics#r_pushing_remotes>> でした。ここでは、ブランチをリモートリポジトリへプッシュする基本に触れました。<<ch03-git-branching#r_pushing_branches>> では、特定のブランチをプッシュする方法について少し詳細に見てきました。 <<ch03-git-branching#r_tracking_branches>> では、自動的にプッシュをするために、追跡ブランチを設定する方法を見てきました。<<ch03-git-branching#r_delete_branches>> では、`git push` でサーバ上のブランチを削除するために、 `--delete` フラグを使用しました。

//////////////////////////
Throughout <<ch05-distributed-git#r_contributing_project>> we see several examples of using `git push` to share work on branches through multiple remotes.
//////////////////////////
<<ch05-distributed-git#r_contributing_project>> では、全体を通して、複数のリモートとブランチ上の成果物を共有する際の `git push` を使用した例をいくつか見てきました。

//////////////////////////
We see how to use it to share tags that you have made with the `--tags` option in <<ch02-git-basics#r_sharing_tags>>.
//////////////////////////
<<ch02-git-basics#r_sharing_tags>> では、 `--tags` オプションで作成したタグを共有するためにこのコマンドを使用する方法を見てきました。

//////////////////////////
In <<ch07-git-tools#r_publishing_submodules>> we use the `--recurse-submodules` option to check that all of our submodules work has been published before pushing the superproject, which can be really helpful when using submodules.
//////////////////////////
<<ch07-git-tools#r_publishing_submodules>> では、サブモジュールのサブプロジェクトをプッシュする前に、`--recurse-submodules` オプションを使用して、サブモジュールの成果物が全て公開されているかをチェックしました。これは、サブモジュールを使用している場合に非常に役立ちます。

//////////////////////////
In <<ch08-customizing-git#r_other_client_hooks>> we talk briefly about the `pre-push` hook, which is a script we can setup to run before a push completes to verify that it should be allowed to push.
//////////////////////////
<<ch08-customizing-git#r_other_client_hooks>> では、 `pre-push` フックについて簡単に述べました。これは、プッシュが完了する前に実行するよう設定できるスクリプトで、プッシュしてよいかを検査します。

//////////////////////////
Finally, in <<ch10-git-internals#r_pushing_refspecs>> we look at pushing with a full refspec instead of the general shortcuts that are normally used.
This can help you be very specific about what work you wish to share.
//////////////////////////
最後に、 <<ch10-git-internals#r_pushing_refspecs>> では、普段使用されるショートカットの代わりに、完全なrefspecを使用したプッシュを見てきました。これは、共有したい成果物を厳密に指定する際の助けになります。

==== git remote

//////////////////////////
The `git remote` command is a management tool for your record of remote repositories.
It allows you to save long URLs as short handles, such as ``origin'' so you don't have to type them out all the time.
You can have several of these and the `git remote` command is used to add, change and delete them.
//////////////////////////
`git remote` コマンドは、リモートリポジトリの記録を管理するツールです。このコマンドでは、長いURLを毎回タイプしなくて済むように、URLの短縮形（例えば ``origin'' ）を保存できます。短縮形は複数持つことができます。 `git remote` コマンドは、短縮形の追加、変更、削除に使用されます。

//////////////////////////
This command is covered in detail in <<ch02-git-basics#r_remote_repos>>, including listing, adding, removing and renaming them.
//////////////////////////
このコマンドは、短縮形の一覧表示、追加、削除、リネームなどを含め、 <<ch02-git-basics#r_remote_repos>> で詳しく取り上げられています。

//////////////////////////
It is used in nearly every subsequent chapter in the book too, but always in the standard `git remote add <name> <url>` format.
//////////////////////////
また、それ以降のほぼすべての章でもこのコマンドは使用されていますが、そこでは常に標準的な `git remote add <name> <url>` の形式で使用されています。

==== git archive

//////////////////////////
The `git archive` command is used to create an archive file of a specific snapshot of the project.
//////////////////////////
`git archive` コマンドは、プロジェクトの特定のスナップショットのアーカイブファイルを作成するのに使用されます。

//////////////////////////
We use `git archive` to create a tarball of a project for sharing in <<ch05-distributed-git#r_preparing_release>>.
//////////////////////////
<<ch05-distributed-git#r_preparing_release>> では、`git archive` を使用して、プロジェクトの共有用のtarballを作成しました。

==== git submodule

//////////////////////////
The `git submodule` command is used to manage external repositories within a normal repositories.
This could be for libraries or other types of shared resources.
The `submodule` command has several sub-commands (`add`, `update`, `sync`, etc) for managing these resources.
//////////////////////////
`git submodule` コマンドは、通常のリポジトリ内で、外部のリポジトリを管理するのに使用されます。外部リポジトリの内容は、ライブラリだったり、その他の共有リソースだったりします。 `submodule` コマンドには、これらのリソースを管理するために、いくつかのサブコマンド（`add`、`update`、`sync` など）があります。

//////////////////////////
This command is only mentioned and entirely covered in <<ch07-git-tools#r_git_submodules>>.
//////////////////////////
このコマンドについて言及しているのは <<ch07-git-tools#r_git_submodules>> だけです。この節だけで、このコマンドのすべてを取り上げています。

//////////////////////////
=== Inspection and Comparison
//////////////////////////
=== 検査と比較

==== git show

//////////////////////////
The `git show` command can show a Git object in a simple and human readable way.
Normally you would use this to show the information about a tag or a commit.
//////////////////////////
`git show` コマンドは、Gitオブジェクトを、人間が読める単純な形で表示します。このコマンドは通常、タグまたはコミットに関する情報を表示するのに使用されます。

//////////////////////////
We first use it to show annotated tag information in <<ch02-git-basics#r_annotated_tags>>.
//////////////////////////
最初に <<ch02-git-basics#r_annotated_tags>> では、このコマンドを使用して、注釈つきのタグの情報を表示しました。

//////////////////////////
Later we use it quite a bit in <<ch07-git-tools#r_revision_selection>> to show the commits that our various revision selections resolve to.
//////////////////////////
その後 <<ch07-git-tools#r_revision_selection>> では、各種のリビジョン選択が解決するコミットを示すために、このコマンドを何度も使用しました。

//////////////////////////
One of the more interesting things we do with `git show` is in <<ch07-git-tools#r_manual_remerge>> to extract specific file contents of various stages during a merge conflict.
//////////////////////////
<<ch07-git-tools#r_manual_remerge>> では、`git show` でできることの中でもう一つ興味深いこととして、マージが衝突した際に、様々な状態の中から特定のファイルの内容を抽出しました。

==== git shortlog

//////////////////////////
The `git shortlog` command is used to summarize the output of `git log`.
It will take many of the same options that the `git log` command will but instead of listing out all of the commits it will present a summary of the commits grouped by author.
//////////////////////////
`git shortlog` コマンドは、 `git log` の出力を要約するのに使用されます。このコマンドは、 `git log` と同じオプションの多くを受け取りますが、すべてのコミットを一覧表示する代わりに、コミットの作者の単位でまとめた概要を表示します。

//////////////////////////
We showed how to use it to create a nice changelog in <<ch05-distributed-git#r_the_shortlog>>.
//////////////////////////
<<ch05-distributed-git#r_the_shortlog>> では、このコマンドを使用して、すてきな変更履歴を作成する方法を示しました。

==== git describe

//////////////////////////
The `git describe` command is used to take anything that resolves to a commit and produces a string that is somewhat human-readable and will not change.
It's a way to get a description of a commit that is as unambiguous as a commit SHA-1 but more understandable.
//////////////////////////
`git describe` コマンドは、あるコミットを指し示す何らかの文字列を受け取って、人間が読めてかつ不変であるような文字列を生成します。この文字列は、コミットのSHA-1と同様にひとつのコミットを特定できますが、より理解しやすい形式になっています。

//////////////////////////
We use `git describe` in <<ch05-distributed-git#r_build_number>> and <<ch05-distributed-git#r_preparing_release>> to get a string to name our release file after.
//////////////////////////
<<ch05-distributed-git#r_build_number>> および <<ch05-distributed-git#r_preparing_release>> では、後でリリースファイルに名前をつけるために、 `git describe` を使用して文字列を取得しました。


//////////////////////////
=== Debugging
//////////////////////////
=== デバッグ

//////////////////////////
Git has a couple of commands that are used to help debug an issue in your code.
This ranges from figuring out where something was introduced to figuring out who introduced it.
//////////////////////////
Gitには、コードのデバッグを支援するためのコマンドが2つあります。このコマンドは、どこに問題が入り込んだのかを明らかにするところから、誰がそれを入れ込んだのかを明らかにするところまでを支援してくれます。

==== git bisect

//////////////////////////
The `git bisect` tool is an incredibly helpful debugging tool used to find which specific commit was the first one to introduce a bug or problem by doing an automatic binary search.
//////////////////////////
`git bisect` は非常に便利なデバッグツールです。バグや問題が最初に入り込んだのがどのコミットか、二分探索を自動的に行って調査します。

//////////////////////////
It is fully covered in <<ch07-git-tools#r_binary_search>> and is only mentioned in that section.
//////////////////////////
このコマンドは <<ch07-git-tools#r_binary_search>> でくまなく取り上げました。このコマンドに言及しているのはこの節だけです。

==== git blame

//////////////////////////
The `git blame` command annotates the lines of any file with which commit was the last one to introduce a change to each line of the file and what person authored that commit.
This is helpful in order to find the person to ask for more information about a specific section of your code.
//////////////////////////
`git blame` コマンドは、任意のファイルの各行に対して、注釈を付与して表示します。注釈には、ファイルの各行を最後に変更したのはどのコミットか、そのコミットの作者は誰かが含まれます。これは、コードの特定の行について質問したいときに、誰に聞いたらいいか調べるのに役立ちます。

//////////////////////////
It is covered in <<ch07-git-tools#r_file_annotation>> and is only mentioned in that section.
//////////////////////////
このコマンドは <<ch07-git-tools#r_file_annotation>> で取り上げました。このコマンドについて言及しているのはこの節だけです。

==== git grep

//////////////////////////
The `git grep` command can help you find any string or regular expression in any of the files in your source code, even older versions of your project.
//////////////////////////
`git grep` コマンドは、任意の文字列や正規表現でソースコード内を検索することができます。検索は、古いバージョンのプロジェクトに対して行うこともできます。

//////////////////////////
It is covered in <<ch07-git-tools#r_git_grep>> and is only mentioned in that section.
//////////////////////////
このコマンドは <<ch07-git-tools#r_git_grep>> で取り上げました。このコマンドについて言及しているのはこの節だけです。

//////////////////////////
=== Patching
//////////////////////////
=== パッチの適用

//////////////////////////
A few commands in Git are centered around the concept of thinking of commits in terms of the changes they introduce, as though the commit series is a series of patches.
These commands help you manage your branches in this manner.
//////////////////////////
Gitのコマンドのうちいくつかは、コミットとはそれによっておこる修正のことであるという観点で捉え、また一連のコミットを一続きのパッチの集まりであるとみなす考え方を中心としています。これらのコマンドは、この考え方に従ってブランチを管理するのに役立ちます。

==== git cherry-pick

//////////////////////////
The `git cherry-pick` command is used to take the change introduced in a single Git commit and try to re-introduce it as a new commit on the branch you're currently on.
This can be useful to only take one or two commits from a branch individually rather than merging in the branch which takes all the changes.
//////////////////////////
`git cherry-pick` コマンドは、あるコミットで行われた変更を取得して、それを現在のブランチへ新しいコミットとして取り込む場合に使用されます。これは、あるブランチをマージしてすべての変更を取り込むのではなく、そのブランチから一つか二つのコミットだけを個別に取り込みたい場合に役立ちます。

//////////////////////////
Cherry picking is described and demonstrated in <<ch05-distributed-git#r_rebase_cherry_pick>>.
//////////////////////////
<<ch05-distributed-git#r_rebase_cherry_pick>> では、チェリーピックの説明を行い、実例を示しました。

==== git rebase

//////////////////////////
The `git rebase` command is basically an automated `cherry-pick`.
It determines a series of commits and then cherry-picks them one by one in the same order somewhere else.
//////////////////////////
`git rebase` コマンドは、基本的には `cherry-pick` を自動化したものです。対象となる一連のコミットを決めた上で、それらを一つずつ、元と同じ順序となるように、どこか別の場所へチェリーピックします。

//////////////////////////
Rebasing is covered in detail in <<ch03-git-branching#r_rebasing>>, including covering the collaborative issues involved with rebasing branches that are already public.
//////////////////////////
<<ch03-git-branching#r_rebasing>> では、リベースについて詳しく取り上げました。ここでは、公開済みのブランチのリベースに関連した、共同作業の際の課題についても取り上げました。

//////////////////////////
We use it in practice during an example of splitting your history into two separate repositories in <<ch07-git-tools#r_replace>>, using the `--onto` flag as well.
//////////////////////////
<<ch07-git-tools#r_replace>> では、歴史を分割して、二つの別々のリポジトリへ格納する例を通して、このコマンドの実用的な使い方を示しました。またその際に `--onto` フラグを使用しました。

//////////////////////////
We go through running into a merge conflict during rebasing in <<ch07-git-tools#r_rerere>>.
//////////////////////////
<<ch07-git-tools#r_rerere>> では、リベース中に発生するマージコンフリクトについて見てきました。

//////////////////////////
We also use it in an interactive scripting mode with the `-i` option in <<ch07-git-tools#r_changing_multiple>>.
//////////////////////////
<<ch07-git-tools#r_changing_multiple>> では、 `-i` オプションを指定して、対話的スクリプティングモードを使用しました。

==== git revert

//////////////////////////
The `git revert` command is essentially a reverse `git cherry-pick`.
It creates a new commit that applies the exact opposite of the change introduced in the commit you're targeting, essentially undoing or reverting it.
//////////////////////////
`git revert` コマンドは、本質的には `git cherry-pick` コマンドの逆です。このコマンドは、コマンドの対象となるコミットで取り込まれた変更に対して、本質的にはそれを元に戻したり取り消したりすることで、そのコミットとは逆の変更を行うコミットを新規に作成します。

//////////////////////////
We use this in <<ch07-git-tools#r_reverse_commit>> to undo a merge commit.
//////////////////////////
<<ch07-git-tools#r_reverse_commit>> では、マージコミットを元に戻すのにこのコマンドを使用しました。

//////////////////////////
=== Email
//////////////////////////
=== メール

//////////////////////////
Many Git projects, including Git itself, are entirely maintained over mailing lists.
Git has a number of tools built into it that help make this process easier, from generating patches you can easily email to applying those patches from an email box.
//////////////////////////
Git自体を含め、多くのGitプロジェクトは、もっぱらメーリングリスト上で管理されています。Gitには、メールで簡単に送れるパッチを生成したり、メールボックスからパッチ当てをしたりといった、このプロセスを補助するツールがいくつか組み込まれています。

==== git apply

//////////////////////////
The `git apply` command applies a patch created with the `git diff` or even GNU diff command.
It is similar to what the `patch` command might do with a few small differences.
//////////////////////////
`git apply` コマンドは、`git diff` コマンドまたはGNU diffコマンドで作成したパッチを適用します。ほんの少しの違いを除けば、これは `patch` コマンドが行うであろう処理と同様のものです。

//////////////////////////
We demonstrate using it and the circumstances in which you might do so in <<ch05-distributed-git#r_patches_from_email>>.
//////////////////////////
<<ch05-distributed-git#r_patches_from_email>> では、このコマンドの使い方と、それを行うであろう状況を例示しました。

==== git am

//////////////////////////
The `git am` command is used to apply patches from an email inbox, specifically one that is mbox formatted.
This is useful for receiving patches over email and applying them to your project easily.
//////////////////////////
`git am` コマンドは、メールの受信トレイ（特にmboxフォーマットのもの）からパッチを適用するのに使用されます。これは、パッチをメールで受け取った上で、それを簡単にプロジェクトへ適用するのに役立ちます。

//////////////////////////
We covered usage and workflow around `git am` in <<ch05-distributed-git#r_git_am>> including using the `--resolved`, `-i` and `-3` options.
//////////////////////////
<<ch05-distributed-git#r_git_am>> では、`--resolved` 、 `-i` および `-3` オプションの使い方を含め、 `git am` コマンドの使い方とワークフローを取り上げました。

//////////////////////////
There are also a number of hooks you can use to help with the workflow around `git am` and they are all covered in <<ch08-customizing-git#r_email_hooks>>.
//////////////////////////
`git am` に関連したワークフローを便利にするのに使用できるフックは数多くあります。それらのフックはすべて <<ch08-customizing-git#r_email_hooks>> で取り上げました。

//////////////////////////
We also use it to apply patch formatted GitHub Pull Request changes in <<ch06-github#r_email_notifications>>.
//////////////////////////
<<ch06-github#r_email_notifications>> では、GitHubのプルリクエストの変更点をpatch形式にフォーマットしたものを、このコマンドを使用して適用しました。

==== git format-patch

//////////////////////////
The `git format-patch` command is used to generate a series of patches in mbox format that you can use to send to a mailing list properly formatted.
//////////////////////////
`git format-patch` コマンドは、一連のパッチをmbox形式にフォーマットし、適切にフォーマットされた形式でメーリングリストへ送信できるようにします。

//////////////////////////
We go through an example of contributing to a project using the `git format-patch` tool in <<ch05-distributed-git#r_project_over_email>>.
//////////////////////////
<<ch05-distributed-git#r_project_over_email>> では、 `git format-patch` ツールを使用してプロジェクトへ貢献する例を見てきました。

==== git imap-send

//////////////////////////
The `git imap-send` command uploads a mailbox generated with `git format-patch` into an IMAP drafts folder.

We go through an example of contributing to a project by sending patches with the `git imap-send` tool in <<ch05-distributed-git#r_project_over_email>>.
//////////////////////////
`git imap-send` コマンドを使うと、`git format-patch` コマンドによって生成された mailbox ファイルをIMAP サーバのドラフトフォルダにアップロードしてくれます。

プロジェクトへの貢献方法として、`git imap-send` を使ってパッチを送る例を <<ch05-distributed-git#r_project_over_email>> で紹介しています。

==== git send-email

//////////////////////////
The `git send-email` command is used to send patches that are generated with `git format-patch` over email.
//////////////////////////
`git send-email` コマンドは、`git format-patch` コマンドで生成したパッチをメールで送信する際に使用されます。

//////////////////////////
We go through an example of contributing to a project by sending patches with the `git send-email` tool in <<ch05-distributed-git#r_project_over_email>>.
//////////////////////////
<<ch05-distributed-git#r_project_over_email>> では、`git send-email` ツールを使用して、パッチを送信してプロジェクトへ貢献する例を見てきました。

==== git request-pull

//////////////////////////
The `git request-pull` command is simply used to generate an example message body to email to someone.
If you have a branch on a public server and want to let someone know how to integrate those changes without sending the patches over email, you can run this command and send the output to the person you want to pull the changes in.
//////////////////////////
`git request-pull` コマンドは、単に誰かへのメールの本文の例を生成するのに使用されます。公開サーバにブランチがあり、メールでパッチを送信することなしにその変更点を取り込んでもらう方法を誰かに知ってもらいたい場合、このコマンドを実行して、変更点を取り込んでもらいたい人にその出力を送ることができます。

//////////////////////////
We demonstrate how to use `git request-pull` to generate a pull message in <<ch05-distributed-git#r_public_project>>.
//////////////////////////
<<ch05-distributed-git#r_public_project>> では、`git request-pull` を使用してプルメッセージを生成する実例を示しました。

//////////////////////////
=== External Systems
//////////////////////////
=== 外部システム

//////////////////////////
Git comes with a few commands to integrate with other version control systems.
//////////////////////////
Gitには、他のバージョン管理システムと連携するためのコマンドがいくつか付属しています。

==== git svn

//////////////////////////
The `git svn` command is used to communicate with the Subversion version control system as a client.
This means you can use Git to checkout from and commit to a Subversion server.
//////////////////////////
`git svn` コマンドは、Subversionバージョン管理システムに対して、クライアントとして通信をするのに使用されます。これは、Subversionサーバに対してチェックアウトしたりコミットしたりするのにGitを使用できることを意味しています。

//////////////////////////
This command is covered in depth in <<ch09-git-and-other-scms#r_git_svn>>.
//////////////////////////
<<ch09-git-and-other-scms#r_git_svn>> では、このコマンドについて詳細に取り上げました。

==== git fast-import

//////////////////////////
For other version control systems or importing from nearly any format, you can use `git fast-import` to quickly map the other format to something Git can easily record.
//////////////////////////
他のバージョン管理システム、または他の任意のフォーマットからのインポートにおいては、 `git fast-import` を使用して、他のフォーマットをGitが容易に記録できるフォーマットへ対応付けることができます。

//////////////////////////
This command is covered in depth in <<ch09-git-and-other-scms#r_custom_importer>>.
//////////////////////////
<<ch09-git-and-other-scms#r_custom_importer>> では、このコマンドについて詳細に取り上げました。

//////////////////////////
=== Administration
//////////////////////////
=== システム管理

//////////////////////////
If you're administering a Git repository or need to fix something in a big way, Git provides a number of administrative commands to help you out.
//////////////////////////
Gitリポジトリのシステム管理をしていたり、大々的に何かを修正したい場合、Gitにはそれを支援するシステム管理用コマンドがいくつかあります。

==== git gc

//////////////////////////
The `git gc` command runs ``garbage collection'' on your repository, removing unnecessary files in your database and packing up the remaining files into a more efficient format.
//////////////////////////
`git gc` コマンドは、リポジトリ上で ``ガベージコレクション'' を実行し、データベース上の不要なファイルを削除するとともに、残ったファイルをより効率的なフォーマットへ詰め込み直します。

//////////////////////////
This command normally runs in the background for you, though you can manually run it if you wish.
We go over some examples of this in <<ch10-git-internals#r_git_gc>>.
//////////////////////////
このコマンドは通常バックグラウンドで自動的に実行されますが、お望みなら手動で実行することもできます。<<ch10-git-internals#r_git_gc>> では、このコマンドのいくつかの例を見てきました。

==== git fsck

//////////////////////////
The `git fsck` command is used to check the internal database for problems or inconsistencies.
//////////////////////////
`git fsck` コマンドは、内部データベースに問題や不整合がないかチェックするのに使用されます。

//////////////////////////
We only quickly use this once in <<ch10-git-internals#r_data_recovery>> to search for dangling objects.
//////////////////////////
このコマンドは、<<ch10-git-internals#r_data_recovery>> で宙ぶらりんのオブジェクトを検索する際に一度使用しただけです。

==== git reflog

//////////////////////////
The `git reflog` command goes through a log of where all the heads of your branches have been as you work to find commits you may have lost through rewriting histories.
//////////////////////////
`git reflog` コマンドは、歴史を書き換える際に失われた可能性のあるコミットを探すため、ブランチのすべてのHEADがあった場所のログを見ていきます。

//////////////////////////
We cover this command mainly in <<ch07-git-tools#r_git_reflog>>, where we show normal usage to and how to use `git log -g` to view the same information with `git log` output.
//////////////////////////
このコマンドは主に <<ch07-git-tools#r_git_reflog>> で取り上げました。通常の使い方と、`git log -g` を使用して `git log` の出力で同じ情報を見る方法を示しました。

//////////////////////////
We also go through a practical example of recovering such a lost branch in <<ch10-git-internals#r_data_recovery>>.
//////////////////////////
<<ch10-git-internals#r_data_recovery>> では、失ったブランチの回復など実用的な例を見てきました。

==== git filter-branch

//////////////////////////
The `git filter-branch` command is used to rewrite loads of commits according to certain patterns, like removing a file everywhere or filtering the entire repository down to a single subdirectory for extracting a project.
//////////////////////////
`git filter-branch` コマンドは、大量のコミットを、特定のパターンに従って書き換える際に使用されます。例えば、あるファイルを全てのコミットから削除する場合や、プロジェクトを抽出するためにリポジトリ全体を単一のサブディレクトリへフィルタリングする場合に使用します。

//////////////////////////
In <<ch07-git-tools#r_removing_file_every_commit>> we explain the command and explore several different options such as `--commit-filter`, `--subdirectory-filter` and `--tree-filter`.
//////////////////////////
<<ch07-git-tools#r_removing_file_every_commit>> では、このコマンドの説明を行いました。また、`--commit-filter`、`--subdirectory-filter`、`--tree-filter` などいくつかのオプションの使い方を見てきました。

//////////////////////////
In <<ch09-git-and-other-scms#r_git_p4>> and <<ch09-git-and-other-scms#r_git_tfs>> we use it to fix up imported external repositories.
//////////////////////////
<<ch09-git-and-other-scms#r_git_p4>> および <<ch09-git-and-other-scms#r_git_tfs>> では、インポートした外部リポジトリの修正にこのコマンドを使用しました。


//////////////////////////
=== Plumbing Commands
//////////////////////////
=== 配管コマンド

//////////////////////////
There were also quite a number of lower level plumbing commands that we encountered in the book.
//////////////////////////
本書では、低レベルな配管コマンドが何度も出てきています。

//////////////////////////
The first one we encounter is `ls-remote` in <<ch06-github#r_pr_refs>> which we use to look at the raw references on the server.
//////////////////////////
最初に `ls-remote` コマンドが出てきたのは <<ch06-github#r_pr_refs>> でした。ここでは、サーバ上の生の参照を見るためにこのコマンドを使用しました。

//////////////////////////
We use `ls-files` in <<ch07-git-tools#r_manual_remerge>>, <<ch07-git-tools#r_rerere>> and <<ch07-git-tools#r_the_index>> to take a more raw look at what your staging area looks like.
//////////////////////////
<<ch07-git-tools#r_manual_remerge>>、<<ch07-git-tools#r_rerere>> および <<ch07-git-tools#r_the_index>> では、`ls-files` を使用して、ステージングエリアがどのようになっているかをより生に近い状態で見てきました。

//////////////////////////
We also mention `rev-parse` in <<ch07-git-tools#r_branch_references>> to take just about any string and turn it into an object SHA-1.
//////////////////////////
<<ch07-git-tools#r_branch_references>> では `rev-parse` について言及しました。ここでは、任意の文字列を受け取ってオブジェクトのSHA-1へ変換するのに使用しました。

//////////////////////////
However, most of the low level plumbing commands we cover are in <<ch10-git-internals#ch10-git-internals>>, which is more or less what the chapter is focused on.
We tried to avoid use of them throughout most of the rest of the book.
//////////////////////////
しかし、低レベルの配管コマンドのほとんどは、多かれ少なかれ、そこにフォーカスした章である <<ch10-git-internals#ch10-git-internals>> で取り上げられています。 また本書の他の大部分では、これらのコマンドを使用しないように努めました。
