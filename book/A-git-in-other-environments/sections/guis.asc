//////////////////////////
=== Graphical Interfaces
//////////////////////////
=== グラフィカルインタフェース

(((GUIs)))(((Graphical tools)))
//////////////////////////
Git's native environment is in the terminal.
New features show up there first, and only at the command line is the full power of Git completely at your disposal.
But plain text isn't the best choice for all tasks; sometimes a visual representation is what you need, and some users are much more comfortable with a point-and-click interface.
//////////////////////////
Gitは端末をネイティブ環境としています。
Gitの新機能は、まずコマンドラインから利用可能になります。また、Gitのパワーの全てを完全に思い通りに使えるのもコマンドラインからだけです。
しかし、すべてのタスクにおいてプレーンテキストが最良の選択というわけではありません。時には視覚的な表現も必要でしょうし、ポイント＆クリック方式のインタフェースの方が好みというユーザもいるでしょう。

//////////////////////////
It's important to note that different interfaces are tailored for different workflows.
Some clients expose only a carefully curated subset of Git functionality, in order to support a specific way of working that the author considers effective.
When viewed in this light, none of these tools can be called ``better'' than any of the others, they're simply more fit for their intended purpose.
Also note that there's nothing these graphical clients can do that the command-line client can't; the command-line is still where you'll have the most power and control when working with your repositories.
//////////////////////////
なお、それぞれのインタフェースはそれぞれ別のワークフローに合わせて調整されているということには注意が必要です。
クライアントによっては、クライアントの作者が効率的だと考えている特定の作業手順をサポートするため、Gitの機能の中から選び抜かれた一部の機能だけを利用可能としている場合もあります。
この観点から見た場合、あるツールが他のツールと比べて ``よい'' よいうことはありません。各ツールは自身が想定している目的により適合している、というだけです。
また、これらグラフィカルクライアントでは可能で、コマンドラインクライアントでは不可能な処理、というものはありませんので注意してください。リポジトリに対して作業をする場合、コマンドラインが最もパワフルであることに変わりはありません。

//////////////////////////
==== `gitk` and `git-gui`
//////////////////////////
==== `gitk` と `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
//////////////////////////
When you install Git, you also get its visual tools, `gitk` and `git-gui`.
//////////////////////////
Gitをインストールすると、ビジュアルツール `gitk` および `git-gui` が使えるようになります。

//////////////////////////
`gitk` is a graphical history viewer.
Think of it like a powerful GUI shell over `git log` and `git grep`.
This is the tool to use when you're trying to find something that happened in the past, or visualize your project's history.
//////////////////////////
`gitk` はグラフィカルな歴史ビューアです。
`git log` や `git grep` をパワフルなGUIシェルから使えるようにしたようなものだと思ってください。
これは、過去に何が起こったかを検索したり、プロジェクトの歴史を視覚化しようとしているときに使うツールです。

//////////////////////////
Gitk is easiest to invoke from the command-line.
Just `cd` into a Git repository, and type:
//////////////////////////
Gitkはコマンドラインから呼び出すのが一番簡単です。
Gitのリポジトリに `cd` して、以下のようにタイプしてください。

[source,console]
//////////////////////////
----
$ gitk [git log options]
----
//////////////////////////
----
$ gitk [git logのオプション]
----

//////////////////////////
Gitk accepts many command-line options, most of which are passed through to the underlying `git log` action.
Probably one of the most useful is the `--all` flag, which tells gitk to show commits reachable from _any_ ref, not just HEAD.
Gitk's interface looks like this:
//////////////////////////
Gitkには多くのコマンドラインオプションがありますが、その多くはGitkの背後にいる `git log` アクションに渡されます。
おそらく、最も便利なオプションの一つは `--all` フラグでしょう。これはgitkに対し、HEADだけではなく _任意の_ 参照から到達可能なコミットを表示させるものです。
Gitkのインターフェイスは次のようになっています。

//////////////////////////
.The `gitk` history viewer.
image::images/gitk.png[The `gitk` history viewer.]
//////////////////////////
.`gitk` の歴史ビューアー
image::images/gitk.png[`gitk` の歴史ビューアー]

//////////////////////////
On the top is something that looks a bit like the output of `git log --graph`; each dot represents a commit, the lines represent parent relationships, and refs are shown as colored boxes.
The yellow dot represents HEAD, and the red dot represents changes that are yet to become a commit.
At the bottom is a view of the selected commit; the comments and patch on the left, and a summary view on the right.
In between is a collection of controls used for searching history.
//////////////////////////
上部には `git log --graph` の出力に似た内容が表示されます。各ドットはコミットを、線は親子関係を表しており、参照は色付きの箱として表示されます。
黄色の点はHEADを、赤い点はまだコミットになっていない変更を表しています。
下部には、選択されているコミットの内容が表示されます。コメントやパッチが左側に、概要が右側に表示されます。
真ん中にあるのは歴史の検索に使用するコントロール類です。

//////////////////////////
`git-gui`, on the other hand, is primarily a tool for crafting commits.
It, too, is easiest to invoke from the command line:
//////////////////////////
一方、 `git-gui` は主にコミットを作成するためのツールです。
これも、コマンドラインから起動するのが最も簡単です。

[source,console]
-----
$ git gui
-----

//////////////////////////
And it looks something like this:
//////////////////////////
表示内容は次のようになっています。

//////////////////////////
.The `git-gui` commit tool.
image::images/git-gui.png[The `git-gui` commit tool.]
//////////////////////////
.`git-gui` のコミットツール
image::images/git-gui.png[`git-gui` のコミットツール]

//////////////////////////
On the left is the index; unstaged changes are on top, staged changes on the bottom.
You can move entire files between the two states by clicking on their icons, or you can select a file for viewing by clicking on its name.
//////////////////////////
左側はインデックスです。ステージされていない変更が上に、ステージされた変更が下に表示されます。
アイコンをクリックすると、各ファイルを2つの状態の間で行き来したり、ファイル名をクリックすることで表示するファイルを選択したりできます。

//////////////////////////
At top right is the diff view, which shows the changes for the currently-selected file.
You can stage individual hunks (or individual lines) by right-clicking in this area.
//////////////////////////
右上に表示されているのは diff で、現在選択されているファイルの変化を示しています。
この領域を右クリックすることで、個々のhunk（または個々の行）をステージングできます。

//////////////////////////
At the bottom right is the message and action area.
Type your message into the text box and click ``Commit'' to do something similar to `git commit`.
You can also choose to amend the last commit by choosing the ``Amend'' radio button, which will update the ``Staged Changes'' area with the contents of the last commit.
Then you can simply stage or unstage some changes, alter the commit message, and click ``Commit'' again to replace the old commit with a new one.
//////////////////////////
右下はメッセージとアクションの領域です。テキストボックスにメッセージを入力し、 ``Commit'' をクリックすれば、 `git commit` と同じようなことができます。
また、 ``Amend'' ラジオボタンを選択すると、 ``Staged Changes'' 領域に最後のコミットの内容が表示されるので、そのコミットを修正することもできます。 
変更をステージしたり、ステージを取り消したり、コミットメッセージを変更したりしたら、 ``Commit'' を再度クリックすれば古いコミットが新しい内容で更新されます。

//////////////////////////
`gitk` and `git-gui` are examples of task-oriented tools.
Each of them is tailored for a specific purpose (viewing history and creating commits, respectively), and omit the features not necessary for that task.
//////////////////////////
`gitk` と `git-gui` はタスク指向のツールの例です。
特定の目的（それぞれ、履歴の表示と、コミットの作成）に合わせて調整されており、そのタスクに不要な機能は省略されています。


//////////////////////////
==== GitHub for Mac and Windows
//////////////////////////
==== MacとWindows用のGitHubクライアント

(((GitHub for Mac)))(((GitHub for Windows)))
//////////////////////////
GitHub has created two workflow-oriented Git clients: one for Windows, and one for Mac.
These clients are a good example of workflow-oriented tools – rather than expose _all_ of Git's functionality, they instead focus on a curated set of commonly-used features that work well together.
They look like this:
//////////////////////////
GitHubは、ワークフロー指向のGitクライアントを公開しています。Windows用クライアントと、Mac用クライアントがあります。
これらのクライアントは、ワークフロー指向のツールの良い例です。Gitの機能の _すべて_ を公開するのではなく、よく使われる機能の中から一緒に使うと便利な機能を選択し、それにフォーカスしています。
表示内容は次のようになっています。

//////////////////////////
.GitHub for Mac.
image::images/github_mac.png[GitHub for Mac.]
//////////////////////////
.GitHubのMac用クライアント
image::images/github_mac.png[GitHubのMac用クライアント]

//////////////////////////
.GitHub for Windows.
image::images/github_win.png[GitHub for Windows.]
//////////////////////////
.GitHubのWindows用クライアント
image::images/github_win.png[GitHubのWindows用クライアント]

//////////////////////////
They are designed to look and work very much alike, so we'll treat them like a single product in this chapter.
We won't be doing a detailed rundown of these tools (they have their own documentation), but a quick tour of the ``changes'' view (which is where you'll spend most of your time) is in order.
//////////////////////////
この2つは見た目や動作が似たような感じで設計されているので、この章ではひとつの製品として扱うことにします。
ここではツールの詳細な説明はしません（GitHubクライアントの自前のドキュメントがあります）が、 ``changes'' ビュー（ツールの実行時間の大半はここを使うことになると思います）の内容をざっと見ていきましょう。

//////////////////////////
* On the left is the list of repositories the client is tracking; you can add a repository (either by cloning or attaching locally) by clicking the ``+'' icon at the top of this area.
* In the center is a commit-input area, which lets you input a commit message, and select which files should be included.
  (On Windows, the commit history is displayed directly below this; on Mac, it's on a separate tab.)
* On the right is a diff view, which shows what's changed in your working directory, or which changes were included in the selected commit.
* The last thing to notice is the ``Sync'' button at the top-right, which is the primary way you interact over the network.
//////////////////////////
* 左側には、クライアントが追跡しているリポジトリのリストが表示されます。この領域の一番上の ``+ '' アイコンをクリックすると、（ローカルでクローンするかアタッチするかして）リポジトリを追加できます。
* 真ん中はコミット入力領域です。コミットメッセージを入力したり、コミットに含めるファイルを選択したりできます。
  （Windowsでは、コミットの歴史は、この下に直接表示されます。Macの場合は、別のタブに表示されます。）
* 右側はdiffビューです。作業ディレクトリの変更内容、または、選択しているコミットに含まれている内容が表示されます。
* 最後に、右上の ``Sync'' ボタンは、ネットワーク経由で対話を行う主要な手段です。

//////////////////////////
[NOTE]
====
You don't need a GitHub account to use these tools.
While they're designed to highlight GitHub's service and recommended workflow, they will happily work with any repository, and do network operations with any Git host.
====
//////////////////////////
[NOTE]
====
これらのツールの使用にあたり、GitHubのアカウントは必要ありません。
これらのツールはGitHubのサービスや推奨ワークフローをハイライトするために設計されたものですが、どんなリポジトリに対しても正しく動作しますし、どんなGitのホストに対してもネットワーク操作が行えます。
====

//////////////////////////
===== Installation
//////////////////////////
===== インストール

//////////////////////////
GitHub for Windows can be downloaded from https://windows.github.com[], and GitHub for Mac from https://mac.github.com[].
When the applications are first run, they walk you through all the first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior.
//////////////////////////
Windows用のGitHubクライアントは https://windows.github.com[] から、Mac用のGitHubクライアントは https://mac.github.com[] からダウンロードできます。
クライアントを初めて実行する際には、名前やメールアドレスの設定といったGitの初期設定がひと通り行われます。また、認証情報のキャッシュやCRLFの挙動といった、一般的なオプション設定に対して、デフォルト値が設定されます。

//////////////////////////
Both are ``evergreen'' – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won't have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch Powershell with Posh-git, which we'll talk more about later in this chapter.
//////////////////////////
これらのツールはいずれも ``新鮮'' な状態に保たれます。つまり、アプリケーションのアップデートは、アプリケーションの実行中にバックグラウンドで自動的にダウンロードされ、インストールされます。
このアップデートには、ツールに同梱されているGitも含まれています。そのため、Gitを手動で更新する心配をする必要はおそらくないと思います。
Windowsの場合、PowerShellをPosh-gitと一緒に起動するショートカットがクライアントに同梱されています。これについてはこの章の後半で詳しく説明します。

//////////////////////////
The next step is to give the tool some repositories to work with.
The client shows you a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it will be included in the list of repositories on the left.
//////////////////////////
次のステップでは、ツールに操作対象のリポジトリを設定します。
クライアントには、GitHubであなたがアクセスできるリポジトリの一覧が表示されます。クローンの作成は1ステップで行えます。
既にローカルリポジトリがある場合は、GitHubのクライアントウインドウにFinderまたはWindowsエクスプローラからそのディレクトリをドラッグすれば、クライアント左側のリポジトリのリストに追加されます。

//////////////////////////
===== Recommended Workflow
//////////////////////////
===== 推奨ワークフロー

//////////////////////////
Once it's installed and configured, you can use the GitHub client for many common Git tasks.
The intended workflow for this tool is sometimes called the ``GitHub Flow.''
We cover this in more detail in <<ch06-github#r_github_flow>>, but the general gist is that (a) you'll be committing to a branch, and (b) you'll be syncing up with a remote repository fairly regularly.
//////////////////////////
インストールと設定が完了したら、GitHubクライアントを使って一般的なGitのタスクの多くが行えます。
このツールで想定されているワークフローは ``GitHub Flow'' とも呼ばれています。
この詳細は <<ch06-github#r_github_flow>> で取り上げます。要点としては、（a）コミットはブランチに対して行う、（b）定期的にリモートリポジトリと同期する、といった点があります。

//////////////////////////
Branch management is one of the areas where the two tools diverge.
On Mac, there's a button at the top of the window for creating a new branch:
//////////////////////////
ブランチ管理は、2つのツールで操作が異なる点の一つです。
Mac用クライアントでは、新しいブランチを作成するためのボタンがウィンドウ上部にあります。

//////////////////////////
.``Create Branch'' button on Mac.
image::images/branch_widget_mac.png[``Create Branch'' button on Mac.]
//////////////////////////
.Mac用クライアントの ``Create Branch'' ボタン
image::images/branch_widget_mac.png[Mac用クライアントの ``Create Branch'' ボタン]

//////////////////////////
On Windows, this is done by typing the new branch's name in the branch-switching widget:
//////////////////////////
Windows用クライアントでは、ブランチ切り替えのウィジェットで新しいブランチ名を入力すると、新しいブランチが作成されます。

//////////////////////////
.Creating a branch on Windows.
image::images/branch_widget_win.png[Creating a branch on Windows.]
//////////////////////////
.Windows用クライアントでブランチを作成する
image::images/branch_widget_win.png[Windows用クライアントでブランチを作成する]

//////////////////////////
Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, it will show you which files changed.
Enter a commit message, select the files you'd like to include, and click the ``Commit'' button (ctrl-enter or ⌘-enter).
//////////////////////////
ブランチの作成が終われば、コミットの新規作成は非常に簡単です。
作業ディレクトリで変更を行った後、GitHubクライアントのウィンドウに切り替えると、どのファイルが変更されたか表示されます。
コミットに含めたいファイルを選択し、コミットメッセージを入力したら、 ``Commit'' ボタンをクリックします（またはCtrl-Enterか、⌘-Enterを押下します）。

//////////////////////////
The main way you interact with other repositories over the network is through the ``Sync'' feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub clients collapse all of these into one multi-step feature.
Here's what happens when you click the Sync button:
//////////////////////////
ネットワーク経由で他のリポジトリとの対話するには、主に ``Sync'' 機能を使用します。
Gitは内部的に、プッシュ、フェッチ、マージ、およびリベースを別々の操作としていますが、GitHubクライアントではこれら一連の処理を1つの機能で実行できるようになっています。
``Sync'' ボタンをクリックすると以下の処理が実行されます。

//////////////////////////
. `git pull --rebase`.
  If this fails because of a merge conflict, fall back to `git pull --no-rebase`.
. `git push`.
//////////////////////////
. `git pull --rebase` を実行します。
  マージが衝突してこのコマンドが失敗したら、代わりに `git pull --no-rebase` にフォールバックします。
. `git push` を実行します。

//////////////////////////
This is the most common sequence of network commands when working in this style, so squashing them into one command saves a lot of time.
//////////////////////////
これは、このスタイルで作業するときに最もよく実行されるネットワークコマンドのシーケンスなので、これを1つのコマンドにまとめることで、多くの時間を節約できます。

//////////////////////////
===== Summary
//////////////////////////
===== まとめ

//////////////////////////
These tools are very well-suited for the workflow they're designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line.
//////////////////////////
これらのツールは、その前提となっているワークフローに合わせて最適化されています。
開発者と非開発者が一つのプロジェクト上で共同作業を行う際に、双方がすぐに同じように作業を行えるようになっていますし、この種のワークフローにおける多くのベストプラクティスがツールに埋め込まれています。
しかし、あなたのワークフローがその前提と異なっている場合や、ネットワーク操作をいつどのように行うかをより細かく制御したい場合には、別のクライアントを使うか、またはコマンドラインからGitを使用することをお勧めします。


//////////////////////////
==== Other GUIs
//////////////////////////
==== その他のGUI

//////////////////////////
There are a number of other graphical Git clients, and they run the gamut from specialized, single-purpose tools all the way to apps that try to expose everything Git can do.
The official Git website has a curated list of the most popular clients at http://git-scm.com/downloads/guis[].
A more comprehensive list is available on the Git wiki site, at https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
//////////////////////////
グラフィカルなGitクライアントは他にもあり、一つの目的に特化したツールから、Gitのできることは全て操作可能にしようとしているアプリケーションまで多岐に渡ります。
Gitのオフィシャルウェブサイトには、よく使われているクライアントのリストがあります。詳しくは http://git-scm.com/downloads/guis[] を参照してください。
また、より包括的なリストは Git wiki のサイトに掲載されています。詳しくは https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[] を参照してください。
