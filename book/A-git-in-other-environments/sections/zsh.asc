//////////////////////////
=== Git in Zsh
//////////////////////////
=== ZshでGitを使う

(((zsh)))(((tab completion, zsh)))(((shell prompts, zsh)))
//////////////////////////
Zsh also ships with a tab-completion library for Git.
To use it, simply run `autoload -Uz compinit && compinit` in your `.zshrc`.
Zsh's interface is a bit more powerful than Bash's:
//////////////////////////
Zshには、Git用のタブ補完ライブラリも同梱されています。
`.zshrc` に `autoload -Uz compinit && compinit` という行を追加するだけで、使えるようになります。
Zshのインターフェイスは、Bashよりさらに強力です。

[source,console]
----
$ git che<tab>
check-attr        -- display gitattributes information
check-ref-format  -- ensure that a reference name is well formed
checkout          -- checkout branch or paths to working tree
checkout-index    -- copy files from index to working directory
cherry            -- find commits not merged upstream
cherry-pick       -- apply changes introduced by some existing commits
----

//////////////////////////
Ambiguous tab-completions aren't just listed; they have helpful descriptions, and you can graphically navigate the list by repeatedly hitting tab.
This works with Git commands, their arguments, and names of things inside the repository (like refs and remotes), as well as filenames and all the other things Zsh knows how to tab-complete.
//////////////////////////
タブ補完の結果が一意に定まらない場合にできることは、候補のリスト表示だけではありません。役に立つ説明が表示されますし、繰り返しタブを押下すれば、グラフィカルにリスト内をナビゲートすることもできます。
この機能は、Gitのコマンド、Gitコマンドの引数、リポジトリ内にあるものの名前（参照やリモートなど）に対して働きます。また、ファイル名や、その他Zsh自身がタブ補完の方法を知っている要素に対しても働きます。

//////////////////////////
Zsh ships with a framework for getting information from version control systems, called `vcs_info`.
To include the branch name in the prompt on the right side, add these lines to your `~/.zshrc` file:
//////////////////////////
また、バージョン管理システムから情報を読み取るためのフレームワークがZshには同梱されています。
ブランチ名をプロンプトの右端に表示するには、 `~/.zshrc` ファイルに次の内容を追加します。

[source,console]
----
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
# PROMPT=\$vcs_info_msg_0_'%# '
zstyle ':vcs_info:git:*' formats '%b'
----

//////////////////////////
This results in a display of the current branch on the right-hand side of the terminal window, whenever your shell is inside a Git repository.
(The left side is supported as well, of course; just uncomment the assignment to PROMPT.)
It looks a bit like this:
//////////////////////////
これで、シェルがGitリポジトリ内にいるときには、ターミナルウィンドウの右側に現在のブランチ名が表示されるようになります。
（左側に表示することももちろん可能です。そうしたければ、PROMPT 部分のコメントを外してください。）
見た目は次のようになります。

//////////////////////////
.Customized `zsh` prompt
image::images/zsh-prompt.png[Customized `zsh` prompt.]
//////////////////////////
.カスタマイズされた `zsh` のプロンプト
image::images/zsh-prompt.png[カスタマイズされた `zsh` のプロンプト]

//////////////////////////
For more information on `vcs_info`, check out its documentation in the `zshcontrib(1)` manual page, or online at http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information[].
//////////////////////////
`vcs_info` についての詳細は、`zshcontrib(1)` マニュアルにあるドキュメントか、オンラインであれば http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information[] を確認してみてください。

//////////////////////////
Instead of `vcs_info`, you might prefer the prompt customization script that ships with Git, called `git-prompt.sh`; see https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh[] for details.
`git-prompt.sh` is compatible with both Bash and Zsh.
//////////////////////////
一方、Gitに同梱されている `git-prompt.sh` というスクリプトでも、プロンプトをカスタマイズすることができます。 `vcs_info` よりも気に入るかもしれませんね。詳しくは https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh[] を確認してみてください。
`git-prompt.sh` はBashとZshの両方に対応しています。

//////////////////////////
Zsh is powerful enough that there are entire frameworks dedicated to making it better.
One of them is called "oh-my-zsh", and it can be found at https://github.com/robbyrussell/oh-my-zsh[].
oh-my-zsh's plugin system comes with powerful git tab-completion, and it has a variety of prompt "themes", many of which display version-control data.
<<oh_my_zsh_git>> is just one example of what can be done with this system.
//////////////////////////
Zshは非常にパワフルであり、Zshには自身を改善するためのフレームワークも備わっています。
そのフレームワークの一つに "oh-my-zsh" があります。これは https://github.com/robbyrussell/oh-my-zsh[] にあります。
oh-my-zshのプラグインシステムには、強力なGit用タブ補完機能が付属しています。また、各種のプロンプトの「テーマ」が付属していて、バージョン管理に関するデータをプロンプトに表示できます。
<<oh_my_zsh_git>> は、このシステムでできることの一例に過ぎません。

[[oh_my_zsh_git]]
//////////////////////////
.An example of an oh-my-zsh theme
image::images/zsh-oh-my.png[An example of an oh-my-zsh theme.]
//////////////////////////
.oh-my-zshのテーマの例
image::images/zsh-oh-my.png[oh-my-zshのテーマの例]
