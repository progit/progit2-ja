[[_git_powershell]]
//////////////////////////
=== Git in PowerShell
//////////////////////////
=== PowerShellでGitを使う

(((PowerShell)))(((tab completion, PowerShell)))(((shell prompts, PowerShell)))
(((posh-git)))
//////////////////////////
The legacy command-line terminal on Windows (`cmd.exe`) isn't really capable of a customized Git experience, but if you're using PowerShell, you're in luck.
This also works if you're running PowerShell Core on Linux or macOS.
A package called posh-git (https://github.com/dahlbyk/posh-git[]) provides powerful tab-completion facilities, as well as an enhanced prompt to help you stay on top of your repository status.
It looks like this:
//////////////////////////
Windowsのレガシーコマンドライン端末（`cmd.exe`）では、Git向けにユーザ経験をカスタマイズすることができません。一方、PowerShellを使用しているならラッキーです。
PowerShell CoreをLinuxやmacOSで動作させていれば、PowerShellが動作します。
posh-git (https://github.com/dahlbyk/posh-git[]) というパッケージが、強力なタブ補完機能や、リポジトリの状態を把握するのに役立つプロンプト表示を提供しています。
表示は次のようになります。

//////////////////////////
.PowerShell with Posh-git.
image::images/posh-git.png[PowerShell with Posh-git.]
//////////////////////////
.PowershellでPosh-gitを使う
image::images/posh-git.png[PowershellでPosh-gitを使う]

//////////////////////////
==== Installation
//////////////////////////
==== インストールする

//////////////////////////
===== Prerequisites (Windows only)
//////////////////////////
===== 前提条件 (Window限定)

//////////////////////////
Before you're able to run PowerShell scripts on your machine, you need to set your local `ExecutionPolicy` to `RemoteSigned` (basically, anything except `Undefined` and `Restricted`).
If you choose `AllSigned` instead of `RemoteSigned`, also local scripts (your own) need to be digitally signed in order to be executed.
With `RemoteSigned`, only scripts having the `ZoneIdentifier` set to `Internet` (were downloaded from the web) need to be signed, others not.
If you're an administrator and want to set it for all users on that machine, use `-Scope LocalMachine`.
If you're a normal user, without administrative rights, you can use `-Scope CurrentUser` to set it only for you.
//////////////////////////
PowerShellスクリプトをあなたのマシンで動作できるようには、ローカル `ExecutionPolicy` を `RemoteSigned` に設定しておく必要があります(基本的には、 `Undefined` と `Restricted` 以外ならば何でも構いません)。
`RemoteSigned` の代わりに `AllSigned` を選択した場合は、(あなた自身が作成した)ローカルのスクリプトも、実行のために電子署名が必要となります。
`RemoteSigned` に設定したならば、 `ZoneIdentifier` が `Internet` に設定されている（インターネット上でダウンロードされた)スクリプトだけが署名が必要で、ほかは必要ありません。
あなたが管理者で、マシンのユーザー全員に実行ポリシーを設定したいのであれば、 `-Scope LocalMachine` を利用してください。
あなたが管理者権限の無い通常のユーザーならば、 `-Scope CurrentUser` を利用してあなたに実行ポリシーを適用できます。

//////////////////////////
More about PowerShell Scopes: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes[]
//////////////////////////
PowerShell のスコープについてもっと知りたい方はこちら: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes[]

//////////////////////////
More about PowerShell ExecutionPolicy: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy[]
//////////////////////////
PowerShell の実行ポリシーについてもっと知りたい方はこちら: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy[]

//////////////////////////
To set the value of `ExecutionPolicy` to `RemoteSigned` for all users use the next command:
//////////////////////////
`ExecutionPolicy` の値を全ユーザーのために `RemoteSigned` に設定するときは、次のコマンドを使います。

[source,powershell]
----
> Set-ExecutionPolicy -Scope LocalMachine -ExecutionPolicy RemoteSigned -Force
----

//////////////////////////
===== PowerShell Gallery
//////////////////////////
===== PowerShell ギャラリー

//////////////////////////
If you have at least PowerShell 5 or PowerShell 4 with PackageManagement installed, you can use the package manager to install posh-git for you.
//////////////////////////
少なくともPackageManagementが同梱されているPowerShell 5 か PowerShell 4 をお持ちでしたら、posh-gitのインストールにパッケージマネージャーを使うことができます。

//////////////////////////
More information about PowerShell Gallery: https://docs.microsoft.com/en-us/powershell/scripting/gallery/overview[]
//////////////////////////
PowerShell ギャラリーについてもっと知りたい方はこちら: https://docs.microsoft.com/en-us/powershell/scripting/gallery/overview[]

[source,powershell]
----
> Install-Module posh-git -Scope CurrentUser -Force
> Install-Module posh-git -Scope CurrentUser -AllowPrerelease -Force # Newer beta version with PowerShell Core support
----

//////////////////////////
If you want to install posh-git for all users, use `-Scope AllUsers` instead and execute the command from an elevated PowerShell console.
If the second command fails with an error like `Module 'PowerShellGet' was not installed by using Install-Module`, you'll need to run another command first:
//////////////////////////
posh-gitを全てのユーザー向けにインストールしたい場合は、かわりに `-Scope AllUsers` 指定し、管理者権限を持ったPowerShellコンソールでコマンドを実行してください。
2つ目のコマンドが `Module 'PowerShellGet' was not installed by using Install-Module` のようなエラーで失敗したときは、まず別のコマンドを実行する必要があります。

[source,powershell]
----
> Install-Module PowerShellGet -Force -SkipPublisherCheck
----

//////////////////////////
Then you can go back and try again.
This happens, because the modules that ship with Windows PowerShell are signed with a different publishment certificate.
//////////////////////////
上記を実行したら戻って再度試してみると良いでしょう。
Windows PowerShellに同梱されたモジュールが異なる発行済み証明書で署名され、上手くいくようになります。

//////////////////////////
===== Update PowerShell Prompt
//////////////////////////
===== PowerShellのプロンプトを更新する

//////////////////////////
To include git information in your prompt, the posh-git module needs to be imported.
To have posh-git imported every time PowerShell starts, execute the `Add-PoshGitToProfile` command which will add the import statement into your `$profile` script.
This script is executed everytime you open a new PowerShell console.
Keep in mind, that there are multiple `$profile` scripts.
E. g. one for the console and a separate one for the ISE.
//////////////////////////
gitの情報をプロンプトに含めるためには、posh-gitモジュールがインポートされる必要があります。
PowerShellが起動する時に毎回posh-gitをインポートさせるには、 `$profile` スクリプトにimportステートメントを追加するコマンド、 `Add-PoshGitToProfile` を実行してください。
このスクリプトはPowerShellコンソールを開くたびに実行されます。
`$profile` スクリプトは複数ある、ということに注意してください。
例えば、あるものはコンソール向け、またあるものはISE向けのもの、といった具合に。

[source,powershell]
----
> Import-Module posh-git
> Add-PoshGitToProfile -AllHosts
----

//////////////////////////
===== From Source
//////////////////////////
===== ソースコードを使ってインポートする

//////////////////////////
Just download a posh-git release from https://github.com/dahlbyk/posh-git/releases[], and uncompress it.
Then import the module using the full path to the `posh-git.psd1` file:
//////////////////////////
https://github.com/dahlbyk/posh-git/releases[] から、リリースされたposh-gitをダウンロードし、解凍します。
そして以下のように `posh-git.psd1` ファイルのフルパスを指定してモジュールをインポートします。

[source,powershell]
----
> Import-Module <path-to-uncompress-folder>\src\posh-git.psd1
> Add-PoshGitToProfile -AllHosts
----

//////////////////////////
This will add the proper line to your `profile.ps1` file, and posh-git will be active the next time you open PowerShell.
//////////////////////////
これで `profile.ps1`ファイルに適切な内容が追加されます。次にPowerShellを開いた時に、 posh-git が有効になります。

//////////////////////////
For a description of the Git status summary information displayed in the prompt see: https://github.com/dahlbyk/posh-git/blob/master/README.md#git-status-summary-information[]
For more details on how to customize your posh-git prompt see: https://github.com/dahlbyk/posh-git/blob/master/README.md#customization-variables[]
//////////////////////////
プロンプトに表示されるGitに関する情報の詳細は、こちらを参照ください。 https://github.com/dahlbyk/posh-git/blob/master/README.md#git-status-summary-information[]
posh-gitのプロンプトのカスタマイズ方法の詳細は、こちらを参照ください。 https://github.com/dahlbyk/posh-git/blob/master/README.md#customization-variables[]