[[r_objects]]
//////////////////////////
=== Git Objects
//////////////////////////
=== Gitオブジェクト

//////////////////////////
Git is a content-addressable filesystem.
Great.
What does that mean?
It means that at the core of Git is a simple key-value data store.
You can insert any kind of content into it, and it will give you back a key that you can use to retrieve the content again at any time.
To demonstrate, you can use the plumbing command `hash-object`, which takes some data, stores it in your `.git` directory, and gives you back the key the data is stored as.
First, you initialize a new Git repository and verify that there is nothing in the `objects` directory:
//////////////////////////
Git は内容アドレスファイルシステムです。
素晴らしい。
…で、それはどういう意味なのでしょう?
それは、Gitのコアの部分はシンプルなキー・バリュー型データストアである、という意味です。
ここにはどんな種類のコンテンツでも格納でき、それに対応するキーが返されます。キーを使えば格納したコンテンツをいつでも取り出せます。
これは `hash-object` という配管コマンドを使えば実際に確認できます。このコマンドはデータを受け取り、それを `.git` ディレクトリに格納し、そのデータを格納しているキーを返します。
まずは、新しいGitリポジトリを初期化し、 `objects` ディレクトリ配下に何もないことを確認してみましょう。

[source,console]
----
$ git init test
Initialized empty Git repository in /tmp/test/.git/
$ cd test
$ find .git/objects
.git/objects
.git/objects/info
.git/objects/pack
$ find .git/objects -type f
----

//////////////////////////
Git has initialized the `objects` directory and created `pack` and `info` subdirectories in it, but there are no regular files.
Now, store some text in your Git database:
//////////////////////////
Gitは `objects` ディレクトリを初期化して、その中に `pack` と `info` というサブディレクトリを作ります。しかし、ファイルはひとつも作られません。
今からGitデータベースにテキストを幾つか格納してみます。

[source,console]
----
$ echo 'test content' | git hash-object -w --stdin
d670460b4b4aece5915caf5c68d12f560a9fe3e4
----

//////////////////////////
The `-w` tells `hash-object` to store the object; otherwise, the command simply tells you what the key would be.
`--stdin` tells the command to read the content from stdin; if you don't specify this, `hash-object` expects a file path at the end.
The output from the command is a 40-character checksum hash.
This is the SHA-1 hash – a checksum of the content you're storing plus a header, which you'll learn about in a bit.
Now you can see how Git has stored your data:
//////////////////////////
`-w` オプションは、 `hash-object` にオブジェクトを格納するよう指示しています。`-w` オプションを付けない場合、コマンドはただオブジェクトのキーとなる文字列を返します。
`--stdin` オプションは、標準入力からコンテンツを読み込むよう指示しています。これを指定しない場合、`hash-object` はコマンドラインオプションの最後にファイルパスが指定されることを期待して動作します。
コマンドを実行すると、40文字から成るチェックサムのハッシュ値が出力されます。
これは、SHA-1ハッシュです。すぐ後で説明しますが、これは格納するコンテンツにヘッダーを加えたデータに対するチェックサムです。
これで、Gitがデータをどのようにして格納するか見ることができるようになりました。

[source,console]
----
$ find .git/objects -type f
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
----

//////////////////////////
You can see a file in the `objects` directory.
This is how Git stores the content initially – as a single file per piece of content, named with the SHA-1 checksum of the content and its header.
The subdirectory is named with the first 2 characters of the SHA-1, and the filename is the remaining 38 characters.
//////////////////////////
`objects` ディレクトリの中にファイルがひとつあります。
Gitはまずこのようにしてコンテンツを格納します。コンテンツ1つごとに1ファイルで、ファイル名はコンテンツとそのヘッダーに対するSHA-1チェックサムで決まります。
SHA-1ハッシュのはじめの2文字がサブディレクトリの名前になり、残りの38文字がファイル名になります。

//////////////////////////
You can pull the content back out of Git with the `cat-file` command.
This command is sort of a Swiss army knife for inspecting Git objects.
Passing `-p` to it instructs the `cat-file` command to figure out the type of content and display it nicely for you:
//////////////////////////
`cat-file` コマンドを使うと、コンテンツをGitから取り出すことができます。
このコマンドは、Gitオブジェクトを調べるための万能ナイフのようなものです。
`-p` オプションを付けると、`cat-file` コマンドはコンテンツのタイプを判別し、わかりやすく表示してくれます。

[source,console]
----
$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
test content
----

//////////////////////////
Now, you can add content to Git and pull it back out again.
You can also do this with content in files.
For example, you can do some simple version control on a file.
First, create a new file and save its contents in your database:
//////////////////////////
これで、Gitにコンテンツを追加したり、取り出したりできるようになりました。
ファイルの内容に対しても、これと同様のことを行えます。
例えば、あるファイルに対して簡単なバージョン管理を行うことができます。
まず、新規にファイルを作成し、データベースにその内容を保存します。

[source,console]
----
$ echo 'version 1' > test.txt
$ git hash-object -w test.txt
83baae61804e65cc73a7201a7252750c76066a30
----

//////////////////////////
Then, write some new content to the file, and save it again:
//////////////////////////
それから、新しい内容をそのファイルに書き込んで、再び保存します。

[source,console]
----
$ echo 'version 2' > test.txt
$ git hash-object -w test.txt
1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
----

//////////////////////////
Your database contains the two new versions of the file as well as the first content you stored there:
//////////////////////////
データベースには、最初に格納したコンテンツに加えて、上記のファイルのバージョン2つが新規に追加されています。

[source,console]
----
$ find .git/objects -type f
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
----

//////////////////////////
Now you can revert the file back to the first version
//////////////////////////
これで、上記のファイルの変更を取り消して最初のバージョンに戻せるようになりました。

[source,console]
----
$ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 > test.txt
$ cat test.txt
version 1
----

//////////////////////////
or the second version:
//////////////////////////
また、2つ目のバージョンにもできます。

[source,console]
----
$ git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a > test.txt
$ cat test.txt
version 2
----

//////////////////////////
But remembering the SHA-1 key for each version of your file isn't practical; plus, you aren't storing the filename in your system – just the content.
This object type is called a blob.
You can have Git tell you the object type of any object in Git, given its SHA-1 key, with `cat-file -t`:
//////////////////////////
しかし、それぞれのファイルのバージョンのSHA-1キーを覚えておくのは実用的ではありません。加えて、システムにはファイル名は格納されておらず、ファイルの内容のみが格納されています。
このオブジェクトタイプはブロブ（blob）と呼ばれます。
`cat-file -t` コマンドに SHA-1キーを渡すことで、あなたは Git 内にあるあらゆるオブジェクトのタイプを問い合わせることができます。

[source,console]
----
$ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
blob
----

[[r_tree_objects]]
//////////////////////////
==== Tree Objects
//////////////////////////
==== ツリーオブジェクト

//////////////////////////
The next type we'll look at is the tree, which solves the problem of storing the filename and also allows you to store a group of files together.
Git stores content in a manner similar to a UNIX filesystem, but a bit simplified.
All the content is stored as tree and blob objects, with trees corresponding to UNIX directory entries and blobs corresponding more or less to inodes or file contents.
A single tree object contains one or more tree entries, each of which contains a SHA-1 pointer to a blob or subtree with its associated mode, type, and filename.
For example, the most recent tree in a project may look something like this:
//////////////////////////
次のタイプはツリーです。これにより、ファイル名の格納の問題を解決して、さらに、複数のファイルをまとめて格納できるようになります。
Git がコンテンツを格納する方法は、UNIXのファイルシステムに似ていますが少し簡略化されています。
すべてのコンテンツはツリーオブジェクトまたはブロブオブジェクトとして格納されます。ツリーは UNIXのディレクトリエントリーと対応しており、ブロブはiノードやファイルコンテンツとほぼ対応しています。
1つのツリーオブジェクトには1つ以上のツリーエントリーが含まれています。このツリーエントリーには、ブロブか、サブツリーとそれに関連するモード、タイプ、ファイル名へのSHA-1ポインターが含まれています。
例えば、あるプロジェクトの最新のツリーはこのように見えるかもしれません。

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README
100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile
040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib
----

//////////////////////////
The `master^{tree}` syntax specifies the tree object that is pointed to by the last commit on your `master` branch.
Notice that the `lib` subdirectory isn't a blob but a pointer to another tree:
//////////////////////////
`master^{tree}` のシンタックスは、`master` ブランチ上での最後のコミットが指しているツリーオブジェクトを示します。
`lib` サブディレクトリはブロブではなく、別のツリーへのポインタであることに注意してください。

[source,console]
----
$ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0
100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b      simplegit.rb
----

//////////////////////////
Conceptually, the data that Git is storing is something like this:
//////////////////////////
概念的には、Gitが格納するデータは次のようなものです。

//////////////////////////
.Simple version of the Git data model.
image::images/data-model-1.png[Simple version of the Git data model.]
//////////////////////////
.Gitデータモデルの簡略版
image::images/data-model-1.png[Gitデータモデルの簡略版]

//////////////////////////
You can fairly easily create your own tree.
Git normally creates a tree by taking the state of your staging area or index and writing a series of tree objects from it.
So, to create a tree object, you first have to set up an index by staging some files.
To create an index with a single entry – the first version of your `test.txt` file – you can use the plumbing command `update-index`.
You use this command to artificially add the earlier version of the `test.txt` file to a new staging area.
You must pass it the `--add` option because the file doesn't yet exist in your staging area (you don't even have a staging area set up yet) and `--cacheinfo` because the file you're adding isn't in your directory but is in your database.
Then, you specify the mode, SHA-1, and filename:
//////////////////////////
自前でツリーを作るのも非常に簡単です。
Gitは通常、ステージングエリアやインデックスの状態を取得してツリーを作成し、そのツリーをもとに一連のツリーオブジェクトを書き込みます。
そのため、ツリーオブジェクトを作るには、まずファイルをステージングしてインデックスを作成しなければなりません。
単一のエントリー – ここでは`test.txt`ファイルの最初のバージョン – からインデックスを作るには、`update-index` という配管コマンドを使います。
このコマンドは、前のバージョンの`test.txt`ファイルをあえて新しいステージングエリアに追加する際に使用します。
ファイルはまだステージングエリアには存在しない（まだステージングエリアをセットアップさえしていない）ので、`--add` オプションを付けなければなりません。
また、追加しようとしているファイルはディレクトリには無くデータベースにあるので、`--cacheinfo`オプションを付ける必要があります。
その次に、モード、SHA-1、ファイル名を指定します。

[source,console]
----
$ git update-index --add --cacheinfo 100644 \
  83baae61804e65cc73a7201a7252750c76066a30 test.txt
----

//////////////////////////
In this case, you're specifying a mode of `100644`, which means it's a normal file.
Other options are `100755`, which means it's an executable file; and `120000`, which specifies a symbolic link.
The mode is taken from normal UNIX modes but is much less flexible – these three modes are the only ones that are valid for files (blobs) in Git (although other modes are used for directories and submodules).
//////////////////////////
この例では、`100644` のモードを指定しています。これは、それが通常のファイルであることを意味します。
他に指定できるモードとしては、実行可能ファイルであることを意味する `100755` や、シンボリックリンクであることを示す `120000` があります。
このモードは通常の UNIX モードから取り入れた概念ですが、それほどの柔軟性はありません。Git中のファイル（ブロブ）に対しては、上記3つのモードのみが有効です（ディレクトリとサブモジュールに対しては他のモードも使用できます）。

//////////////////////////
Now, you can use the `write-tree` command to write the staging area out to a tree object.
No `-w` option is needed – calling `write-tree` automatically creates a tree object from the state of the index if that tree doesn't yet exist:
//////////////////////////
これで、 `write-tree` コマンドを使って、ステージングエリアをツリーオブジェクトに書き出せるようになりました。
`-w` オプションは不要です。`write-tree` コマンドを呼ぶと、ツリーがまだ存在しない場合には、インデックスの状態をもとに自動的にツリーオブジェクトが作られます。

[source,console]
----
$ git write-tree
d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579
100644 blob 83baae61804e65cc73a7201a7252750c76066a30      test.txt
----

//////////////////////////
You can also verify that this is a tree object:
//////////////////////////
また、これがツリーオブジェクトであることを検証できるようになりました。

[source,console]
----
$ git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579
tree
----

//////////////////////////
You'll now create a new tree with the second version of `test.txt` and a new file as well:
//////////////////////////
今度は、2つめのバージョンの`test.txt`と、新規作成したファイルから、新しくツリーを作ります。

[source,console]
----
$ echo 'new file' > new.txt
$ git update-index test.txt
$ git update-index --add new.txt
----

//////////////////////////
Your staging area now has the new version of `test.txt` as well as the new file `new.txt`.
Write out that tree (recording the state of the staging area or index to a tree object) and see what it looks like:
//////////////////////////
これでステージングエリアには、`new.txt`という新しいファイルに加えて、新しいバージョンの`test.txt`も登録されました。
このツリーを書き出して（ステージングエリアまたはインデックスの状態をツリーオブジェクトとして記録して）、どのようになったか見てみましょう。

[source,console]
----
$ git write-tree
0155eb4229851634a0f03eb265b69f5a2d56f341
$ git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt
----

//////////////////////////
Notice that this tree has both file entries and also that the `test.txt` SHA-1 is the ``version 2'' SHA-1 from earlier (`1f7a7a`).
Just for fun, you'll add the first tree as a subdirectory into this one.
You can read trees into your staging area by calling `read-tree`.
In this case, you can read an existing tree into your staging area as a subtree by using the `--prefix` option to `read-tree`:
//////////////////////////
このツリーに両方のファイルエントリがあること、また、`test.txt`のSHA-1が先ほどの ``version 2'' のSHA-1（`1f7a7a`）であることに注意してください。
ちょっと試しに、最初のツリーをサブディレクトリとしてこの中に追加してみましょう。
`read-tree` を呼ぶことで、ステージングエリアの中にツリーを読み込むことができます。
このケースでは、`--prefix` オプションを付けて `read-tree` コマンドを使用することで、ステージングエリアの中に、既存のツリーをサブツリーとして読み込むことができます。

[source,console]
----
$ git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ git write-tree
3c4e9cd789d88d8d89c1073707c3585e41b0e614
$ git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614
040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579      bak
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt
----

//////////////////////////
If you created a working directory from the new tree you just wrote, you would get the two files in the top level of the working directory and a subdirectory named `bak` that contained the first version of the `test.txt` file.
You can think of the data that Git contains for these structures as being like this:
//////////////////////////
先ほど書き込んだ新しいツリーから作業ディレクトリを作っていれば、作業ディレクトリの直下にファイルが2つと、最初のバージョンの`test.txt`ファイルが含まれている `bak` という名前のサブディレクトリが入ります。
このような構成に対し、Gitが格納するデータのイメージは次のようになります。

//////////////////////////
.The content structure of your current Git data.
image::images/data-model-2.png[The content structure of your current Git data.]
//////////////////////////
.現在のGitデータの内容の構成
image::images/data-model-2.png[現在のGitデータの内容の構成]

[[r_git_commit_objects]]
//////////////////////////
==== Commit Objects
//////////////////////////
==== コミットオブジェクト

//////////////////////////
You have three trees that specify the different snapshots of your project that you want to track, but the earlier problem remains: you must remember all three SHA-1 values in order to recall the snapshots.
You also don't have any information about who saved the snapshots, when they were saved, or why they were saved.
This is the basic information that the commit object stores for you.
//////////////////////////
追跡したいプロジェクトに対し、それぞれ異なる内容のスナップショットを示すツリー3つができました。ですが、各スナップショットを呼び戻すには3つのSHA-1の値すべてを覚えておかなければならない、という以前からの問題は残ったままです。
さらに、そのスナップショットを誰が、いつ、どのような理由で保存したのかについての情報が一切ありません。
これはコミットオブジェクトに保存される基本的な情報です。

//////////////////////////
To create a commit object, you call `commit-tree` and specify a single tree SHA-1 and which commit objects, if any, directly preceded it.
Start with the first tree you wrote:
//////////////////////////
コミットオブジェクトを作成するには、ツリーのSHA-1を1つと、もしそれの直前に来るコミットオブジェクトがあれば、それらを指定して `commit-tree` を呼びます。
最初に書き込んだツリーから始めましょう。

[source,console]
----
$ echo 'first commit' | git commit-tree d8329f
fdf4fc3344e67ab068f836878b6c4951e3b15f3d
----

//////////////////////////
You will get a different hash value because of different creation time and author data.
Replace commit and tag hashes with your own checksums further in this chapter.
Now you can look at your new commit object with `cat-file`:
//////////////////////////
作成時間と作成者データが異なるため、違うハッシュ値が表示されます。
この章ではコミットとタグのハッシュを独自のチェックサムに置き換えます。
これで、`cat-file` コマンドを使って、新しいコミットオブジェクトを見られるようになります。

[source,console]
----
$ git cat-file -p fdf4fc3
tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
author Scott Chacon <schacon@gmail.com> 1243040974 -0700
committer Scott Chacon <schacon@gmail.com> 1243040974 -0700

first commit
----

//////////////////////////
The format for a commit object is simple: it specifies the top-level tree for the snapshot of the project at that point; the author/committer information (which uses your `user.name` and `user.email` configuration settings and a timestamp); a blank line, and then the commit message.
//////////////////////////
コミットオブジェクトの形式はシンプルです。その内容は、コミットが作成された時点のスナップショットのトップレベルのツリー、作者とコミッターの情報（`user.name` および `user.email` の設定と現在のタイムスタンプを使用します）、空行、そしてコミットメッセージとなっています。

//////////////////////////
Next, you'll write the other two commit objects, each referencing the commit that came directly before it:
//////////////////////////
次に、コミットオブジェクトを新たに2つ書き込みます。各コミットオブジェクトはその直前のコミットを参照しています。

[source,console]
----
$ echo 'second commit' | git commit-tree 0155eb -p fdf4fc3
cac0cab538b970a37ea1e769cbbde608743bc96d
$ echo 'third commit'  | git commit-tree 3c4e9c -p cac0cab
1a410efbd13591db07496601ebc7a059dd55cfe9
----

//////////////////////////
Each of the three commit objects points to one of the three snapshot trees you created.
Oddly enough, you have a real Git history now that you can view with the `git log` command, if you run it on the last commit SHA-1:
//////////////////////////
3つのコミットオブジェクトは、それぞれ、これまでに作成した3つのスナップショットのツリーのひとつを指しています。
奇妙なことに、これで本物のGitヒストリーができており、`git log` コマンドによってログを表示できます。最後のコミットのSHA-1ハッシュを指定して実行すると……

[source,console]
----
$ git log --stat 1a410e
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:15:24 2009 -0700

	third commit

 bak/test.txt | 1 +
 1 file changed, 1 insertion(+)

commit cac0cab538b970a37ea1e769cbbde608743bc96d
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:14:29 2009 -0700

	second commit

 new.txt  | 1 +
 test.txt | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:09:34 2009 -0700

    first commit

 test.txt | 1 +
 1 file changed, 1 insertion(+)
----

//////////////////////////
Amazing.
You've just done the low-level operations to build up a Git history without using any of the front end commands.
This is essentially what Git does when you run the `git add` and `git commit` commands – it stores blobs for the files that have changed, updates the index, writes out trees, and writes commit objects that reference the top-level trees and the commits that came immediately before them.
These three main Git objects – the blob, the tree, and the commit – are initially stored as separate files in your `.git/objects` directory.
Here are all the objects in the example directory now, commented with what they store:
//////////////////////////
素晴らしい。
フロントエンドのコマンドを利用せずに、低レベルのオペレーションだけでGitの歴史を作り上げたのです。
これは、本質的に `git add` コマンドと `git commit` コマンドを実行するときにGitが行っていることと同じです。変更されたファイルに対応するブロブを格納し、インデックスを更新し、ツリーを書き出し、トップレベルのツリーと、その直前のコミットを参照するコミットオブジェクトとを書き出しています。
これらの3つの主要な Git オブジェクト – ブロブとツリーとコミット – は、まずは個別のファイルとして `.git/object` ディレクトリに格納されます。
現在、サンプルのディレクトリにあるすべてのオブジェクトを以下に示します。コメントは、それぞれ何を格納しているのかを示します。

[source,console]
----
$ find .git/objects -type f
.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1
----

//////////////////////////
If you follow all the internal pointers, you get an object graph something like this:
//////////////////////////
すべての内部のポインタを辿ってゆけば、次のようなオブジェクトグラフが得られます。

//////////////////////////
.All the objects in your Git directory.
image::images/data-model-3.png[All the objects in your Git directory.]
//////////////////////////
.Gitリポジトリ内のすべてのオブジェクト
image::images/data-model-3.png[Gitリポジトリ内のすべてのオブジェクト]

//////////////////////////
==== Object Storage
//////////////////////////
==== オブジェクトストレージ

//////////////////////////
We mentioned earlier that a header is stored with the content.
Let's take a minute to look at how Git stores its objects.
You'll see how to store a blob object – in this case, the string ``what is up, doc?'' – interactively in the Ruby scripting language.
//////////////////////////
ヘッダはコンテンツと一緒に格納されることを、以前に述べました。
ここでは少し時間を割いて、Gitがどのようにオブジェクトを格納するのかを見ていきましょう。
以降では、ブロブオブジェクト – ここでは ``what is up, doc?'' という文字列 – をRuby言語を使って対話的に格納する方法を説明します。

//////////////////////////
You can start up interactive Ruby mode with the `irb` command:
//////////////////////////
`irb` コマンドで、対話モードでRubyを起動します。

[source,console]
----
$ irb
>> content = "what is up, doc?"
=> "what is up, doc?"
----

//////////////////////////
Git constructs a header that starts with the type of the object, in this case a blob.
Then, it adds a space followed by the size of the content and finally a null byte:
//////////////////////////
Gitがヘッダを構築する際には、まず初めにオブジェクトのタイプを表す文字列が来ます。この場合はblobです。
次に、スペースに続いてコンテンツのサイズ、最後にヌルバイトが追加されます。

[source,console]
----
>> header = "blob #{content.length}\0"
=> "blob 16\u0000"
----

//////////////////////////
Git concatenates the header and the original content and then calculates the SHA-1 checksum of that new content.
You can calculate the SHA-1 value of a string in Ruby by including the SHA1 digest library with the `require` command and then calling `Digest::SHA1.hexdigest()` with the string:
//////////////////////////
Gitはこのヘッダと元々のコンテンツとを結合して、その新しいコンテンツのSHA-1チェックサムを計算します。
Rubyでは、文字列のSHA-1のハッシュ値は、`require` を使用してSHA1ダイジェストライブラリをインクルードし、文字列を引数にして `Digest::SHA1.hexdigest()` 関数を呼ぶことで求められます。

[source,console]
----
>> store = header + content
=> "blob 16\u0000what is up, doc?"
>> require 'digest/sha1'
=> true
>> sha1 = Digest::SHA1.hexdigest(store)
=> "bd9dbf5aae1a3862dd1526723246b20206e5fc37"
----

//////////////////////////
Git compresses the new content with zlib, which you can do in Ruby with the zlib library.
First, you need to require the library and then run `Zlib::Deflate.deflate()` on the content:
//////////////////////////
Gitはzlibを用いてこの新しいコンテンツを圧縮します。Rubyではzlibライブラリをインクルードすれば同じことが行えます。
まず、requireを使用してzlibライブラリをインクルードし、コンテンツに対して `Zlib::Deflate.deflate()` を実行します。

[source,console]
----
>> require 'zlib'
=> true
>> zlib_content = Zlib::Deflate.deflate(store)
=> "x\x9CK\xCA\xC9OR04c(\xCFH,Q\xC8,V(-\xD0QH\xC9O\xB6\a\x00_\x1C\a\x9D"
----

//////////////////////////
Finally, you'll write your zlib-deflated content to an object on disk.
You'll determine the path of the object you want to write out (the first two characters of the SHA-1 value being the subdirectory name, and the last 38 characters being the filename within that directory).
In Ruby, you can use the `FileUtils.mkdir_p()` function to create the subdirectory if it doesn't exist.
Then, open the file with `File.open()` and write out the previously zlib-compressed content to the file with a `write()` call on the resulting file handle:
//////////////////////////
最後に、zlibでdeflate圧縮されたコンテンツをディスク上のオブジェクトに書き込みます。
まず、オブジェクトを書き出す先のパスを決定します（SHA-1ハッシュ値の最初の2文字はサブディレクトリの名前で、残りの38文字はそのディレクトリ内のファイル名になります）。
Rubyでは、サブディレクトリが存在しない場合、 `FileUtils.mkdir_p()` 関数で作成できます。
そして、`File.open()` によってファイルを開いて、前にzlibで圧縮したコンテンツをファイルに書き出します。ファイルへの書き出しは、開いたファイルのハンドルに対して `write()` を呼ぶことで行います。

[source,console]
----
>> path = '.git/objects/' + sha1[0,2] + '/' + sha1[2,38]
=> ".git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37"
>> require 'fileutils'
=> true
>> FileUtils.mkdir_p(File.dirname(path))
=> ".git/objects/bd"
>> File.open(path, 'w') { |f| f.write zlib_content }
=> 32
----

//////////////////////////
That's it – you've created a valid Git blob object.
All Git objects are stored the same way, just with different types – instead of the string blob, the header will begin with commit or tree.
Also, although the blob content can be nearly anything, the commit and tree content are very specifically formatted.
//////////////////////////
これだけです。これで、正当なGitブロブオブジェクトが出来上がりました。
Gitオブジェクトはすべて同じ方法で格納されますが、オブジェクトのタイプだけは様々で、ヘッダーが blobという文字列ではなく、commitやtreeという文字列で始まることもあります。
また、オブジェクトタイプがブロブの場合、コンテンツはほぼ何でもよいですが、コミットとツリーの場合、コンテンツは非常に厳密に形式が定められています。
