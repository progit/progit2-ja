==== Subversion

(((Subversion)))
(((Importing, from Subversion)))
//////////////////////////
If you read the previous section about using `git svn`, you can easily use those instructions to `git svn clone` a repository; then, stop using the Subversion server, push to a new Git server, and start using that.
If you want the history, you can accomplish that as quickly as you can pull the data out of the Subversion server (which may take a while).
//////////////////////////
先ほどの節で `git svn` の使い方を読んでいれば、話は簡単です。まず `git svn clone` でリポジトリを作り、そして Subversion サーバーを使うのをやめ、新しい Git サーバーにプッシュし、あとはそれを使い始めればいいのです。これまでの歴史が欲しいのなら、それも Subversion サーバーからプルすることができます (多少時間がかかります)。

//////////////////////////
However, the import isn't perfect; and because it will take so long, you may as well do it right.
The first problem is the author information.
In Subversion, each person committing has a user on the system who is recorded in the commit information.
The examples in the previous section show `schacon` in some places, such as the `blame` output and the `git svn log`.
If you want to map this to better Git author data, you need a mapping from the Subversion users to the Git authors.
Create a file called `users.txt` that has this mapping in a format like this:
//////////////////////////
しかし、インポートは完全ではありません。また時間もかかるので、正しくやるのがいいでしょう。まず最初に問題になるのが作者 (author) の情報です。Subversion ではコミットした人すべてがシステム上にユーザーを持っており、それがコミット情報として記録されます。たとえば先ほどの節のサンプルで言うと `schacon` がそれで、`blame` の出力や `git svn log` の出力に含まれています。これをうまく Git の作者データとしてマップするには、Subversion のユーザーと Git の作者のマッピングが必要です。`users.txt` という名前のファイルを作り、このような書式でマッピングを記述します。

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

//////////////////////////
To get a list of the author names that SVN uses, you can run this:
//////////////////////////
SVN で使っている作者の一覧を取得するには、このようにします。

[source,console]
----
$ svn log --xml | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

//////////////////////////
That generates the log output in XML format, then keeps only the lines with author information, discards duplicates, strips out the XML tags.
(Obviously this only works on a machine with `grep`, `sort`, and `perl` installed.)
Then, redirect that output into your `users.txt` file so you can add the equivalent Git user data next to each entry.
//////////////////////////
これは、まずログを XML フォーマットで生成します。その中から作者の情報を含む行だけを抽出し、重複を削除して、XML タグを除去します。
（ちょっと見ればわかりますが、これは `grep` や `sort`、そして `perl` といったコマンドが使える環境でないと動きません）
この出力を `users.txt` にリダイレクトし、そこに Git のユーザーデータを書き足していきます。

//////////////////////////
You can provide this file to `git svn` to help it map the author data more accurately.
You can also tell `git svn` not to include the metadata that Subversion normally imports, by passing `--no-metadata` to the `clone` or `init` command (though if you want to keep the synchronisation-metadata, feel free to omit this parameter).
This makes your `import` command look like this:
//////////////////////////
このファイルを `git svn` に渡せば、作者のデータをより正確にマッピングできるようになります。
また、Subversion が通常インポートするメタデータを含めないよう `git svn` に指示することもできます。そのためには `--no-metadata` を `clone` コマンドあるいは `init` コマンドに渡します（同期メタデータを維持したい場合はこのパラメータを省略してください）。
そうすると、 `import` コマンドは次のようになります。

[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata -s my_project
----

//////////////////////////
Now you should have a nicer Subversion import in your `my_project` directory.
Instead of commits that look like this
//////////////////////////
これで、Subversion をちょっとマシにインポートした `my_project` ディレクトリができあがりました。コミットがこんなふうに記録されるのではなく、

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

//////////////////////////
they look like this:
//////////////////////////
次のように記録されています。

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

//////////////////////////
Not only does the Author field look a lot better, but the `git-svn-id` is no longer there, either.
//////////////////////////
Author フィールドの見た目がずっとよくなっただけではなく、`git-svn-id` もなくなっています。

//////////////////////////
You should also do a bit of post-import cleanup.
For one thing, you should clean up the weird references that `git svn` set up.
First you'll move the tags so they're actual tags rather than strange remote branches, and then you'll move the rest of the branches so they're local.
//////////////////////////
インポートした後には、ちょっとした後始末も行ったほうがよいでしょう。
たとえば、`git svn` が作成した変な参照は削除しておくべきです。
まずはタグを移動して、奇妙なリモートブランチではなくちゃんとしたタグとして扱えるようにします。そして、残りのブランチを移動してローカルで扱えるようにします。

//////////////////////////
To move the tags to be proper Git tags, run:
//////////////////////////
タグを Git のタグとして扱うには、次のコマンドを実行します。

[source,console]
----
$ cp -Rf .git/refs/remotes/origin/tags/* .git/refs/tags/
$ rm -Rf .git/refs/remotes/origin/tags
----

//////////////////////////
This takes the references that were remote branches that started with `remotes/origin/tags/` and makes them real (lightweight) tags.
//////////////////////////
これは、リモートブランチのうち `remotes/origin/tags/` で始まる名前のものを、実際の (軽量な) タグに変えます。

//////////////////////////
Next, move the rest of the references under `refs/remotes` to be local branches:
//////////////////////////
次に、`refs/remotes` 以下にあるそれ以外の参照をローカルブランチに移動します。

[source,console]
----
$ cp -Rf .git/refs/remotes/origin/* .git/refs/heads/
$ rm -Rf .git/refs/remotes/origin
----

//////////////////////////
It may happen that you'll see some extra branches which are suffixed by `@xxx` (where xxx is a number), while in Subversion you only see one branch. This is actually a Subversion feature called "peg-revisions", which is something that Git simply has no syntactical counterpart for. Hence, `git svn` simply adds the svn version number to the branch name just in the same way as you would have written it in svn to address the peg-revision of that branch. If you do not care anymore about the peg-revisions, simply remove them using `git branch -d`.
//////////////////////////
このとき、Subversionではブランチが1つだったのにもかかわらず、名前が`@xxx`（xxxは数字）で終わる余分なブランチがいくつか出来てしまうことがあります。Subversionの「ペグ・リビジョン」という機能が原因なのですが、Gitにはこれと同等の機能は存在しません。よって、`git svn`コマンドはブランチ名にsvnのバージョン番号をそのまま追加します。svnでペグ・リビジョンをブランチに設定するときとまさに同じやり方です。もうペグ・リビジョンがいらないのであれば、`git branch -d`コマンドで削除してしまいましょう。

//////////////////////////
Now all the old branches are real Git branches and all the old tags are real Git tags.
//////////////////////////
インポートが終わり、過去のブランチはGitのブランチへ、過去のタグはGitのタグへと変換できました。

//////////////////////////
There's one last thing to clean up. Unfortunately, `git svn` creates an extra branch named `trunk`, which maps to Subversion's default branch, but the `trunk` ref points to the same place as `master`. Since `master` is more idiomatically Git, here's how to remove the extra branch:
//////////////////////////
最後に後始末についてです。残念なことに、`git svn`は`trunk`という名前の余計なブランチを生成してしまいます。Subversionにおけるデフォルトブランチではあるのですが、`trunk`の参照が指す場所は`master`と同じです。`master`のほうが用語としてもGitらしいですから、余分なブランチは削除してしまいましょう。

[source,console]
----
$ git branch -d trunk
----

//////////////////////////
The last thing to do is add your new Git server as a remote and push to it.
Here is an example of adding your server as a remote:
//////////////////////////
これで、今まであった古いブランチはすべて Git のブランチとなり、古いタグもすべて Git のタグになりました。最後に残る作業は、新しい Git サーバーをリモートに追加してプッシュすることです。自分のサーバーをリモートとして追加するには以下のようにします｡

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

//////////////////////////
Because you want all your branches and tags to go up, you can now run this:
//////////////////////////
すべてのブランチやタグを一緒にプッシュするには、このようにします。

[source,console]
----
$ git push origin --all
$ git push origin --tags
----

//////////////////////////
All your branches and tags should be on your new Git server in a nice, clean import.
//////////////////////////
これで、ブランチやタグも含めたすべてを、新しい Git サーバーにきれいにインポートできました。
