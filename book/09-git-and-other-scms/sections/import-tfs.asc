[[r_git_tfs]]
==== TFS

(((TFS)))(((Importing, from TFS)))
//////////////////////////
If your team is converting their source control from TFVC to Git, you'll want the highest-fidelity conversion you can get.
This means that, while we covered both git-tfs and git-tf for the interop section, we'll only be covering git-tfs for this part, because git-tfs supports branches, and this is prohibitively difficult using git-tf.
//////////////////////////
あなたのチームで、ソース管理を TFVC から Git へ移行したいということになった場合、できる限り最高の忠実度で変換を行いたいことと思います。
そのため、相互運用についてのセクションでは git-tfs と git-tf の両方を取り上げましたが、本セクションでは git-tfs のみを取り上げます。これは git-tfs はブランチをサポートしている一方、 git-tf ではブランチの使用が禁止されており、対応が難しいためです。

[NOTE]
====
//////////////////////////
This is a one-way conversion.
The resulting Git repository won't be able to connect with the original TFVC project.
//////////////////////////
以下で述べるのは、一方通行の変換です。
できあがった Git リポジトリを、元の TFVC プロジェクトと接続することはできません。
====

//////////////////////////
The first thing to do is map usernames.
TFVC is fairly liberal with what goes into the author field for changesets, but Git wants a human-readable name and email address.
You can get this information from the `tf` command-line client, like so:
//////////////////////////
最初に行うのはユーザ名のマッピングです。
TFVC ではチェンジセットの author フィールドの内容をかなり自由に設定できますが、 Git では人間に読める形式の名前とメールアドレスが必要です。
この情報は、 `tf` コマンドラインクライアントで次のようにして取得できます。

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

//////////////////////////
This grabs all of the changesets in the history of the project and put it in the AUTHORS_TMP file that we will process to extract the data of the 'User' column (the 2nd one).
Open the file and find at which characters start and end the column and replace, in the following command-line, the parameters `11-20` of the `cut` command with the ones found:
//////////////////////////
このコマンドは、プロジェクトの歴史からすべてのチェンジセットの情報を取ってきて、 AUTHORS_TMP ファイルへ出力します。このファイルは、 'User' カラム（2番目のカラム）のデータを抽出する際に使用します。
AUTHORS_TMP ファイルを開いて、2番目のカラムの開始位置と終了位置を確認したら、次のコマンドラインの、 `cut` コマンドの引数  `11-20` を、それぞれ開始位置と終了位置で置き換えてください。

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq > AUTHORS
----

//////////////////////////
The `cut` command keeps only the characters between 11 and 20 from each line.
The `tail` command skips the first two lines, which are field headers and ASCII-art underlines.
The result of all of this is piped to `sort` and `uniq` to eliminate duplicates, and saved to a file named `AUTHORS`.
The next step is manual; in order for git-tfs to make effective use of this file, each line must be in this format:
//////////////////////////
この `cut` コマンドは、各行の11文字目から20文字目だけを抽出します。
また、この `tail`  コマンドは、最初の2行（フィールドヘッダと、下線のアスキーアート）を読み飛ばします。
この処理の結果は、重複を排除するためパイプで `sort` コマンドと `uniq` コマンドへ送られた上で、 `AUTHORS` ファイルへ保存されます。
次のステップは手作業です。git-tfs でこのファイルを利用するには、各行は次のフォーマットに従っている必要があります。

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

//////////////////////////
The portion on the left is the ``User'' field from TFVC, and the portion on the right side of the equals sign is the user name that will be used for Git commits.
//////////////////////////
イコール記号の左側にあるのは TFVC の ``User'' フィールドの内容、右側にあるのは Git のコミットで使用されるユーザ名です。

//////////////////////////
Once you have this file, the next thing to do is make a full clone of the TFVC project you're interested in:
//////////////////////////
このファイルを作りおえたら、次は、対象となる TFVC プロジェクト全体のクローンを作成します。

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

//////////////////////////
Next you'll want to clean the `git-tfs-id` sections from the bottom of the commit messages.
The following command will do that:
//////////////////////////
次は、コミットメッセージの末尾にある `git-tfs-id` セクションを消去したいことと思います。
これは、次のコマンドで行えます。

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' '--' --all
----

//////////////////////////
That uses the `sed` command from the Git-bash environment to replace any line starting with ``git-tfs-id:'' with emptiness, which Git will then ignore.
//////////////////////////
これは、Git-bash から `sed` コマンドを使用して、 ``git-tfs-id:'' で始まる行を空文字列で置き換えます。 Git は空文字列を無視します。

//////////////////////////
Once that's all done, you're ready to add a new remote, push all your branches up, and have your team start working from Git.
//////////////////////////
これらをすべて実施したら、新しいリモートを追加したり、ブランチをプッシュしたり、チームが Git で作業を始めたりする準備はこれで完了です。
