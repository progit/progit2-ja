[[r_remote_branches]]
//////////////////////////
=== Remote Branches
//////////////////////////
=== リモートブランチ

(((branches, remote)))(((references, remote)))
//////////////////////////
Remote references are references (pointers) in your remote repositories, including branches, tags, and so on.
You can get a full list of remote references explicitly with `git ls-remote [remote]`, or `git remote show [remote]` for remote branches as well as more information.
Nevertheless, a more common way is to take advantage of remote-tracking branches.
//////////////////////////
リモート参照は、リモートリポジトリにある参照（ポインタ）です。具体的には、ブランチやタグなどを指します。
リモート参照をすべて取得するには、`git ls-remote [remote]` を実行してみてください。また、`git remote show [remote]` を実行すれば、リモート参照に加えてその他の情報も取得できます。
とはいえ、リモート参照の用途としてよく知られているのは、やはりリモート追跡ブランチを活用することでしょう。

//////////////////////////
Remote-tracking branches are references to the state of remote branches.
They're local references that you can't move; they're moved automatically for you whenever you do any network communication.
Remote-tracking branches act as bookmarks to remind you where the branches in your remote repositories were the last time you connected to them.
//////////////////////////
リモート追跡ブランチは、リモートブランチの状態を保持する参照です。
ローカルに作成される参照ですが、自分で移動することはできません。ネットワーク越しの操作をしたときに自動的に移動します。
リモート追跡ブランチは、前回リモートリポジトリに接続したときにブランチがどの場所を指していたかを示すブックマークのようなものです。

//////////////////////////
They take the form `(remote)/(branch)`.
For instance, if you wanted to see what the `master` branch on your `origin` remote looked like as of the last time you communicated with it, you would check the `origin/master` branch.
If you were working on an issue with a partner and they pushed up an `iss53` branch, you might have your own local `iss53` branch; but the branch on the server would point to the commit at `origin/iss53`.
//////////////////////////
ブランチ名は `(remote)/(branch)` のようになります。
たとえば、`origin` サーバーに最後に接続したときの `master` ブランチの状態を知りたければ `origin/master` ブランチをチェックします。
誰かほかの人と共同で問題に対応しており、相手が `iss53` ブランチにプッシュしたとしましょう。
あなたの手元にはローカルの `iss53` ブランチがあります。しかし、サーバー側のブランチは `origin/iss53` のコミットを指しています。

//////////////////////////
This may be a bit confusing, so let's look at an example.
Let's say you have a Git server on your network at `git.ourcompany.com`.
If you clone from this, Git's `clone` command automatically names it `origin` for you, pulls down all its data, creates a pointer to where its `master` branch is, and names it `origin/master` locally.
Git also gives you your own local `master` branch starting at the same place as origin's `master` branch, so you have something to work from.
//////////////////////////
……ちょっと混乱してきましたか?
では、具体例で考えてみましょう。
ネットワーク上の `git.ourcompany.com` に Git サーバーがあるとします。
これをクローンすると、Git の `clone` コマンドがそれに `origin` という名前をつけ、すべてのデータを引き出し、`master` ブランチを指すポインタを作成し、そのポインタにローカルで `origin/master` という名前をつけます。
Git はまた、ローカルに `master` というブランチも作成します。これは origin の `master` ブランチと同じ場所を指しており、ここから何らかの作業を始めます。

[NOTE]
//////////////////////////
.``origin'' is not special
====
Just like the branch name ``master'' does not have any special meaning in Git, neither does ``origin''.
While ``master'' is the default name for a starting branch when you run `git init` which is the only reason it's widely used, ``origin'' is the default name for a remote when you run `git clone`.
If you run `git clone -o booyah` instead, then you will have `booyah/master` as your default remote branch.(((origin)))
====
//////////////////////////
.``origin'' は特別なものではない
====
Git の ``master'' ブランチがその他のブランチと何ら変わらないものであるのと同様に、
``origin'' もその他のサーバーと何ら変わりはありません。
``master'' ブランチがよく使われている理由は、ただ単に `git init` がデフォルトで作るブランチ名がそうだからというだけのことでした。
同様に ``origin'' も、`git clone` を実行するときのデフォルトのリモート名です。
たとえば `git clone -o booyah` などと実行すると、デフォルトのリモートブランチは `booyah/master` になります。(((origin)))
====

//////////////////////////
.Server and local repositories after cloning
image::images/remote-branches-1.png[Server and local repositories after cloning.]
//////////////////////////
.クローン後のサーバーとローカルのリポジトリ
image::images/remote-branches-1.png[クローン後のサーバーとローカルのリポジトリ]

//////////////////////////
If you do some work on your local `master` branch, and, in the meantime, someone else pushes to `git.ourcompany.com` and updates its `master` branch, then your histories move forward differently.
Also, as long as you stay out of contact with your origin server, your `origin/master` pointer doesn't move.
//////////////////////////
ローカルの master ブランチで何らかの作業をしている間に、誰かが `git.ourcompany.com` にプッシュして `master` ブランチを更新したとしましょう。
この時点であなたの歴史とは異なる状態になってしまいます。
また、origin サーバーと再度接続しない限り、`origin/master` が指す先は移動しません。

//////////////////////////
.Local and remote work can diverge
image::images/remote-branches-2.png[Local and remote work can diverge.]
//////////////////////////
.ローカルとリモートの作業が枝分かれすることがある
image::images/remote-branches-2.png[ローカルとリモートの作業が枝分かれすることがある]

//////////////////////////
To synchronize your work, you run a `git fetch origin` command.
This command looks up which server ``origin'' is (in this case, it's `git.ourcompany.com`), fetches any data from it that you don't yet have, and updates your local database, moving your `origin/master` pointer to its new, more up-to-date position.
//////////////////////////
手元での作業を同期させるには、`git fetch origin` コマンドを実行します。
このコマンドは、まず ``origin'' が指すサーバー (今回の場合は `git.ourcompany.com`) を探し、まだ手元にないデータをすべて取得し、ローカルデータベースを更新し、`origin/master` が指す先を最新の位置に変更します。

//////////////////////////
.`git fetch` updates your remote references
image::images/remote-branches-3.png[`git fetch` updates your remote references.]
//////////////////////////
.`git fetch` によるリモートへの参照の更新
image::images/remote-branches-3.png[`git fetch` によるリモートへの参照の更新]

//////////////////////////
To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let's assume you have another internal Git server that is used only for development by one of your sprint teams.
This server is at `git.team1.ourcompany.com`.
You can add it as a new remote reference to the project you're currently working on by running the `git remote add` command as we covered in <<ch02-git-basics#ch02-git-basics>>.
Name this remote `teamone`, which will be your shortname for that whole URL.
//////////////////////////
複数のリモートサーバーがあった場合にリモートのブランチがどのようになるのかを知るために、もうひとつ Git サーバーがあるものと仮定しましょう。
こちらのサーバーは、チームの一部のメンバーが開発目的にのみ使用しています。
このサーバーは `git.team1.ourcompany.com` にあるものとしましょう。
このサーバーをあなたの作業中のプロジェクトから参照できるようにするには、<<ch02-git-basics#ch02-git-basics>> で紹介した `git remote add` コマンドを使用します。
このリモートに `teamone` という名前をつけ、URL ではなく短い名前で参照できるようにします。

//////////////////////////
.Adding another server as a remote
image::images/remote-branches-4.png[Adding another server as a remote.]
//////////////////////////
.別のサーバーをリモートとして追加
image::images/remote-branches-4.png[別のサーバーをリモートとして追加]

//////////////////////////
Now, you can run `git fetch teamone` to fetch everything the remote `teamone` server has that you don't have yet.
Because that server has a subset of the data your `origin` server has right now, Git fetches no data but sets a remote-tracking branch called `teamone/master` to point to the commit that `teamone` has as its `master` branch.
//////////////////////////
`git fetch teamone` を実行すれば、まだ手元にないデータをリモートの `teamone` サーバーからすべて取得できるようになりました。
今回､このサーバーが保持してるデータは `origin` サーバーが保持するデータの一部なので、Gitは何のデータも取得しません。
代わりに､ `teamone/master` というリモート追跡ブランチが指すコミットを、`teamone` サーバーの `master` ブランチが指すコミットと同じにします。

//////////////////////////
.Remote tracking branch for `teamone/master`
image::images/remote-branches-5.png[Remote tracking branch for `teamone/master`.]
//////////////////////////
.リモート `teamone/master` を追跡するブランチ
image::images/remote-branches-5.png[リモート `teamone/master` を追跡するブランチ]

[[r_pushing_branches]]
//////////////////////////
==== Pushing
//////////////////////////
==== プッシュ

(((pushing)))
//////////////////////////
When you want to share a branch with the world, you need to push it up to a remote that you have write access to.
Your local branches aren't automatically synchronized to the remotes you write to – you have to explicitly push the branches you want to share.
That way, you can use private branches for work you don't want to share, and push up only the topic branches you want to collaborate on.
//////////////////////////
ブランチの内容をみんなと共有したくなったら、書き込み権限を持つどこかのリモートにそれをプッシュしなければなりません。
ローカルブランチの内容が自動的にリモートと同期されることはありません。
共有したいブランチは、明示的にプッシュする必要があります。
たとえば、共有したくない内容はプライベートなブランチで作業を進め、共有したい内容だけのトピックブランチを作成してそれをプッシュするということもできます。

//////////////////////////
If you have a branch named `serverfix` that you want to work on with others, you can push it up the same way you pushed your first branch.
Run `git push <remote> <branch>`:(((git commands, push)))
//////////////////////////
手元にある `serverfix` というブランチを他人と共有したい場合は、最初のブランチをプッシュしたときと同様の方法でそれをプッシュします。
つまり `git push <remote> <branch>` を実行します。(((git commands, push)))

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

//////////////////////////
This is a bit of a shortcut.
Git automatically expands the `serverfix` branchname out to `refs/heads/serverfix:refs/heads/serverfix`, which means, ``Take my serverfix local branch and push it to update the remote's serverfix branch.''
We'll go over the `refs/heads/` part in detail in <<ch10-git-internals#ch10-git-internals>>, but you can generally leave it off.
You can also do `git push origin serverfix:serverfix`, which does the same thing – it says, ``Take my serverfix and make it the remote's serverfix.''
You can use this format to push a local branch into a remote branch that is named differently.
If you didn't want it to be called `serverfix` on the remote, you could instead run `git push origin serverfix:awesomebranch` to push your local `serverfix` branch to the `awesomebranch` branch on the remote project.
//////////////////////////
これは、ちょっとしたショートカットです。
Git はまずブランチ名 `serverfix` を `refs/heads/serverfix:refs/heads/serverfix` に展開します。
これは「手元のローカルブランチ serverfix をプッシュして、リモートの serverfix ブランチを更新しろ」という意味です。
`refs/heads/` の部分の意味については <<ch10-git-internals#ch10-git-internals>> で詳しく説明しますが、これは一般的に省略可能です。
`git push origin serverfix:serverfix` とすることもできます。
これも同じことで、「こっちの serverfix で、リモートの serverfix を更新しろ」という意味になります。
この方式を使えば、ローカルブランチの内容をリモートにある別の名前のブランチにプッシュすることができます。
リモートのブランチ名を `serverfix` という名前にしたくない場合は、`git push origin serverfix:awesomebranch` とすればローカルの `serverfix` ブランチをリモートの `awesomebranch` という名前のブランチ名でプッシュすることができます。

[NOTE]
//////////////////////////
.Don't type your password every time
====
If you're using an HTTPS URL to push over, the Git server will ask you for your username and password for authentication.
By default it will prompt you on the terminal for this information so the server can tell if you're allowed to push.

If you don't want to type it every single time you push, you can set up a ``credential cache''.
The simplest is just to keep it in memory for a few minutes, which you can easily set up by running `git config --global credential.helper cache`.

For more information on the various credential caching options available, see <<ch07-git-tools#r_credential_caching>>.
====
//////////////////////////
.パスワードを毎回入力したくない
====
HTTPS URL を使ってプッシュするときに、Git サーバーから、認証用のユーザー名とパスワードを聞かれます。
デフォルトでは、ターミナルからこれらの情報を入力させるようになっており、この情報を使って、プッシュする権限があなたにあるのかを確認します。

プッシュするたびに毎回ユーザー名とパスワードを打ち込みたくない場合は、「認証情報キャッシュ」を使うこともできます。
一番シンプルな方法は、数分間だけメモリに記憶させる方法です。この方法を使いたければ、`git config --global credential.helper cache` を実行しましょう。

それ以外に使える認証情報キャッシュの方式については、<<ch07-git-tools#r_credential_caching>> を参照ください。
====

//////////////////////////
The next time one of your collaborators fetches from the server, they will get a reference to where the server's version of `serverfix` is under the remote branch `origin/serverfix`:
//////////////////////////
次に誰かがサーバーからフェッチしたときには、その人が取得するサーバー上の `serverfix` はリモートブランチ `origin/serverfix` となります。

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

//////////////////////////
It's important to note that when you do a fetch that brings down new remote-tracking branches, you don't automatically have local, editable copies of them.
In other words, in this case, you don't have a new `serverfix` branch – you only have an `origin/serverfix` pointer that you can't modify.
//////////////////////////
注意すべき点は、新しいリモート追跡ブランチを取得したとしても、それが自動的にローカルで編集可能になるわけではないというところです。
言い換えると、この場合に新たに `serverfix` ブランチができるわけではないということです。
できあがるのは `origin/serverfix` ポインタだけであり、これは変更することができません。

//////////////////////////
To merge this work into your current working branch, you can run `git merge origin/serverfix`.
If you want your own `serverfix` branch that you can work on, you can base it off your remote-tracking branch:
//////////////////////////
この作業を現在の作業ブランチにマージするには、`git merge origin/serverfix` を実行します。
ローカル環境に `serverfix` ブランチを作ってそこで作業を進めたい場合は、リモート追跡ブランチからそれを作成します。

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

//////////////////////////
This gives you a local branch that you can work on that starts where `origin/serverfix` is.
//////////////////////////
これで、`origin/serverfix` が指す先から作業を開始するためのローカルブランチができあがりました。

[[r_tracking_branches]]
//////////////////////////
==== Tracking Branches
//////////////////////////
==== 追跡ブランチ

(((branches, tracking)))(((branches, upstream)))
//////////////////////////
Checking out a local branch from a remote-tracking branch automatically creates what is called a ``tracking branch'' (and the branch it tracks is called an ``upstream branch'').
Tracking branches are local branches that have a direct relationship to a remote branch.
If you're on a tracking branch and type `git pull`, Git automatically knows which server to fetch from and branch to merge into.
//////////////////////////
リモート追跡ブランチからローカルブランチにチェックアウトすると、``追跡ブランチ'' というブランチが自動的に作成されます(そしてそれが追跡するブランチを ``上流ブランチ'' といいます)。
追跡ブランチとは、リモートブランチと直接のつながりを持つローカルブランチのことです。
追跡ブランチ上で `git pull` を実行すると、Git は自動的に取得元のサーバーとブランチを判断します。

//////////////////////////
When you clone a repository, it generally automatically creates a `master` branch that tracks `origin/master`.
However, you can set up other tracking branches if you wish – ones that track branches on other remotes, or don't track the `master` branch.
The simple case is the example you just saw, running `git checkout -b [branch] [remotename]/[branch]`.
This is a common enough operation that git provides the `--track` shorthand:
//////////////////////////
あるリポジトリをクローンしたら、自動的に `master` ブランチを作成し、`origin/master` を追跡するようになります。
しかし、必要に応じてそれ以外の追跡ブランチを作成し、`origin` 以外にあるブランチや `master` 以外のブランチを追跡させることも可能です。
シンプルな方法としては、`git checkout -b [branch] [remotename]/[branch]` を実行します。
これはよく使う操作なので、`--track` という短縮形も用意されています。

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

//////////////////////////
In fact, this is so common that there's even a shortcut for that shortcut. If the branch name you're trying to checkout (a) doesn't exist and (b) exactly matches a name on only one remote, Git will create a tracking branch for you:
//////////////////////////
この短縮形、あまりにもよく使うので、更なる短縮形も用意されています。チェックアウトしたいブランチ名が（a）まだローカルに存在せず、（b）存在するリモートは1つだけ、の場合、Gitは自動的に追跡ブランチを作ってくれるのです。

[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

//////////////////////////
To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:
//////////////////////////
ローカルブランチをリモートブランチと違う名前にしたい場合は、最初に紹介した方法でローカルブランチに別の名前を指定します。

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

//////////////////////////
Now, your local branch `sf` will automatically pull from `origin/serverfix`.
//////////////////////////
これで、ローカルブランチ `sf` が自動的に `origin/serverfix` を追跡するようになりました。

//////////////////////////
If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you're tracking, you can use the `-u` or `--set-upstream-to` option to `git branch` to explicitly set it at any time.
//////////////////////////
既に手元にあるローカルブランチを、リモートブランチの取り込み先に設定したい場合や、
追跡する上流のブランチを変更したい場合は、
`git branch` のオプション `-u` あるいは `--set-upstream-to` を使って明示的に設定することもできます。

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[NOTE]
//////////////////////////
.Upstream shorthand
====
When you have a tracking branch set up, you can reference its upstream branch with the `@{upstream}` or `@{u}` shorthand.
So if you're on the `master` branch and it's tracking `origin/master`, you can say something like `git merge @{u}` instead of `git merge origin/master` if you wish.(((+++@{u}+++)))(((+++@{upstream}+++)))
====
//////////////////////////
.上流の短縮記法
====
追跡ブランチを設定すると、その上流のブランチを参照するときに `@{upstream}` や `@{u}` という短縮記法が使えるようになります。
つまり、仮に今 `master` ブランチにいて、そのブランチが `origin/master` を追跡している場合は、
`git merge origin/master` の代わりに `git merge @{u}` としてもかまわないということです。(((+++@{u}+++)))(((+++@{upstream}+++)))
====

//////////////////////////
If you want to see what tracking branches you have set up, you can use the `-vv` option to `git branch`.
This will list out your local branches with more information including what each branch is tracking and if your local branch is ahead, behind or both.
//////////////////////////
どのブランチを追跡しているのかを知りたい場合は、`git branch` のオプション `-vv` が使えます。
これは、ローカルブランチの一覧に加えて、各ブランチが追跡するリモートブランチや、リモートとの差異を表示します。

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
  testing   5ea463a trying something new
----

//////////////////////////
So here we can see that our `iss53` branch is tracking `origin/iss53` and is ``ahead'' by two, meaning that we have two commits locally that are not pushed to the server.
We can also see that our `master` branch is tracking `origin/master` and is up to date.
Next we can see that our `serverfix` branch is tracking the `server-fix-good` branch on our `teamone` server and is ahead by three and behind by one, meaning that there is one commit on the server we haven't merged in yet and three commits locally that we haven't pushed.
Finally we can see that our `testing` branch is not tracking any remote branch.
//////////////////////////
ここでは、手元の `iss53` ブランチが `origin/iss53` を追跡していることと、リモートより二つぶん「先行している (ahead)」ことがわかります。
つまり、まだサーバーにプッシュしていないコミットが二つあるということです。
また、`master` ブランチは `origin/master` を追跡しており、最新の状態であることもわかります。
同じく、`serverfix` ブランチは `teamone` サーバー上の `server-fix-good` ブランチを追跡しており、三つ先行していると同時に一つ遅れていることがわかります。
つまり、まだローカルにマージしていないコミットがサーバー上に一つあって、まだサーバーにプッシュしていないコミットがローカルに三つあるということです。
そして、`testing` ブランチは、リモートブランチを追跡していないこともわかります。

//////////////////////////
It's important to note that these numbers are only since the last time you fetched from each server.
This command does not reach out to the servers, it's telling you about what it has cached from these servers locally.
If you want totally up to date ahead and behind numbers, you'll need to fetch from all your remotes right before running this.
You could do that like this: `git fetch --all; git branch -vv`
//////////////////////////
これらの数字は、各サーバーから最後にフェッチした時点以降のものであることに注意しましょう。
このコマンドを実行したときに各サーバーに照会しているわけではなく、各サーバーから取得したローカルのキャッシュの状態を見ているだけです。
最新の状態と比べた先行や遅れの数を知りたい場合は、すべてのリモートをフェッチしてからこのコマンドを実行しなければいけません。
たとえば、`git fetch --all; git branch -vv` のようになります。

//////////////////////////
==== Pulling
//////////////////////////
==== プル

(((pulling)))
//////////////////////////
While the `git fetch` command will fetch down all the changes on the server that you don't have yet, it will not modify your working directory at all.
It will simply get the data for you and let you merge it yourself.
However, there is a command called `git pull` which is essentially a `git fetch` immediately followed by a `git merge` in most cases.
If you have a tracking branch set up as demonstrated in the last section, either by explicitly setting it or by having it created for you by the `clone` or `checkout` commands, `git pull` will look up what server and branch your current branch is tracking, fetch from that server and then try to merge in that remote branch.
//////////////////////////
`git fetch` コマンドは、サーバー上の変更のうち、まだ取得していないものをすべて取り込みます。
しかし、ローカルの作業ディレクトリは書き換えません。
データを取得するだけで、その後のマージは自分でしなければいけません。
`git pull` コマンドは基本的に、`git fetch` の実行直後に `git merge` を実行するのと同じ動きになります。
先ほどのセクションのとおりに追跡ブランチを設定した場合、`git pull` は、
現在のブランチが追跡しているサーバーとブランチを調べ、そのサーバーからフェッチしたうえで、リモートブランチのマージを試みます。

//////////////////////////
Generally it's better to simply use the `fetch` and `merge` commands explicitly as the magic of `git pull` can often be confusing.
//////////////////////////
一般的には、シンプルに `fetch` と `merge` を明示したほうがよいでしょう。
`git pull` は、時に予期せぬ動きをすることがあります。

[[r_delete_branches]]
//////////////////////////
==== Deleting Remote Branches
//////////////////////////
==== リモートブランチの削除

(((branches, deleting remote)))
//////////////////////////
Suppose you're done with a remote branch – say you and your collaborators are finished with a feature and have merged it into your remote's `master` branch (or whatever branch your stable codeline is in).
You can delete a remote branch using the `--delete` option to `git push`.
If you want to delete your `serverfix` branch from the server, you run the following:
//////////////////////////
リモートブランチでの作業が終わったとしましょう。
つまり、あなたや他のメンバーが一通りの作業を終え、それをリモートの `master` ブランチ (あるいは安定版のコードラインとなるその他のブランチ) にマージし終えたということです。
リモートブランチを削除するには、`git push` の `--delete` オプションを使います。
サーバーの `serverfix` ブランチを削除したい場合は次のようになります。

[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

//////////////////////////
Basically all this does is remove the pointer from the server.
The Git server will generally keep the data there for a while until a garbage collection runs, so if it was accidentally deleted, it's often easy to recover.
//////////////////////////
基本的に、このコマンドが行うのは、サーバーからポインタを削除することだけです。
Git サーバー上でガベージコレクションが行われるまではデータが残っているので、仮に間違って削除してしまったとしても、たいていの場合は簡単に復元できます。
