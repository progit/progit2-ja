//////////////////////////
=== Basic Branching and Merging
//////////////////////////
=== ブランチとマージの基本

//////////////////////////
Let's go through a simple example of branching and merging with a workflow that you might use in the real world.
You'll follow these steps:
//////////////////////////
実際の作業に使うであろう流れを例にとって、ブランチとマージの処理を見てみましょう。
次の手順で進めます。

//////////////////////////
. Do work on a web site.
. Create a branch for a new story you're working on.
. Do some work in that branch.
//////////////////////////
. ウェブサイトに関する作業を行っている
. 新たな作業用にブランチを作成する
. そのブランチで作業を行う

//////////////////////////
At this stage, you'll receive a call that another issue is critical and you need a hotfix.
You'll do the following:
//////////////////////////
ここで、別の重大な問題が発生したので至急対応してほしいという連絡を受けました。
その後の流れは次のようになります。

//////////////////////////
. Switch to your production branch.
. Create a branch to add the hotfix.
. After it's tested, merge the hotfix branch, and push to production.
. Switch back to your original story and continue working.
//////////////////////////
. 実運用環境用のブランチに戻る
. 修正を適用するためのブランチを作成する
. テストをした後で修正用ブランチをマージし、実運用環境用のブランチにプッシュする
. 元の作業用ブランチに戻り、作業を続ける

[[r_basic_branching]]
//////////////////////////
==== Basic Branching
//////////////////////////
==== ブランチの基本

(((branches, basic workflow)))
//////////////////////////
First, let's say you're working on your project and have a couple of commits already.
//////////////////////////
まず、すでに数回のコミットを済ませた状態のプロジェクトで作業をしているものと仮定します。

//////////////////////////
.A simple commit history
image::images/basic-branching-1.png[A simple commit history.]
//////////////////////////
.単純なコミットの歴史
image::images/basic-branching-1.png[単純なコミットの歴史]

//////////////////////////
You've decided that you're going to work on issue #53 in whatever issue-tracking system your company uses.
To create a branch and switch to it at the same time, you can run the `git checkout` command with the `-b` switch:
//////////////////////////
ここで、あなたの勤務先で使っている何らかの問題追跡システムに登録されている問題番号 53 への対応を始めることにしました。
ブランチの作成と新しいブランチへの切り替えを同時に行うには、`git checkout` コマンドに `-b` スイッチをつけて実行します。

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

//////////////////////////
This is shorthand for:
//////////////////////////
これは、次のコマンドのショートカットです。

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

//////////////////////////
.Creating a new branch pointer
image::images/basic-branching-2.png[Creating a new branch pointer.]
//////////////////////////
.新たなブランチポインタの作成
image::images/basic-branching-2.png[新たなブランチポインタの作成]

//////////////////////////
You work on your web site and do some commits.
Doing so moves the `iss53` branch forward, because you have it checked out (that is, your `HEAD` is pointing to it):
//////////////////////////
ウェブサイト上で何らかの作業をしてコミットします。
そうすると `iss53` ブランチが先に進みます。このブランチをチェックアウトしているからです (つまり、`HEAD` がそこを指しているということです)。

[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----

//////////////////////////
.The iss53 branch has moved forward with your work
image::images/basic-branching-3.png[The iss53 branch has moved forward with your work.]
//////////////////////////
.作業した結果、iss53 ブランチが移動した
image::images/basic-branching-3.png[作業した結果、iss53 ブランチが移動した]

//////////////////////////
Now you get the call that there is an issue with the web site, and you need to fix it immediately.
With Git, you don't have to deploy your fix along with the `iss53` changes you've made, and you don't have to put a lot of effort into reverting those changes before you can work on applying your fix to what is in production.
All you have to do is switch back to your `master` branch.
//////////////////////////
ここで、ウェブサイトに別の問題が発生したという連絡を受けました。
そっちのほうを優先して対応する必要があるとのことです。
Git を使っていれば、ここで `iss53` に関する変更をリリースしてしまう必要はありません。
また、これまでの作業をいったん元に戻してから改めて優先度の高い作業にとりかかるなどという大変な作業も不要です。
ただ単に、`master` ブランチに戻るだけでよいのです。

//////////////////////////
However, before you do that, note that if your working directory or staging area has uncommitted changes that conflict with the branch you're checking out, Git won't let you switch branches.
It's best to have a clean working state when you switch branches.
There are ways to get around this (namely, stashing and commit amending) that we'll cover later on, in <<ch07-git-tools#r_git_stashing>>.
For now, let's assume you've committed all your changes, so you can switch back to your `master` branch:
//////////////////////////
しかしその前に注意すべき点があります。
作業ディレクトリやステージングエリアに未コミットの変更が残っている場合、それがもしチェックアウト先のブランチと衝突する内容ならブランチの切り替えはできません。
ブランチを切り替える際には、クリーンな状態にしておくのが一番です。
これを回避する方法もあります (stash およびコミットの amend という処理です) が、後ほど <<ch07-git-tools#r_git_stashing>> で説明します。
今回はすべての変更をコミットし終えているので、master ブランチに戻ることができます。

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

//////////////////////////
At this point, your project working directory is exactly the way it was before you started working on issue #53, and you can concentrate on your hotfix.
This is an important point to remember: when you switch branches, Git resets your working directory to look like it did the last time you committed on that branch.
It adds, removes, and modifies files automatically to make sure your working copy is what the branch looked like on your last commit to it.
//////////////////////////
作業ディレクトリは問題番号 53 の対応を始める前とまったく同じ状態に戻りました。
これで、緊急の問題対応に集中できます。
ここで覚えておくべき重要な点は、ブランチを切り替えたときには、Git が作業ディレクトリの状態をリセットし、チェックアウトしたブランチが指すコミットの時と同じ状態にするということです。
そのブランチにおける直近のコミットと同じ状態にするため、ファイルの追加・削除・変更を自動的に行います。

//////////////////////////
Next, you have a hotfix to make.
Let's create a hotfix branch on which to work until it's completed:
//////////////////////////
次に、緊急の問題対応を行います。
緊急作業用に hotfix ブランチを作成し、作業をそこで進めるようにしましょう。

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
----

//////////////////////////
.Hotfix branch based on `master`
image::images/basic-branching-4.png[Hotfix branch based on `master`.]
//////////////////////////
.`master` から新たに作成した hotfix ブランチ
image::images/basic-branching-4.png[`master` から新たに作成した hotfix ブランチ]

//////////////////////////
You can run your tests, make sure the hotfix is what you want, and merge it back into your `master` branch to deploy to production.
You do this with the `git merge` command:(((git commands, merge)))
//////////////////////////
テストをすませて修正がうまくいったことを確認したら、master ブランチにそれをマージしてリリースします。
ここで使うのが `git merge` コマンドです。(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

//////////////////////////
You'll notice the phrase ``fast-forward'' in that merge.
Because the commit `C4` pointed to by the branch `hotfix` you merged in was directly ahead of the commit `C2` you're on, Git simply moves the pointer forward.
To phrase that another way, when you try to merge one commit with a commit that can be reached by following the first commit's history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together – this is called a ``fast-forward.''
//////////////////////////
このマージ処理で ``fast-forward'' というフレーズが登場したのにお気づきでしょうか。
マージしたブランチ `hotfix` が指すコミット `C4` がマージ元のコミット `C2` の直接の親であるため、Git がポインタを前に進めたのです。
言い換えると、あるコミットに対してコミット履歴上で直接到達できる別のコミットをマージしようとした場合、Git は単にポインタを前に進めるだけで済ませます。
マージ対象が分岐しているわけではないからです。
この処理のことを ``fast-forward'' と言います。

//////////////////////////
Your change is now in the snapshot of the commit pointed to by the `master` branch, and you can deploy the fix.
//////////////////////////
変更した内容が、これで `master` ブランチの指すスナップショットに反映されました。これで変更をリリースできます。

//////////////////////////
.`master` is fast-forwarded to `hotfix`
image::images/basic-branching-5.png[`master` is fast-forwarded to `hotfix`.]
//////////////////////////
.`master`が`hotfix`にfast-forwardされた
image::images/basic-branching-5.png[`master`が`hotfix`にfast-forwardされた]

//////////////////////////
After your super-important fix is deployed, you're ready to switch back to the work you were doing before you were interrupted.
However, first you'll delete the `hotfix` branch, because you no longer need it – the `master` branch points at the same place.
You can delete it with the `-d` option to `git branch`:
//////////////////////////
超重要な修正作業が終わったので、横やりが入る前にしていた作業に戻ることができます。
しかしその前に、まずは `hotfix` ブランチを削除しておきましょう。
`master` ブランチが同じ場所を指しているので、もはやこのブランチは不要だからです。
削除するには `git branch` で `-d` オプションを指定します。

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

//////////////////////////
Now you can switch back to your work-in-progress branch on issue #53 and continue working on it.
//////////////////////////
では、先ほどまで問題番号 53 の対応をしていたブランチに戻り、作業を続けましょう。

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----

//////////////////////////
.Work continues on `iss53`
image::images/basic-branching-6.png[Work continues on `iss53`.]
//////////////////////////
.`iss53` の作業を続ける
image::images/basic-branching-6.png[`iss53` の作業を続ける]

//////////////////////////
It's worth noting here that the work you did in your `hotfix` branch is not contained in the files in your `iss53` branch.
If you need to pull it in, you can merge your `master` branch into your `iss53` branch by running `git merge master`, or you can wait to integrate those changes until you decide to pull the `iss53` branch back into `master` later.
//////////////////////////
ここで、`hotfix` ブランチ上で行った作業は `iss53` ブランチには含まれていないことに注意しましょう。
もしそれを取得する必要があるのなら、方法はふたつあります。
ひとつは `git merge master` で `master` ブランチの内容を `iss53` ブランチにマージすること。
そしてもうひとつはそのまま作業を続け、いつか `iss53` ブランチの内容を `master` に適用することになった時点で統合することです。

[[r_basic_merging]]
//////////////////////////
==== Basic Merging
//////////////////////////
==== マージの基本

(((branches, merging)))(((merging)))
//////////////////////////
Suppose you've decided that your issue #53 work is complete and ready to be merged into your `master` branch.
In order to do that, you'll merge your `iss53` branch into `master`, much like you merged your `hotfix` branch earlier.
All you have to do is check out the branch you wish to merge into and then run the `git merge` command:
//////////////////////////
問題番号 53 の対応を終え、`master` ブランチにマージする準備ができたとしましょう。
`iss53` ブランチのマージは、先ほど `hotfix` ブランチをマージしたときとまったく同じような手順でできます。
つまり、マージ先のブランチに切り替えてから `git merge` コマンドを実行するだけです。

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

//////////////////////////
This looks a bit different than the `hotfix` merge you did earlier.
In this case, your development history has diverged from some older point.
Because the commit on the branch you're on isn't a direct ancestor of the branch you're merging in, Git has to do some work.
In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.
//////////////////////////
先ほどの `hotfix` のマージとはちょっとちがう感じですね。
今回の場合、開発の歴史が過去のとある時点で分岐しています。
マージ先のコミットがマージ元のコミットの直系の先祖ではないため、Git 側でちょっとした処理が必要だったのです。
ここでは、各ブランチが指すふたつのスナップショットとそれらの共通の先祖との間で三方向のマージを行いました。

//////////////////////////
.Three snapshots used in a typical merge
image::images/basic-merging-1.png[Three snapshots used in a typical merge.]
//////////////////////////
.三つのスナップショットを使ったマージ
image::images/basic-merging-1.png[三つのスナップショットを使ったマージ]

//////////////////////////
Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it.
This is referred to as a merge commit, and is special in that it has more than one parent.
//////////////////////////
単にブランチのポインタを先に進めるのではなく、Git はこの三方向のマージ結果から新たなスナップショットを作成し、それを指す新しいコミットを自動作成します。
これはマージコミットと呼ばれ、複数の親を持つ特別なコミットとなります。

//////////////////////////
.A merge commit
image::images/basic-merging-2.png[A merge commit.]
//////////////////////////
.マージコミット
image::images/basic-merging-2.png[マージコミット]

//////////////////////////
It's worth pointing out that Git determines the best common ancestor to use for its merge base; this is different than older tools like CVS or Subversion (before version 1.5), where the developer doing the merge had to figure out the best merge base for themselves.
This makes merging a heck of a lot easier in Git than in these other systems.
//////////////////////////
マージの基点として使用する共通の先祖を Git が自動的に判別するというのが特筆すべき点です。
CVS や Subversion (バージョン 1.5 より前のもの) は、マージの基点となるポイントを自分で見つける必要があります。
これにより、他のシステムに比べて Git のマージが非常に簡単なものとなっているのです。

//////////////////////////
Now that your work is merged in, you have no further need for the `iss53` branch.
You can close the ticket in your ticket-tracking system, and delete the branch:
//////////////////////////
これで、今までの作業がマージできました。
もはや `iss53` ブランチは不要です。
削除してしまい、問題追跡システムのチケットもクローズしておきましょう。

[source,console]
----
$ git branch -d iss53
----

[[r_basic_merge_conflicts]]
//////////////////////////
==== Basic Merge Conflicts
//////////////////////////
==== マージ時のコンフリクト

(((merging, conflicts)))
//////////////////////////
Occasionally, this process doesn't go smoothly.
If you changed the same part of the same file differently in the two branches you're merging together, Git won't be able to merge them cleanly.
If your fix for issue #53 modified the same part of a file as the `hotfix`, you'll get a merge conflict that looks something like this:
//////////////////////////
物事は常にうまくいくとは限りません。
同じファイルの同じ部分をふたつのブランチで別々に変更してそれをマージしようとすると、Git はそれをうまくマージする方法を見つけられないでしょう。
問題番号 53 の変更が仮に `hotfix` ブランチと同じところを扱っていたとすると、このようなコンフリクトが発生します。

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

//////////////////////////
Git hasn't automatically created a new merge commit.
It has paused the process while you resolve the conflict.
If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:
//////////////////////////
Git は新たなマージコミットを自動的には作成しませんでした。
コンフリクトを解決するまで、処理は中断されます。
コンフリクトが発生してマージできなかったのがどのファイルなのかを知るには `git status` を実行します。

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

//////////////////////////
Anything that has merge conflicts and hasn't been resolved is listed as unmerged.
Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.
Your file contains a section that looks something like this:
//////////////////////////
コンフリクトが発生してまだ解決されていないものについては unmerged として表示されます。
Git は、標準的なコンフリクトマーカーをファイルに追加するので、ファイルを開いてそれを解決することにします。
コンフリクトが発生したファイルの中には、このような部分が含まれています。

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

//////////////////////////
This means the version in `HEAD` (your `master` branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.
In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.
For instance, you might resolve this conflict by replacing the entire block with this:
//////////////////////////
これは、`HEAD` (merge コマンドを実行したときにチェックアウトしていたブランチなので、ここでは `master` となります) の内容が上の部分 (`=======` の上にある内容)、そして `iss53` ブランチの内容が下の部分であるということです。
コンフリクトを解決するには、どちらを採用するかをあなたが判断することになります。
たとえば、ひとつの解決法としてブロック全体を次のように書き換えます。

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

//////////////////////////
This resolution has a little of each section, and the `>>>>>` lines have been completely removed.
After you've resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.
Staging the file marks it as resolved in Git.
//////////////////////////
このような解決を各部分に対して行い、`>>>>>` の行をすべて除去します。
そしてすべてのコンフリクトを解決したら、各ファイルに対して `git add` を実行して解決済みであることを通知します。
ファイルをステージすると、Git はコンフリクトが解決されたと見なします。

//////////////////////////
If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:(((git commands, mergetool)))
//////////////////////////
コンフリクトの解決をグラフィカルに行いたい場合は `git mergetool` を実行します。
これは、適切なビジュアルマージツールを立ち上げてコンフリクトの解消を行います。(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

//////////////////////////
If you want to use a merge tool other than the default (Git chose `opendiff` in this case because the command was run on a Mac), you can see all the supported tools listed at the top after ``one of the following tools.''
Just type the name of the tool you'd rather use.
//////////////////////////
デフォルトのツール (Git は `opendiff` を選びました。私がこのコマンドを Mac で実行したからです) 以外のマージツールを使いたい場合は、“... one of the following tools:”にあるツール一覧を見ましょう。
そして、使いたいツールの名前を打ち込みます。

[NOTE]
//////////////////////////
====
If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in <<ch07-git-tools#r_advanced_merging>>.
====
//////////////////////////
====
もっと難しいコンフリクトを解消するための方法を知りたい場合は、<<ch07-git-tools#r_advanced_merging>> を参照ください。
====

//////////////////////////
After you exit the merge tool, Git asks you if the merge was successful.
If you tell the script that it was, it stages the file to mark it as resolved for you.
You can run `git status` again to verify that all conflicts have been resolved:
//////////////////////////
マージツールを終了させると、マージに成功したかどうかを Git が尋ねてきます。
成功したと伝えると、そのファイルを解決済みとマークします。
もう一度 `git status` を実行すれば、すべてのコンフリクトが解消済みであることを確認できます。

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

//////////////////////////
If you're happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.
The commit message by default looks something like this:
//////////////////////////
結果に満足し、すべてのコンフリクトがステージされていることが確認できたら、`git commit` を実行してマージコミットを完了させます。
デフォルトのコミットメッセージは、このようになります。

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

//////////////////////////
You can modify that message with details about how you resolved the merge if you think it would be helpful to others looking at this merge in the future – why you did what you did, if it's not obvious.
//////////////////////////
このメッセージを変更して、どのようにして衝突を解決したのかを詳しく説明しておくのもよいでしょう。
後から他の人がそのマージを見たときに、あなたがなぜそのようにしたのかがわかりやすくなります。
