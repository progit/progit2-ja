//////////////////////////
=== Git Daemon
//////////////////////////
=== Git デーモン

(((serving repositories, git protocol)))
//////////////////////////
Next we'll set up a daemon serving repositories over the ``Git'' protocol.
This is common choice for fast, unauthenticated access to your Git data.
Remember that since it's not an authenticated service, anything you serve over this protocol is public within its network.
//////////////////////////
続いて、``Git'' プロトコルを使ってリポジトリを配信するデーモンをセットアップしてみましょう。
Git リポジトリへの認証なしの高速アクセスが必要な場合、一般的な選択肢になります。
ただし、これは認証なしのサービスで、配信されるデータは原則として公開されてしまうので注意してください。

//////////////////////////
If you're running this on a server outside your firewall, it should only be used for projects that are publicly visible to the world.
If the server you're running it on is inside your firewall, you might use it for projects that a large number of people or computers (continuous integration or build servers) have read-only access to, when you don't want to have to add an SSH key for each.
//////////////////////////
ファイアウォールの外にサーバーがあるのなら、一般に公開しているプロジェクトにのみ使うようにしましょう。ファイアウォール内で使うのなら、たとえば大量のメンバーやコンピューター (継続的インテグレーションのビルドサーバーなど) に対して SSH の鍵なしで読み取り専用アクセスを許可するという使い方もあるでしょう。

//////////////////////////
In any case, the Git protocol is relatively easy to set up.
Basically, you need to run this command in a daemonized manner:(((git commands, daemon)))
//////////////////////////
いずれにせよ、Git プロトコルは比較的容易にセットアップすることができます。
デーモン化するためには、このようなコマンドを実行します。(((git commands, daemon)))

[source,console]
----
$ git daemon --reuseaddr --base-path=/opt/git/ /opt/git/
----

//////////////////////////
`--reuseaddr` allows the server to restart without waiting for old connections to time out, the `--base-path` option allows people to clone projects without specifying the entire path, and the path at the end tells the Git daemon where to look for repositories to export.
If you're running a firewall, you'll also need to punch a hole in it at port 9418 on the box you're setting this up on.
//////////////////////////
`--reuseaddr` は、前の接続がタイムアウトするのを待たずにサーバーを再起動させるオプションです。`--base-path` オプションを指定すると、フルパスを指定しなくてもプロジェクトをクローンできるようになります。そして最後に指定したパスは、Git デーモンに公開させるリポジトリの場所です。
ファイアウォールを使っているのなら、ポート 9418 に穴を開けなければなりません。

//////////////////////////
You can daemonize this process a number of ways, depending on the operating system you're running.
On an Ubuntu machine, you can use an Upstart script.
So, in the following file
//////////////////////////
プロセスをデーモンにする方法は、OS によってさまざまです。
Ubuntu の場合は Upstart スクリプトを使います。

[source,console]
----
/etc/init/local-git-daemon.conf
----

//////////////////////////
you put this script:
//////////////////////////
のようなファイルを用意して、このようなスクリプトを書きます。

[source,console]
----
start on startup
stop on shutdown
exec /usr/bin/git daemon \
    --user=git --group=git \
    --reuseaddr \
    --base-path=/opt/git/ \
    /opt/git/
respawn
----

//////////////////////////
For security reasons, it is strongly encouraged to have this daemon run as a user with read-only permissions to the repositories – you can easily do this by creating a new user 'git-ro' and running the daemon as them.
For the sake of simplicity we'll simply run it as the same 'git' user that `git-shell` is running as.
//////////////////////////
セキュリティを考慮して、リポジトリに対する読み込み権限しかないユーザーでこのデーモンを実行させるようにしましょう。新しいユーザー 'git-ro' を作り、このユーザーでデーモンを実行させるとよいでしょう。
ここでは、説明を簡単にするために `git-shell` と同じユーザー 'git' で実行させることにします。

//////////////////////////
When you restart your machine, your Git daemon will start automatically and respawn if it goes down.
To get it running without having to reboot, you can run this:
//////////////////////////
マシンを再起動すれば Git デーモンが自動的に立ち上がり、終了させても再び起動するようになります。
再起動せずに実行させるには、次のコマンドを実行します。

[source,console]
----
$ initctl start local-git-daemon
----

//////////////////////////
On other systems, you may want to use `xinetd`, a script in your `sysvinit` system, or something else – as long as you get that command daemonized and watched somehow.
//////////////////////////
その他のシステムでは、`xinetd` や `sysvinit` システムのスクリプトなど、コマンドをデーモン化して監視できる仕組みを使います。

//////////////////////////
Next, you have to tell Git which repositories to allow unauthenticated Git server-based access to.
You can do this in each repository by creating a file named `git-daemon-export-ok`.
//////////////////////////
次に、どのプロジェクトに対して Git プロトコルでの認証なしアクセスを許可するのかを Git に設定します。許可したいリポジトリに `git-daemon-export-ok` ファイルを作成すれば設定できます。

[source,console]
----
$ cd /path/to/project.git
$ touch git-daemon-export-ok
----

//////////////////////////
The presence of that file tells Git that it's OK to serve this project without authentication.
//////////////////////////
このファイルが存在するプロジェクトについては、Git は認証なしで公開してもよいものとみなします。
