[[r_git_on_the_server]]
//////////////////////////
=== Getting Git on a Server
//////////////////////////
=== サーバー用の Git の取得

//////////////////////////
Now we'll cover setting up a Git service running these protocols on your own server.
//////////////////////////
さて、これまでに説明してきたプロトコルを使って Git サーバーを構築する方法を見ていきましょう。

[NOTE]
//////////////////////////
====
Here we'll be demonstrating the commands and steps needed to do basic, simplified installations on a Linux based server, though it's also possible to run these services on Mac or Windows servers.
Actually setting up a production server within your infrastructure will certainly entail differences in security measures or operating system tools, but hopefully this will give you the general idea of what's involved.
====
//////////////////////////
====
ここで提示するコマンドや手順は、標準的な構成を Linux サーバーにインストールする場合のものです。また、これらは Mac や Windows のサーバーにも応用できます。
ただし、サーバーをプロダクション用にセットアップするときには、セキュリティの観点、OS のツール類などで違いが出るのは当然です。とはいえ、この節を読めば必要なものについて概ね把握できるでしょう。
====

//////////////////////////
In order to initially set up any Git server, you have to export an existing repository into a new bare repository – a repository that doesn't contain a working directory.
This is generally straightforward to do.
In order to clone your repository to create a new bare repository, you run the clone command with the `--bare` option.(((git commands, clone, bare)))
By convention, bare repository directories end in `.git`, like so:
//////////////////////////
Git サーバーを立ち上げるには、既存のリポジトリをエクスポートして新たなベアリポジトリ (作業ディレクトリを持たないリポジトリ) を作らなければなりません。
これは簡単にできます。
リポジトリをクローンして新たにベアリポジトリを作成するには、clone コマンドでオプション `--bare` を指定します。(((git commands, clone, bare)))
慣例により、ベアリポジトリのディレクトリ名の最後は `.git` とすることになっています。

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

//////////////////////////
You should now have a copy of the Git directory data in your `my_project.git` directory.
//////////////////////////
そうすると、Git ディレクトリのデータを `my_project.git` ディレクトリにコピーできます。

//////////////////////////
This is roughly equivalent to something like
//////////////////////////
これは、おおざっぱに言うと次の操作と同じようなことです。

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

//////////////////////////
There are a couple of minor differences in the configuration file; but for your purpose, this is close to the same thing.
It takes the Git repository by itself, without a working directory, and creates a directory specifically for it alone.
//////////////////////////
設定ファイルにはちょっとした違いもありますが、ほぼこんなものです。
作業ディレクトリなしで Git リポジトリを受け取り、それ単体のディレクトリを作成しました。

[[r_bare_repo]]
//////////////////////////
==== Putting the Bare Repository on a Server
//////////////////////////
==== ベアリポジトリのサーバー上への設置

//////////////////////////
Now that you have a bare copy of your repository, all you need to do is put it on a server and set up your protocols.
Let's say you've set up a server called `git.example.com` that you have SSH access to, and you want to store all your Git repositories under the `/srv/git` directory.
Assuming that `/srv/git` exists on that server, you can set up your new repository by copying your bare repository over:
//////////////////////////
ベアリポジトリを取得できたので、あとはそれをサーバー上においてプロトコルを準備するだけです。
ここでは、`git.example.com` というサーバーがあってそこに SSH でアクセスできるものと仮定しましょう。Git リポジトリはサーバー上の `/srv/git` ディレクトリに置く予定です。
`/srv/git` ディレクトリが作成済みであれば、新しいリポジトリを作成するには、ベアリポジトリを次のようにコピーします。

[source,console]
----
$ scp -r my_project.git user@git.example.com:/srv/git
----

//////////////////////////
At this point, other users who have SSH access to the same server which has read-access to the `/srv/git` directory can clone your repository by running
//////////////////////////
この時点で、同じサーバーに SSH でアクセスできてかつ `/srv/git` ディレクトリへの読み込みアクセス権限がある人なら、次のようにしてこのリポジトリをクローンできるようになりました。

[source,console]
----
$ git clone user@git.example.com:/srv/git/my_project.git
----

//////////////////////////
If a user SSHs into a server and has write access to the `/srv/git/my_project.git` directory, they will also automatically have push access.
//////////////////////////
ユーザーが SSH でアクセスでき、かつ `/srv/git/my_project.git` ディレクトリへの書き込みアクセス権限があれば、すでにプッシュもできる状態になっています。

//////////////////////////
Git will automatically add group write permissions to a repository properly if you run the `git init` command with the `--shared` option.(((git commands, init, bare)))
//////////////////////////
`git init` コマンドで `--shared` オプションを指定すると、リポジトリに対するグループ書き込みパーミッションを自動的に追加することができます。(((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /srv/git/my_project.git
$ git init --bare --shared
----

//////////////////////////
You see how easy it is to take a Git repository, create a bare version, and place it on a server to which you and your collaborators have SSH access.
Now you're ready to collaborate on the same project.
//////////////////////////
既存の Git リポジトリからベアリポジトリを作成し、メンバーが SSH でアクセスできるサーバーにそれを配置するだけ。簡単ですね。
これで、そのプロジェクトでの共同作業ができるようになりました。

//////////////////////////
It's important to note that this is literally all you need to do to run a useful Git server to which several people have access – just add SSH-able accounts on a server, and stick a bare repository somewhere that all those users have read and write access to.
You're ready to go – nothing else needed.
//////////////////////////
複数名が使用する Git サーバーをたったこれだけの作業で用意できるというのは特筆すべきことです。
サーバーにSSHでアクセス可能なアカウントを作成し、ベアリポジトリをサーバーのどこかに置き、そこに読み書き可能なアクセス権を設定する。
これで準備OK。他には何もいりません。

//////////////////////////
In the next few sections, you'll see how to expand to more sophisticated setups.
This discussion will include not having to create user accounts for each user, adding public read access to repositories, setting up web UIs and more.
However, keep in mind that to collaborate with a couple of people on a private project, all you _need_ is an SSH server and a bare repository.
//////////////////////////
次のいくつかのセクションでは、より洗練された環境を作るための方法を説明します。いちいちユーザーごとにアカウントを作らなくて済む方法、一般向けにリポジトリへの読み込みアクセスを開放する方法、ウェブ UI の設定などです。しかし、数名のメンバーで閉じたプロジェクトでの作業なら、SSH サーバーとベアリポジトリ _さえ_ あれば十分なことは覚えておきましょう。

//////////////////////////
==== Small Setups
//////////////////////////
==== ちょっとしたセットアップ

//////////////////////////
If you're a small outfit or are just trying out Git in your organization and have only a few developers, things can be simple for you.
One of the most complicated aspects of setting up a Git server is user management.
If you want some repositories to be read-only to certain users and read/write to others, access and permissions can be a bit more difficult to arrange.
//////////////////////////
小規模なグループ、あるいは数名の開発者しかいない組織で Git を使うなら、すべてはシンプルに進められます。
Git サーバーを準備する上でもっとも複雑なことのひとつは、ユーザー管理です。
同一リポジトリに対して「このユーザーは読み込みのみが可能、あのユーザーは読み書きともに可能」などと設定したければ、アクセス権とパーミッションの設定は、設定しない場合と比べて少しですが難しくなります。

//////////////////////////
===== SSH Access
//////////////////////////
===== SSH アクセス

(((serving repositories, SSH)))
//////////////////////////
If you have a server to which all your developers already have SSH access, it's generally easiest to set up your first repository there, because you have to do almost no work (as we covered in the last section).
If you want more complex access control type permissions on your repositories, you can handle them with the normal filesystem permissions of the operating system your server runs.
//////////////////////////
開発者全員が SSH でアクセスできるサーバーがすでにあるのなら、リポジトリを用意するのは簡単です。先ほど説明したように、ほとんど何もする必要はないでしょう。
より複雑なアクセス制御をリポジトリ上で行いたい場合は、そのサーバーの OS 上でファイルシステムのパーミッションを設定するとよいでしょう。

//////////////////////////
If you want to place your repositories on a server that doesn't have accounts for everyone on your team whom you want to have write access, then you must set up SSH access for them.
We assume that if you have a server with which to do this, you already have an SSH server installed, and that's how you're accessing the server.
//////////////////////////
リポジトリに対する書き込みアクセスをさせたいメンバーの中にサーバーのアカウントを持っていない人がいる場合は、新たに SSH アカウントを作成しなければなりません。
あなたがサーバーにアクセスできているということは、すでに SSH サーバーはインストールされているということです。

//////////////////////////
There are a few ways you can give access to everyone on your team.
The first is to set up accounts for everybody, which is straightforward but can be cumbersome.
You may not want to run `adduser` and set temporary passwords for every user.
//////////////////////////
その状態で、チームの全員にアクセス権限を与えるにはいくつかの方法があります。
ひとつは全員分のアカウントを作成すること。直感的ですがすこし面倒です。
ひとりひとりに対して `adduser` を実行して初期パスワードを設定するという作業をしなければなりません。

//////////////////////////
A second method is to create a single 'git' user on the machine, ask every user who is to have write access to send you an SSH public key, and add that key to the `~/.ssh/authorized_keys` file of your new 'git' user.
At that point, everyone will be able to access that machine via the 'git' user.
This doesn't affect the commit data in any way – the SSH user you connect as doesn't affect the commits you've recorded.
//////////////////////////
もうひとつの方法は、'git' ユーザーをサーバー上に作成し、書き込みアクセスが必要なユーザーには SSH 公開鍵を用意してもらってそれを 'git' ユーザーの `~/.ssh/authorized_keys` に追加します。
これで、全員が 'git' ユーザーでそのマシンにアクセスできるようになりました。これがコミットデータに影響を及ぼすことはありません。
SSH で接続したときのユーザーとコミットするときに記録されるユーザーとは別のものだからです。

//////////////////////////
Another way to do it is to have your SSH server authenticate from an LDAP server or some other centralized authentication source that you may already have set up.
As long as each user can get shell access on the machine, any SSH authentication mechanism you can think of should work.
//////////////////////////
あるいは、SSH サーバーの認証を LDAP サーバーやその他の中央管理形式の仕組みなど既に用意されているものにするとこもできます。
各ユーザーがサーバー上でシェルへのアクセスができさえすれば、どんな仕組みの SSH 認証であっても動作します。
