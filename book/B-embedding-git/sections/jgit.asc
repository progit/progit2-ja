=== JGit

(((jgit)))(((Java)))
//////////////////////////
If you want to use Git from within a Java program, there is a fully featured Git library called JGit.
JGit is a relatively full-featured implementation of Git written natively in Java, and is widely used in the Java community.
The JGit project is under the Eclipse umbrella, and its home can be found at https://www.eclipse.org/jgit/[].
//////////////////////////
JavaのプログラムからGitを使いたい場合、十分な機能を備えたGitのライブラリであるJGitが利用できます。
JGitは、ネイティブJavaによるGitの実装です。Gitのほぼ全機能を備えており、Javaコミュニティで広く使われています。
JGitはEclipse傘下のプロジェクトで、ホームページは http://www.eclipse.org/jgit[] です。

//////////////////////////
==== Getting Set Up
//////////////////////////
==== セットアップする

//////////////////////////
There are a number of ways to connect your project with JGit and start writing code against it.
Probably the easiest is to use Maven – the integration is accomplished by adding the following snippet to the `<dependencies>` tag in your pom.xml file:
//////////////////////////
JGitをあなたのプロジェクトへ追加して、コードを書き始めるには、いくつかの方法があります。
おそらく最も簡単なのはMavenを使う方法です。次のスニペットを pom.xml の `<dependencies>` タグに追加すれば、統合が行えます。

[source,xml]
----
<dependency>
    <groupId>org.eclipse.jgit</groupId>
    <artifactId>org.eclipse.jgit</artifactId>
    <version>3.5.0.201409260305-r</version>
</dependency>
----

//////////////////////////
The `version` will most likely have advanced by the time you read this; check https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit[] for updated repository information.
Once this step is done, Maven will automatically acquire and use the JGit libraries that you'll need.
//////////////////////////
皆さんがこれを読んでいる時には、おそらく `version` の番号はもっと進んでいるでしょうから、 http://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit[] で最新のリポジトリの情報を確認してください。
このステップが完了したら、以降は必要なJGitライブラリの取得と使用をMavenが自動的に行ってくれます。

//////////////////////////
If you would rather manage the binary dependencies yourself, pre-built JGit binaries are available from https://www.eclipse.org/jgit/download[].
You can build them into your project by running a command like this:
//////////////////////////
バイナリの依存関係を自前で管理したい場合は、ビルド済みのJGitのバイナリが http://www.eclipse.org/jgit/download[] から取得できます。
JGitをプロジェクトへ組み込むには、次のようなコマンドを実行します。

[source,console]
----
javac -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App.java
java -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App
----

==== Plumbing

//////////////////////////
JGit has two basic levels of API: plumbing and porcelain.
The terminology for these comes from Git itself, and JGit is divided into roughly the same kinds of areas: porcelain APIs are a friendly front-end for common user-level actions (the sorts of things a normal user would use the Git command-line tool for), while the plumbing APIs are for interacting with low-level repository objects directly.
//////////////////////////
JGitのAPIには大きく2 つのレベルがあり、それぞれ配管（Plumbing）および磁器（Porcelain）と呼ばれています。
これらはGit由来の用語で、JGitでもだいたいGitと同じように区分けされています。Porcelain APIは、使いやすいフロントエンドで、一般的なユーザレベルの処理（普通のユーザがGitのコマンドラインツールを使って行うような処理）を行います。一方、Plumbing APIでは、低レベルなリポジトリオブジェクトを直接操作します。

//////////////////////////
The starting point for most JGit sessions is the `Repository` class, and the first thing you'll want to do is create an instance of it.
For a filesystem-based repository (yes, JGit allows for other storage models), this is accomplished using `FileRepositoryBuilder`:
//////////////////////////
JGitセッションでは多くの場合、`Repository` クラスを開始点とします。この場合、まず最初に行いたい処理は `Repository` クラスのインスタンスの作成です。
ファイルシステムベースのリポジトリなら（そう、JGitでは他のストレージモデルも扱えます）、これは `FileRepositoryBuilder` を使って行います。

[source,java]
//////////////////////////
----
// Create a new repository
Repository newlyCreatedRepo = FileRepositoryBuilder.create(
    new File("/tmp/new_repo/.git"));
newlyCreatedRepo.create();

// Open an existing repository
Repository existingRepo = new FileRepositoryBuilder()
    .setGitDir(new File("my_repo/.git"))
    .build();
----
//////////////////////////
----
// 新しくリポジトリを作成する。存在するパスを指定すること
Repository newlyCreatedRepo = FileRepositoryBuilder.create(
    new File("/tmp/new_repo/.git"));

// 既存のリポジトリを開く
Repository existingRepo = new FileRepositoryBuilder()
    .setGitDir(new File("my_repo/.git"))
    .build();
----

//////////////////////////
The builder has a fluent API for providing all the things it needs to find a Git repository, whether or not your program knows exactly where it's located.
It can use environment variables (`.readEnvironment()`), start from a place in the working directory and search (`.setWorkTree(…).findGitDir()`), or just open a known `.git` directory as above.
//////////////////////////
`FileRepositoryBuilder` は洗練されたAPIが備わっており、リポジトリの場所が分かっているにしろいないにしろ、Gitのリポジトリを見つけるのに必要な処理はすべて提供されています。
ここでは、環境変数を使う (`.readEnvironment()`)、作業ディレクトリ中のどこかを起点として検索をする(`.setWorkTree(…).findGitDir()`)、上の例のように単に既知の `.git` ディレクトリを開く、といった方法が使用できます。

//////////////////////////
Once you have a `Repository` instance, you can do all sorts of things with it.
Here's a quick sampling:
//////////////////////////
`Repository` インスタンスを取得したら、そこを起点にあらゆる種類の処理が行えます。
簡単なサンプルプログラムを次に示します。

[source,java]
//////////////////////////
----
// Get a reference
Ref master = repo.getRef("master");

// Get the object the reference points to
ObjectId masterTip = master.getObjectId();

// Rev-parse
ObjectId obj = repo.resolve("HEAD^{tree}");

// Load raw object contents
ObjectLoader loader = repo.open(masterTip);
loader.copyTo(System.out);

// Create a branch
RefUpdate createBranch1 = repo.updateRef("refs/heads/branch1");
createBranch1.setNewObjectId(masterTip);
createBranch1.update();

// Delete a branch
RefUpdate deleteBranch1 = repo.updateRef("refs/heads/branch1");
deleteBranch1.setForceUpdate(true);
deleteBranch1.delete();

// Config
Config cfg = repo.getConfig();
String name = cfg.getString("user", null, "name");
----
//////////////////////////
----
// 参照を取得する
Ref master = repo.getRef("master");

// 参照の指すオブジェクトを取得する
ObjectId masterTip = master.getObjectId();

// Rev-parse文法を使う
ObjectId obj = repo.resolve("HEAD^{tree}");

// オブジェクトの生の内容をロードする
ObjectLoader loader = repo.open(masterTip);
loader.copyTo(System.out);

// ブランチを作成する
RefUpdate createBranch1 = repo.updateRef("refs/heads/branch1");
createBranch1.setNewObjectId(masterTip);
createBranch1.update();

// ブランチを削除する
RefUpdate deleteBranch1 = repo.updateRef("refs/heads/branch1");
deleteBranch1.setForceUpdate(true);
deleteBranch1.delete();

// 設定値
Config cfg = repo.getConfig();
String name = cfg.getString("user", null, "name");
----

//////////////////////////
There's quite a bit going on here, so let's go through it one section at a time.
//////////////////////////
ここでは数多くの処理が行われています。1セクションずつ順に見て行きましょう。

//////////////////////////
The first line gets a pointer to the `master` reference.
JGit automatically grabs the _actual_ `master` ref, which lives at `refs/heads/master`, and returns an object that lets you fetch information about the reference.
You can get the name (`.getName()`), and either the target object of a direct reference (`.getObjectId()`) or the reference pointed to by a symbolic ref (`.getTarget()`).
Ref objects are also used to represent tag refs and objects, so you can ask if the tag is ``peeled,'' meaning that it points to the final target of a (potentially long) string of tag objects.
//////////////////////////
最初の行では `master` 参照へのポインタを取得しています。 
JGitは `refs/heads/master` にある _実際の_ master参照を自動的に取得してオブジェクトを返します。このオブジェクトを使えば、参照についての情報を取得できます。
ここでは、名前 (`.getName()`) と、直接参照のターゲットオブジェクト (`.getObjectId()`) またはシンボリック参照の指す参照 (`.getTarget()`) のいずれかを取得できます。
参照オブジェクトは、タグ参照やオブジェクトを表すのにも使われるので、タグが ``peeled'' か問い合わせられるようになっています。つまり、参照がタグオブジェクトの（ひょっとすると長い）列の最後のターゲットを指しているか問い合わせることができます。

//////////////////////////
The second line gets the target of the `master` reference, which is returned as an ObjectId instance.
ObjectId represents the SHA-1 hash of an object, which might or might not exist in Git's object database.
The third line is similar, but shows how JGit handles the rev-parse syntax (for more on this, see <<ch07-git-tools#_branch_references>>); you can pass any object specifier that Git understands, and JGit will return either a valid ObjectId for that object, or `null`.
//////////////////////////
2行目では、 `master` 参照の指す先を取得して、ObjectIdインスタンスの形で返します。
ObjectIdはGitのオブジェクトデータベース中にある（または、データベース中にない）オブジェクトのSHA-1ハッシュを表しています。 
3行目は似たような処理ですが、ここではJGitがrev-parse文法（詳細は <<ch07-git-tools#r_branch_references>> を参照）を処理する方法を示しています。Gitが解釈できる任意のオブジェクト指定子を渡すことができ、JGitはそのオブジェクトのvalidなObjectIdか `null` のどちらかを返します。

//////////////////////////
The next two lines show how to load the raw contents of an object.
In this example, we call `ObjectLoader.copyTo()` to stream the contents of the object directly to stdout, but ObjectLoader also has methods to read the type and size of an object, as well as return it as a byte array.
For large objects (where `.isLarge()` returns `true`), you can call `.openStream()` to get an InputStream-like object that can read the raw object data without pulling it all into memory at once.
//////////////////////////
次の2行はオブジェクトの生の内容をロードする方法を示しています。 
このサンプルでは `ObjectLoader.copyTo()` を使ってオブジェクトの内容を標準出力へ直接流し込んでいますが、ObjectLoaderにはオブジェクトの型やサイズを返すメソッド、オブジェクトの内容をbyte型配列として返すメソッドもあります。
大きいオブジェクト（`.isLarge()` が `true` を返すようなオブジェクト）に対しては、 `.openStream()` を使えば、InputStream のようなオブジェクトを取得でき、データ全体をメモリ上に置くことなく、生のデータを読み込めます。

//////////////////////////
The next few lines show what it takes to create a new branch.
We create a RefUpdate instance, configure some parameters, and call `.update()` to trigger the change.
Directly following this is the code to delete that same branch.
Note that `.setForceUpdate(true)` is required for this to work; otherwise the `.delete()` call will return `REJECTED`, and nothing will happen.
//////////////////////////
次の数行は、新しいブランチを作成するために必要な処理を示しています。
ここではRefUpdateのインスタンスを作成し、パラメータを設定した上で、`.update()` を呼んで変更を適用しています。
続く数行は同じブランチを削除するコードです。
なお、この処理では `.setForceUpdate(true)` が必須です。さもなくば、 `.delete()` を呼んでも `REJECTED` が返り、何も変更されません。

//////////////////////////
The last example shows how to fetch the `user.name` value from the Git configuration files.
This Config instance uses the repository we opened earlier for local configuration, but will automatically detect the global and system configuration files and read values from them as well.
//////////////////////////
最後の例は、Gitの設定ファイルから `user.name` の値を取得する方法を示しています。
このConfigインスタンスは、ローカル設定のために前に開いたリポジトリを使用しますが、グローバル設定ファイルやシステム設定ファイルからも自動的に値を読み込みます。 

//////////////////////////
This is only a small sampling of the full plumbing API; there are many more methods and classes available.
Also not shown here is the way JGit handles errors, which is through the use of exceptions.
JGit APIs sometimes throw standard Java exceptions (such as `IOException`), but there are a host of JGit-specific exception types that are provided as well (such as `NoRemoteRepositoryException`, `CorruptObjectException`, and `NoMergeBaseException`).
//////////////////////////
ここで示したサンプルは、Plumbing APIのごく一部であり、利用可能なメソッドやクラスは他にもたくさんあります。 
ここで取り上げなかった内容としては、他にJGitのエラー処理があります。エラー処理は例外を通じて行われます。
JGitのAPIからthrowされる例外には、Java標準の例外（`IOException` など）の他にも、JGit固有の各種例外（`NoRemoteRepositoryException`, `CorruptObjectException`, `NoMergeBaseException` など）があります。

==== Porcelain

//////////////////////////
The plumbing APIs are rather complete, but it can be cumbersome to string them together to achieve common goals, like adding a file to the index, or making a new commit.
JGit provides a higher-level set of APIs to help out with this, and the entry point to these APIs is the `Git` class:
//////////////////////////
Plumbing APIは網羅的ではありますが、その機能を繋ぎ合わせて一般的な作業（インデックスにファイルを追加したり、新しくコミットを作成したり）を遂行するのは、場合によっては面倒です。 
JGitは、この点を手助けする高いレベルのAPIを提供しています。これらのAPIへのエントリポイントは、 `Git` クラスです。

[source,java]
//////////////////////////
----
Repository repo;
// construct repo...
Git git = new Git(repo);
----
//////////////////////////
----
Repository repo;
// repoオブジェクトの作成……
Git git = new Git(repo);
----

//////////////////////////
The Git class has a nice set of high-level _builder_-style methods that can be used to construct some pretty complex behavior.
Let's take a look at an example -- doing something like `git ls-remote`:
//////////////////////////
Gitクラスは、洗練された高レベルの _builder_ スタイルのメソッドを備えています。これは、非常に複雑な処理を組み立てる際に利用できます。 
それでは例を見てみましょう。ここでは `git ls-remote` のような処理を行っています。

[source,java]
----
CredentialsProvider cp = new UsernamePasswordCredentialsProvider("username", "p4ssw0rd");
Collection<Ref> remoteRefs = git.lsRemote()
    .setCredentialsProvider(cp)
    .setRemote("origin")
    .setTags(true)
    .setHeads(false)
    .call();
for (Ref ref : remoteRefs) {
    System.out.println(ref.getName() + " -> " + ref.getObjectId().name());
}
----

//////////////////////////
This is a common pattern with the Git class; the methods return a command object that lets you chain method calls to set parameters, which are executed when you call `.call()`.
In this case, we're asking the `origin` remote for tags, but not heads.
Also notice the use of a `CredentialsProvider` object for authentication.
//////////////////////////
これはGitクラスを使うときによくあるパターンです。メソッドがコマンドオブジェクトを返すので、パラメータを設定するメソッドチェーンを繋げていき、最後に `.call()` メソッドを呼び出すとそれらがまとめて実行されます。
このケースでは、タグを取得する際に、HEADではなく`origin`リモートを要求しています。
また、`CredentialsProvider` オブジェクトを使って認証を行っていることにも注意してください。

//////////////////////////
Many other commands are available through the Git class, including but not limited to `add`, `blame`, `commit`, `clean`, `push`, `rebase`, `revert`, and `reset`.
//////////////////////////
Gitクラスからは `add`、`blame`、`commit`、`clean`、`push`、`rebase`、`revert`、`reset` を含め、他にも多くのコマンドが使用できます。 

//////////////////////////
==== Further Reading
//////////////////////////
==== 参考文献

//////////////////////////
This is only a small sampling of JGit's full capabilities.
If you're interested and want to learn more, here's where to look for information and inspiration:
//////////////////////////
この節で示したのは、JGitの機能のごく一部です。
興味が湧いた、もっと知りたいということなら、情報は次の場所から探せます。

//////////////////////////
* The official JGit API documentation can be found at https://www.eclipse.org/jgit/documentation[].
  These are standard Javadoc, so your favorite JVM IDE will be able to install them locally, as well.
* The JGit Cookbook at https://github.com/centic9/jgit-cookbook[] has many examples of how to do specific tasks with JGit.
//////////////////////////
* オフィシャルなJGit APIドキュメントは http://download.eclipse.org/jgit/docs/latest/apidocs[] で参照できます。
標準的なJavadocなので、ローカルにインストールして、好きなJVM IDEから参照することもできます。
* JGit Cookbook (https://github.com/centic9/jgit-cookbook[]) には、特定の作業をJGitでどうやるかのサンプルプログラムが数多くあります。
* http://stackoverflow.com/questions/6861881[] で、優れたリソースへのポインタがいくつか示されています。
