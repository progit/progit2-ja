//////////////////////////
=== Libgit2
//////////////////////////
=== Libgit2を使う方法

(((libgit2)))((("C")))
//////////////////////////
Another option at your disposal is to use Libgit2.
Libgit2 is a dependency-free implementation of Git, with a focus on having a nice API for use within other programs.
You can find it at https://libgit2.org[].
//////////////////////////
あなたが取れる2つ目のオプションは、Libgit2を使用することです。
Libgit2は、他のプログラムへの依存性のないGitの実装であり、プログラムから使いやすいAPIを提供することにフォーカスしています。
Libgit2は http://libgit2.github.com[] から取得できます。

//////////////////////////
First, let's take a look at what the C API looks like.
Here's a whirlwind tour:
//////////////////////////
まずは、C言語用のAPIがどのようなものか見てみましょう。
ここは駆け足で行きます。

[source,c]
//////////////////////////
----
// Open a repository
git_repository *repo;
int error = git_repository_open(&repo, "/path/to/repository");

// Dereference HEAD to a commit
git_object *head_commit;
error = git_revparse_single(&head_commit, repo, "HEAD^{commit}");
git_commit *commit = (git_commit*)head_commit;

// Print some of the commit's properties
printf("%s", git_commit_message(commit));
const git_signature *author = git_commit_author(commit);
printf("%s <%s>\n", author->name, author->email);
const git_oid *tree_id = git_commit_tree_id(commit);

// Cleanup
git_commit_free(commit);
git_repository_free(repo);
----
//////////////////////////
-----
// リポジトリを開く
git_repository *repo;
int error = git_repository_open(&repo, "/path/to/repository");

// HEADへの参照を解決してコミットを取得
git_object *head_commit;
error = git_revparse_single(&head_commit, repo, "HEAD^{commit}");
git_commit *commit = (git_commit*)head_commit;

// コミットのプロパティのうちいくつかを出力
printf("%s", git_commit_message(commit));
const git_signature *author = git_commit_author(commit);
printf("%s <%s>\n", author->name, author->email);
const git_oid *tree_id = git_commit_tree_id(commit);

// クリーンアップ
git_commit_free(commit);
git_repository_free(repo);
-----

//////////////////////////
The first couple of lines open a Git repository.
The `git_repository` type represents a handle to a repository with a cache in memory.
This is the simplest method, for when you know the exact path to a repository's working directory or `.git` folder.
There's also the `git_repository_open_ext` which includes options for searching, `git_clone` and friends for making a local clone of a remote repository, and `git_repository_init` for creating an entirely new repository.
//////////////////////////
最初の2行で、Gitのリポジトリを開いています。
`git_repository` 型は、メモリにキャッシュされているリポジトリへのハンドルを表しています。
リポジトリの作業ディレクトリか、または `.git` フォルダの正確なパスが分かっている場合、これがリポジトリを開く最もシンプルな方法です。
他の方法としては、 `git_repository_open_ext` を使って検索オプション付きで開く方法、 `git_clone` とその仲間を使ってリモートリポジトリのローカルなクローンを作る方法、 `git_repository_init` を使って全く新規にリポジトリを作る方法があります。

//////////////////////////
The second chunk of code uses rev-parse syntax (see <<ch07-git-tools#_branch_references>> for more on this) to get the commit that HEAD eventually points to.
The type returned is a `git_object` pointer, which represents something that exists in the Git object database for a repository.
`git_object` is actually a ``parent'' type for several different kinds of objects; the memory layout for each of the ``child'' types is the same as for `git_object`, so you can safely cast to the right one.
In this case, `git_object_type(commit)` would return `GIT_OBJ_COMMIT`, so it's safe to cast to a `git_commit` pointer.
//////////////////////////
2番目のコードのかたまりは、 rev-parse 文法（詳細は <<ch07-git-tools#r_branch_references>> を参照）を使って、HEADが最終的に指しているコミットを取得しています。
戻り値は `git_object` 型のポインタで、これはリポジトリのGitオブジェクトデータベースに存在する何かを表しています。
`git_object` 型は、実際には数種類のオブジェクトの ``親'' にあたります。 ``子'' にあたる型のメモリレイアウトは `git_object` 型と同じになっているので、正しい型へのキャストは安全に行えます。
上記の場合では、 `git_object_type(commit)` が `GIT_OBJ_COMMIT` を返すので、 `git_commit` 型のポインタへ安全にキャストできます。

//////////////////////////
The next chunk shows how to access the commit's properties.
The last line here uses a `git_oid` type; this is Libgit2's representation for a SHA-1 hash.
//////////////////////////
次のかたまりは、コミットのプロパティにアクセスする方法を示しています。
ここの最後の行では `git_oid` 型を使用しています。これは、 Libgit2 において SHA-1 ハッシュを表現する型です。

//////////////////////////
From this sample, a couple of patterns have started to emerge:
//////////////////////////
このサンプルからは、いくつかのパターンが見て取れます。

//////////////////////////
* If you declare a pointer and pass a reference to it into a Libgit2 call, that call will probably return an integer error code.
  A `0` value indicates success; anything less is an error.
* If Libgit2 populates a pointer for you, you're responsible for freeing it.
* If Libgit2 returns a `const` pointer from a call, you don't have to free it, but it will become invalid when the object it belongs to is freed.
* Writing C is a bit painful.
//////////////////////////
* ポインタを宣言して、 Libgit2 の呼び出しにそのポインタへの参照を渡すと、その呼び出しは多くの場合 int 型のエラーコードを返す。
  値 `0` は成功を表す。それより小さい値はエラーを表す。
* Libgit2 がポインタへ値を入れて返したら、解放は自前で行わなければならない。
* Libgit2 の呼び出しが `const` ポインタを返した場合、開放する必要はない。ただし、それがそれが属するオブジェクトが解放されたら、ポインタは無効になる。
* Cでコードを書くのはちょっとキツい。

(((Ruby)))
//////////////////////////
That last one means it isn't very probable that you'll be writing C when using Libgit2.
Fortunately, there are a number of language-specific bindings available that make it fairly easy to work with Git repositories from your specific language and environment.
Let's take a look at the above example written using the Ruby bindings for Libgit2, which are named Rugged, and can be found at https://github.com/libgit2/rugged[].
//////////////////////////
最後の1つは、 Libgit2 を使用するときに、C言語でコードを書こうということはまずないだろう、というくらいの意味です。
幸いなことに、様々な言語用のバインディングが利用可能です。これを使えば、あなたの使っている特定の言語や環境から、Gitリポジトリに対する作業を非常に簡単に行えます。
Libgit2 の Ruby 向けバインディングを使って上記の例を書いたものを見てみましょう。Libgit2 の Ruby 向けバインディングは Rugged という名前で、 https://github.com/libgit2/rugged[] から取得できます。

[source,ruby]
----
repo = Rugged::Repository.new('path/to/repository')
commit = repo.head.target
puts commit.message
puts "#{commit.author[:name]} <#{commit.author[:email]}>"
tree = commit.tree
----

//////////////////////////
As you can see, the code is much less cluttered.
Firstly, Rugged uses exceptions; it can raise things like `ConfigError` or `ObjectError` to signal error conditions.
Secondly, there's no explicit freeing of resources, since Ruby is garbage-collected.
Let's take a look at a slightly more complicated example: crafting a commit from scratch
//////////////////////////
ご覧のように、コードがだいぶすっきりしました。
第一に、 Rugged は例外を使用します。エラーの状態を知らせるのに、 `ConfigError` や `ObjectError` のような例外を raise できます。
第二に、リソースの明示的な解放処理がありません。これは、 Ruby がガベージコレクションをしてくれるためです。 
それではもう少し複雑な例を見てみましょう。次の例では、コミットをゼロから作成しています。

[source,ruby]
----
blob_id = repo.write("Blob contents", :blob) # <1>

index = repo.index
index.read_tree(repo.head.target.tree)
index.add(:path => 'newfile.txt', :oid => blob_id) # <2>

sig = {
    :email => "bob@example.com",
    :name => "Bob User",
    :time => Time.now,
}

commit_id = Rugged::Commit.create(repo,
    :tree => index.write_tree(repo), # <3>
    :author => sig,
    :committer => sig, # <4>
    :message => "Add newfile.txt", # <5>
    :parents => repo.empty? ? [] : [ repo.head.target ].compact, # <6>
    :update_ref => 'HEAD', # <7>
)
commit = repo.lookup(commit_id) # <8>
----

//////////////////////////
<1> Create a new blob, which contains the contents of a new file.
<2> Populate the index with the head commit's tree, and add the new file at the path `newfile.txt`.
<3> This creates a new tree in the ODB, and uses it for the new commit.
<4> We use the same signature for both the author and committer fields.
<5> The commit message.
<6> When creating a commit, you have to specify the new commit's parents.
    This uses the tip of HEAD for the single parent.
<7> Rugged (and Libgit2) can optionally update a reference when making a commit.
<8> The return value is the SHA-1 hash of a new commit object, which you can then use to get a `Commit` object.
//////////////////////////
<1> 新しいファイルの内容を含む新しい blob を作成します。
<2> インデックスとHEADのコミットのツリーを取得し、パス `newfile.txt` にある新しいファイルを追加します。
<3> ODBに新しいツリーを作成し、それを新しいコミット用に使用しています。
<4> author フィールドと committer フィールドに同じ署名を使います。
<5> コミットメッセージです。
<6> コミットを作成するときには、新しいコミットの親を指定する必要があります。
    ここではHEADの先端を単一の親として指定しています。
<7> Rugged （およびLibgit2）では、コミットを作成する際に、必要に応じて参照を更新することもできます。
<8> 戻り値は新しいコミットオブジェクトの SHA-1 ハッシュです。これは後で `Commit` オブジェクトを取得するために使用できます。

//////////////////////////
The Ruby code is nice and clean, but since Libgit2 is doing the heavy lifting, this code will run pretty fast, too.
If you're not a rubyist, we touch on some other bindings in <<_libgit2_bindings>>.
//////////////////////////
このRubyのコードは単純明快です。また、重い処理はLibgit2が行っているので、非常に高速に実行できます。
Rubyist でない方のために、 <<r_libgit2_bindings>> では他のバインディングにも触れています。


//////////////////////////
==== Advanced Functionality
//////////////////////////
==== 高度な機能

//////////////////////////
Libgit2 has a couple of capabilities that are outside the scope of core Git.
One example is pluggability: Libgit2 allows you to provide custom ``backends'' for several types of operation, so you can store things in a different way than stock Git does.
Libgit2 allows custom backends for configuration, ref storage, and the object database, among other things.
//////////////////////////
Libgit2 には、Git のコアがスコープ外としている機能がいくつか備わっています。
一つの例がプラグイン機能です。 Libgit2 では、一部の機能に対し、カスタム ``バックエンド'' を指定できます。これにより、Git が行うのとは別の方法でデータを保存することができます。
Libgit2 では設定、refストレージ、オブジェクトデータベースなどに対してカスタムバックエンドを指定できます。

//////////////////////////
Let's take a look at how this works.
The code below is borrowed from the set of backend examples provided by the Libgit2 team (which can be found at https://github.com/libgit2/libgit2-backends[]).
Here's how a custom backend for the object database is set up:
//////////////////////////
バックエンドがどのように機能するか見てみましょう。
次のコードは、Libgit2チームが提供しているサンプル（ https://github.com/libgit2/libgit2-backends[] から取得できます）から拝借しています。
オブジェクトデータベース用のカスタムバックエンドを設定する方法を示しています。

[source,c]
----
git_odb *odb;
int error = git_odb_new(&odb); // <1>

git_odb_backend *my_backend;
error = git_odb_backend_mine(&my_backend, /*…*/); // <2>

error = git_odb_add_backend(odb, my_backend, 1); // <3>

git_repository *repo;
error = git_repository_open(&repo, "some-path");
error = git_repository_set_odb(repo, odb); // <4>
----

//////////////////////////
_(Note that errors are captured, but not handled. We hope your code is better than ours.)_
//////////////////////////
_(ここで、エラーの捕捉はしていますが、エラー処理は行っていないことに注意してください。あなたのコードが私たちのものより優れていることを願っています。）_

//////////////////////////
<1> Initialize an empty object database (ODB) ``frontend,'' which will act as a container for the ``backends'' which are the ones doing the real work.
<2> Initialize a custom ODB backend.
<3> Add the backend to the frontend.
<4> Open a repository, and set it to use our ODB to look up objects.
//////////////////////////
<1> 空のオブジェクトデータベース(ODB) ``フロントエンド'' を初期化します。これは、実際の処理を行う ``バックエンド'' のコンテナとして機能します。
<2> カスタムODBバックエンドを初期化します。
<3> フロントエンドにバックエンドを追加します。
<4> リポジトリを開きます。作成したODBを、オブジェクトの検索に使うように設定します。

//////////////////////////
But what is this `git_odb_backend_mine` thing?
Well, that's the constructor for your own ODB implementation, and you can do whatever you want in there, so long as you fill in the `git_odb_backend` structure properly.
Here's what it _could_ look like:
//////////////////////////
さて、この `git_odb_backend_mine` というのは何でしょうか？
そう、これは自作のODB実装のコンストラクタです。この中では、 `git_odb_backend` 構造体へ適切に値を設定しさえしていれば、どんな処理でも行えます。
処理は _例えば_ 以下のようになります。

[source,c]
----
typedef struct {
    git_odb_backend parent;

    // Some other stuff
    void *custom_context;
} my_backend_struct;

int git_odb_backend_mine(git_odb_backend **backend_out, /*…*/)
{
    my_backend_struct *backend;

    backend = calloc(1, sizeof (my_backend_struct));

    backend->custom_context = …;

    backend->parent.read = &my_backend__read;
    backend->parent.read_prefix = &my_backend__read_prefix;
    backend->parent.read_header = &my_backend__read_header;
    // …

    *backend_out = (git_odb_backend *) backend;

    return GIT_SUCCESS;
}
----

//////////////////////////
The subtlest constraint here is that `my_backend_struct`'s first member must be a `git_odb_backend` structure; this ensures that the memory layout is what the Libgit2 code expects it to be.
The rest of it is arbitrary; this structure can be as large or small as you need it to be.
//////////////////////////
ここで、非常に分かりにくい制約として、 `my_backend_struct` の最初のメンバ変数は `git_odb_backend` 構造体である必要があります。これによって、Libgit2 のコードが期待している通りのメモリレイアウトになることが保証されます。
構造体の残りの部分は任意です。この構造体は必要に合わせて大きくしたり小さくしたりして構いません。

//////////////////////////
The initialization function allocates some memory for the structure, sets up the custom context, and then fills in the members of the `parent` structure that it supports.
Take a look at the `include/git2/sys/odb_backend.h` file in the Libgit2 source for a complete set of call signatures; your particular use case will help determine which of these you'll want to support.
//////////////////////////
この初期化関数では、構造体にメモリを割り当て、カスタムコンテキストを設定し、それがサポートしている `parent` 構造体のメンバーへデータを設定しています。
その他の呼び出しのシグネチャについては、Libgit2のソースの `include/git2/sys/odb_backend.h` ファイルを見てみてください。ユースケースがはっきりしていれば、シグネチャのうちどれをサポートすればよいかを判断するのに役立つでしょう。

[[_libgit2_bindings]]
//////////////////////////
==== Other Bindings
//////////////////////////
==== その他のバインディング

//////////////////////////
Libgit2 has bindings for many languages.
Here we show a small example using a few of the more complete bindings packages as of this writing; libraries exist for many other languages, including C++, Go, Node.js, Erlang, and the JVM, all in various stages of maturity.
The official collection of bindings can be found by browsing the repositories at https://github.com/libgit2[].
The code we'll write will return the commit message from the commit eventually pointed to by HEAD (sort of like `git log -1`).
//////////////////////////
Libgit2 には各種の言語向けのバインディングがあります。
ここでは、これを書いている時点で利用できるバインディングの中から、その一部を使用して、小さなサンプルプログラムを示していきます。他にも、C++、Go、Node.js、Erlang、JVMなど多くの言語向けのライブラリがあり、成熟度合いも様々です。
バインディングの公式なコレクションは、 https://github.com/libgit2[] にあるリポジトリを探せば見つかります。
以降で示すコードはいずれも、最終的にHEADが指しているコミットのコミットメッセージを返します(`git log -1` のようなものです)。 


===== LibGit2Sharp

(((.NET)))(((C#)))(((Mono)))
//////////////////////////
If you're writing a .NET or Mono application, LibGit2Sharp (https://github.com/libgit2/libgit2sharp[]) is what you're looking for.
The bindings are written in C#, and great care has been taken to wrap the raw Libgit2 calls with native-feeling CLR APIs.
Here's what our example program looks like:
//////////////////////////
.NET や Mono でアプリケーションを書いているなら、 LibGit2Sharp (https://github.com/libgit2/libgit2sharp[]) をお探しでしょう。
バインディングは C# で書かれていて、生の Libgit2 の呼び出しを、ネイティブ感のある CLR API でラップすることに細心の注意が払われています。
サンプルプログラムは次のようになります。

[source,csharp]
----
new Repository(@"C:\path\to\repo").Head.Tip.Message;
----

//////////////////////////
For desktop Windows applications, there's even a NuGet package that will help you get started quickly.
//////////////////////////
Windows向けのデスクトップアプリケーション向けにはNuGetパッケージもあります。これは、すぐに作業を始めようという時に役立ちます。

===== objective-git

(((Apple)))(((Objective-C)))(((Cocoa)))
//////////////////////////
If your application is running on an Apple platform, you're likely using Objective-C as your implementation language.
Objective-Git (https://github.com/libgit2/objective-git[]) is the name of the Libgit2 bindings for that environment.
The example program looks like this:
//////////////////////////
Apple のプラットフォーム向けのアプリケーションを書いているなら、おそらく実装には Objective-C を使用しているものと思います。
Objective-Git (https://github.com/libgit2/objective-git[]) は、そういった環境向けの Libgit2 のバインディングです。
サンプルプログラムは次のようになります。

[source,objc]
----
GTRepository *repo =
    [[GTRepository alloc] initWithURL:[NSURL fileURLWithPath: @"/path/to/repo"] error:NULL];
NSString *msg = [[[repo headReferenceWithError:NULL] resolvedTarget] message];
----

//////////////////////////
Objective-git is fully interoperable with Swift, so don't fear if you've left Objective-C behind.
//////////////////////////
Objective-git は Swift に対しても完全な相互運用性があるので、 Objective-C を捨てたとしても怖くありません。


===== pygit2

(((Python)))
//////////////////////////
The bindings for Libgit2 in Python are called Pygit2, and can be found at http://www.pygit2.org/[].
Our example program:
//////////////////////////
Libgit2 の Python 向けバインディングは Pygit2 という名前で、 http://www.pygit2.org/[] から取得できます。
サンプルプログラムは次のようになります。

[source,python]
//////////////////////////
----
pygit2.Repository("/path/to/repo") # open repository
    .head                          # get the current branch
    .peel(pygit2.Commit)           # walk down to the commit
    .message                       # read the message
----
//////////////////////////
----
pygit2.Repository("/path/to/repo") # リポジトリを開く
    .head                          # 現在のブランチを取得
    .peel(pygit2.Commit)           # HEADが指すコミットまで移動
    .message                       # メッセージを読む
----


//////////////////////////
==== Further Reading
//////////////////////////
==== 参考文献

//////////////////////////
Of course, a full treatment of Libgit2's capabilities is outside the scope of this book.
If you want more information on Libgit2 itself, there's API documentation at https://libgit2.github.com/libgit2[], and a set of guides at https://libgit2.github.com/docs[].
For the other bindings, check the bundled README and tests; there are often small tutorials and pointers to further reading there.
//////////////////////////
もちろん、 Libgit2 の機能の扱い方すべてを取り上げるのは、本書の範囲外です。 
Libgit2 自体についてより多くの情報が必要な場合は、 API ドキュメントが https://libgit2.github.com/libgit2[] にあります。また、ガイドが https://libgit2.github.com/docs[] にあります。
他のバインディングについては、同梱されている README やテストを見てみてください。ちょっとしたチュートリアルや、参考文献へのポインタが書かれていることがあります。
