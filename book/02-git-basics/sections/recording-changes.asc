//////////////////////////
=== Recording Changes to the Repository
//////////////////////////
=== 変更内容のリポジトリへの記録

//////////////////////////
You have a bona fide Git repository and a checkout or working copy of the files for that project.
You need to make some changes and commit snapshots of those changes into your repository each time the project reaches a state you want to record.
//////////////////////////
これで、れっきとした Git リポジトリを準備して、そのプロジェクト内のファイルの作業コピーを取得することができました。
次は、そのコピーに対して何らかの変更を行い、適当な時点で変更内容のスナップショットをリポジトリにコミットすることになります。

//////////////////////////
Remember that each file in your working directory can be in one of two states: tracked or untracked.
Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged.
Untracked files are everything else – any files in your working directory that were not in your last snapshot and are not in your staging area.
When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven't edited anything.
//////////////////////////
作業コピー内の各ファイルには追跡されている(tracked)ものと追跡されてない(untracked)ものの二通りがあることを知っておきましょう。
追跡されているファイルとは、直近のスナップショットに存在したファイルのことです。これらのファイルについては変更されていない(unmodified)」「変更されている(modified)」「ステージされている(staged)」の三つの状態があります。
追跡されていないファイルは、そのどれでもありません。直近のスナップショットには存在せず、ステージングエリアにも存在しないファイルのことです。
最初にプロジェクトをクローンした時点では、すべてのファイルは「追跡されている」かつ「変更されていない」状態となります。チェックアウトしただけで何も編集していない状態だからです。

//////////////////////////
As you edit files, Git sees them as modified, because you've changed them since your last commit.
You stage these modified files and then commit all your staged changes, and the cycle repeats.
//////////////////////////
ファイルを編集すると、Git はそれを「変更された」とみなします。直近のコミットの後で変更が加えられたからです。変更されたファイルをステージし、それをコミットする。この繰り返しです。


//////////////////////////
.The lifecycle of the status of your files.
image::images/lifecycle.png[The lifecycle of the status of your files.]
//////////////////////////
.ファイルの状態の流れ
image::images/lifecycle.png[ファイルの状態の流れ]

[[r_checking_status]]
//////////////////////////
==== Checking the Status of Your Files
//////////////////////////
==== ファイルの状態の確認

//////////////////////////
The main tool you use to determine which files are in which state is the `git status` command.(((git commands, status)))
If you run this command directly after a clone, you should see something like this:
//////////////////////////
どのファイルがどの状態にあるのかを知るために主に使うツールが `git status` コマンドです。(((git commands, status)))
このコマンドをクローン直後に実行すると、このような結果となるでしょう。

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

//////////////////////////
This means you have a clean working directory – in other words, there are no tracked and modified files.
Git also doesn't see any untracked files, or they would be listed here.
Finally, the command tells you which branch you're on and informs you that it has not diverged from the same branch on the server.
For now, that branch is always ``master'', which is the default; you won't worry about it here.
<<ch03-git-branching#ch03-git-branching>> will go over branches and references in detail.
//////////////////////////
これは、クリーンな作業コピーである (つまり、追跡されているファイルの中に変更されているものがない) ことを意味します。
また、追跡されていないファイルも存在しません (もし追跡されていないファイルがあれば、Git はそれを表示します)。
最後に、このコマンドを実行するとあなたが今どのブランチにいるのか、サーバー上の同一ブランチから分岐してしまっていないかどうかがわかります。
現時点では常に ``master'' となります。これはデフォルトであり、ここでは特に気にする必要はありません。
ブランチについては <<ch03-git-branching#ch03-git-branching>> で詳しく説明します。

//////////////////////////
Let's say you add a new file to your project, a simple README file.
If the file didn't exist before, and you run `git status`, you see your untracked file like so:
//////////////////////////
ではここで、新しいファイルをプロジェクトに追加してみましょう。シンプルに、READMEファイルを追加してみます。
それ以前に README ファイルがなかった場合、`git status` を実行すると次のように表示されます。

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

//////////////////////////
You can see that your new README file is untracked, because it's under the ``Untracked files'' heading in your status output.
Untracked basically means that Git sees a file you didn't have in the previous snapshot (commit); Git won't start including it in your commit snapshots until you explicitly tell it to do so.
It does this so you don't accidentally begin including generated binary files or other files that you did not mean to include.
You do want to start including README, so let's start tracking the file.
//////////////////////////
出力結果の ``Untracked files'' 欄にREADMEファイルがあることから、このファイルが追跡されていないということがわかります。
これは、Git が「前回のスナップショット (コミット) にはこのファイルが存在しなかった」とみなしたということです。明示的に指示しない限り、Git はコミット時にこのファイルを含めることはありません。
自動生成されたバイナリファイルなど、コミットしたくないファイルを間違えてコミットしてしまう心配はないということです。
今回は README をコミットに含めたいわけですから、まずファイルを追跡対象に含めるようにしましょう。

[[r_tracking_files]]
//////////////////////////
==== Tracking New Files
//////////////////////////
==== 新しいファイルの追跡

//////////////////////////
In order to begin tracking a new file, you use the command `git add`.(((git commands, add)))
To begin tracking the README file, you can run this:
//////////////////////////
新しいファイルの追跡を開始するには `git add` コマンドを使用します。(((git commands, add)))
READMEファイルの追跡を開始する場合はこのようになります。

[source,console]
----
$ git add README
----

//////////////////////////
If you run your status command again, you can see that your README file is now tracked and staged to be committed:
//////////////////////////
再び status コマンドを実行すると、READMEファイルが追跡対象となってステージされており、コミットする準備ができていることがわかるでしょう。

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

//////////////////////////
You can tell that it's staged because it's under the ``Changes to be committed'' heading.
If you commit at this point, the version of the file at the time you ran `git add` is what will be in the historical snapshot.
You may recall that when you ran `git init` earlier, you then ran `git add (files)` – that was to begin tracking files in your directory.(((git commands, init)))(((git commands, add)))
The `git add` command takes a path name for either a file or a directory; if it's a directory, the command adds all the files in that directory recursively.
//////////////////////////
ステージされていると判断できるのは、 ``Changes to be committed'' 欄に表示されているからです。
ここでコミットを行うと、`git add` した時点の状態のファイルがスナップショットとして歴史に書き込まれます。
先ほど `git init` をしたときに、ディレクトリ内のファイルを追跡するためにその後 `git add (ファイル)` としたことを思い出すことでしょう。(((git commands, init)))(((git commands, add)))
`git add` コマンドには、ファイルあるいはディレクトリのパスを指定します。ディレクトリを指定した場合は、そのディレクトリ以下にあるすべてのファイルを再帰的に追加します。

//////////////////////////
==== Staging Modified Files
//////////////////////////
==== 変更したファイルのステージング

//////////////////////////
Let's change a file that was already tracked.
If you change a previously tracked file called `CONTRIBUTING.md` and then run your `git status` command again, you get something that looks like this:
//////////////////////////
すでに追跡対象となっているファイルを変更してみましょう。
たとえば、すでに追跡対象となっているファイル `CONTRIBUTING.md` を変更して `git status` コマンドを実行すると、結果はこのようになります。

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

//////////////////////////
The `CONTRIBUTING.md` file appears under a section named ``Changes not staged for commit'' – which means that a file that is tracked has been modified in the working directory but not yet staged.
To stage it, you run the `git add` command.
`git add` is a multipurpose command – you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved.
It may be helpful to think of it more as ``add this content to the next commit'' rather than ``add this file to the project''.(((git commands, add)))
Let's run `git add` now to stage the `CONTRIBUTING.md` file, and then run `git status` again:
//////////////////////////
`CONTRIBUTING.md` ファイルは ``Changed but not staged for commit'' という欄に表示されます。これは、追跡対象のファイルが作業ディレクトリ内で変更されたけれどもまだステージされていないという意味です。
ステージするには `git add` コマンドを実行します。 `git add` にはいろんな意味合いがあり、新しいファイルの追跡開始・ファイルのステージング・マージ時に衝突が発生したファイルに対する「解決済み」マーク付けなどで使用します。``指定したファイルをプロジェクトに追加(add)する''コマンド、というよりは、``指定した内容を次のコミットに追加(add)する''コマンド、と捉えるほうがわかりやすいかもしれません。(((git commands, add)))
では、`git add` で `CONTRIBUTING.md` をステージしてもういちど `git status` を実行してみましょう。

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

//////////////////////////
Both files are staged and will go into your next commit.
At this point, suppose you remember one little change that you want to make in `CONTRIBUTING.md` before you commit it.
You open it again and make that change, and you're ready to commit.
However, let's run `git status` one more time:
//////////////////////////
両方のファイルがステージされました。これで、次回のコミットに両方のファイルが含まれるようになります。
ここで、さらに `CONTRIBUTING.md` にちょっとした変更を加えてからコミットしたくなったとしましょう。
ファイルを開いて変更を終え、コミットの準備が整いました。
しかし、`git status` を実行してみると何か変です。

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

//////////////////////////
What the heck?
Now `CONTRIBUTING.md` is listed as both staged _and_ unstaged.
How is that possible?
It turns out that Git stages a file exactly as it is when you run the `git add` command.
If you commit now, the version of `CONTRIBUTING.md` as it was when you last ran the `git add` command is how it will go into the commit, not the version of the file as it looks in your working directory when you run `git commit`.
If you modify a file after you run `git add`, you have to run `git add` again to stage the latest version of the file:
//////////////////////////
これはどういうことでしょう?
`CONTRIBUTING.md` が、ステージされているほうとステージされていないほうの_両方に_登場しています。
こんなことってありえるんでしょうか?
要するに、Git は「`git add` コマンドを実行した時点の状態のファイル」をステージするということです。
ここでコミットをすると、実際にコミットされるのは `git add` を実行した時点の `CONTRIBUTING.md` であり、`git commit` した時点の作業ディレクトリにある内容とは違うものになります。
`git add` した後にファイルを変更した場合に、最新版のファイルをステージしなおすにはもう一度 `git add` を実行します。

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

//////////////////////////
==== Short Status
//////////////////////////
==== 状態表示の簡略化

//////////////////////////
While the `git status` output is pretty comprehensive, it's also quite wordy.
Git also has a short status flag so you can see your changes in a more compact way.
If you run `git status -s` or `git status --short` you get a far more simplified output from the command:
//////////////////////////
`git status` の出力はとてもわかりやすいですが、一方で冗長でもあります。
Gitにはそれを簡略化するためのオプションもあり、変更点をより簡潔に確認できます。
`git status -s`や`git status --short`コマンドを実行して、簡略化された状態表示を見てみましょう。

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

//////////////////////////
New files that aren't tracked have a `??` next to them, new files that have been added to the staging area have an `A`, modified files have an `M` and so on.
There are two columns to the output - the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree.
So for example in that output, the `README` file is modified in the working directory but not yet staged, while the `lib/simplegit.rb` file is modified and staged.
The `Rakefile` was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.
//////////////////////////
まだ追跡されていない新しいファイルには`??`が、ステージングエリアに追加されたファイルには`A`が、変更されたファイルには`M`が、といったように、ファイル名の左側に文字列が表示されます。
内容は2文字の組み合わせです。1文字目はステージされたファイルの状態を、2文字はファイルが変更されたかどうかを示しています。
この例でいうと、`README`ファイルは作業ディレクトリ上にあって変更されているけれどステージされてはいません。
`lib/simplegit.rb`ファイルは変更済みでステージもされています。
`Rakefile`のほうはどうかというと、変更されステージされたあと、また変更された、という状態です。変更の内容にステージされたものとそうでないものがあることになります。

[[r_ignoring]]
//////////////////////////
==== Ignoring Files
//////////////////////////
==== ファイルの無視

//////////////////////////
Often, you'll have a class of files that you don't want Git to automatically add or even show you as being untracked.
These are generally automatically generated files such as log files or files produced by your build system.
In such cases, you can create a file listing patterns to match them named `.gitignore`.(((ignoring files)))
Here is an example `.gitignore` file:
//////////////////////////
ある種のファイルについては、Git で自動的に追加してほしくないしそもそも「追跡されていない」と表示されるのも気になってしまう。そんなことがよくあります。
たとえば、ログファイルやビルドシステムが生成するファイルなどの自動生成されるファイルがそれにあたるでしょう。
そんな場合は、無視させたいファイルのパターンを並べた `.gitignore` というファイルを作成します。(((ignoring files)))
`.gitignore` ファイルは、たとえばこのようになります。

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

//////////////////////////
The first line tells Git to ignore any files ending in ``.o'' or ``.a'' – object and archive files that may be the product of building your code.
The second line tells Git to ignore all files whose names end with a tilde (`~`), which is used by many text editors such as Emacs to mark temporary files.
You may also include a log, tmp, or pid directory; automatically generated documentation; and so on.
Setting up a `.gitignore` file before you get going is generally a good idea so you don't accidentally commit files that you really don't want in your Git repository.
//////////////////////////
最初の行は ``.o'' あるいは ``.a'' で終わる名前のファイル (コードをビルドする際にできるであろうオブジェクトファイルとアーカイブファイル) を無視するよう Git に伝えています。次の行で Git に無視させているのは、チルダ (`~`) で終わる名前のファイルです。Emacs をはじめとする多くのエディタが、この形式の一時ファイルを作成します。これ以外には、たとえば log、tmp、pid といった名前のディレクトリや自動生成されるドキュメントなどもここに含めることになるでしょう。実際に作業を始める前に `.gitignore` ファイルを準備しておくことをお勧めします。そうすれば、予期せぬファイルを間違って Git リポジトリにコミットしてしまう事故を防げます。

//////////////////////////
The rules for the patterns you can put in the `.gitignore` file are as follows:
//////////////////////////
`.gitignore` ファイルに記述するパターンの規則は、次のようになります。

//////////////////////////
*  Blank lines or lines starting with `#` are ignored.
*  Standard glob patterns work.
*  You can start patterns with a forward slash (`/`) to avoid recursivity.
*  You can end patterns with a forward slash (`/`) to specify a directory.
*  You can negate a pattern by starting it with an exclamation point (`!`).
//////////////////////////
*  空行あるいは `#` で始まる行は無視される
*  標準の glob パターンを使用可能
*  再帰を避けるためには、パターンの最初にスラッシュ (`/`) をつける
*  ディレクトリを指定するには、パターンの最後にスラッシュ (`/`) をつける
*  パターンを逆転させるには、最初に感嘆符 (`!`) をつける

//////////////////////////
Glob patterns are like simplified regular expressions that shells use.
An asterisk (`*`) matches zero or more characters; `[abc]` matches any character inside the brackets (in this case a, b, or c); a question mark (`?`) matches a single character; and brackets enclosing characters separated by a hyphen(`[0-9]`) matches any character between them (in this case 0 through 9).
You can also use two asterisks to match nested directories; `a/**/z` would match `a/z`, `a/b/z`, `a/b/c/z`, and so on.
//////////////////////////
glob パターンとは、シェルで用いる簡易正規表現のようなものです。
アスタリスク (`*`) は、ゼロ個以上の文字にマッチします。
`[abc]` は、角括弧内の任意の文字 (この場合は a、b あるいは c) にマッチします。
疑問符 (`?`) は一文字にマッチします。
また、ハイフン区切りの文字を角括弧で囲んだ形式 (`[0-9]`) は、
ふたつの文字の間の任意の文字 (この場合は 0 から 9 までの間の文字) にマッチします。
アスタリクスを2つ続けて、ネストされたディレクトリにマッチさせることもできます。
`a/**/z` のように書けば、`a/z`、`a/b/z`、`a/b/c/z`などにマッチします。

//////////////////////////
Here is another example .gitignore file:
//////////////////////////
では、`.gitignore` ファイルの例をもうひとつ見てみましょう。

[source]
----
# no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory
doc/**/*.pdf
----

[TIP]
//////////////////////////
====
GitHub maintains a fairly comprehensive list of good `.gitignore` file examples for dozens of projects and languages at https://github.com/github/gitignore[] if you want a starting point for your project.
====
//////////////////////////
====
GitHubが管理している `.gitignore` ファイルのサンプル集 https://github.com/github/gitignore[] はよくまとまっていて、多くのプロジェクト・言語で使えます。
プロジェクトを始めるときのとっかかりになるでしょう。
====

[[r_git_diff_staged]]
//////////////////////////
==== Viewing Your Staged and Unstaged Changes
//////////////////////////
==== ステージされている変更 / されていない変更の閲覧

//////////////////////////
If the `git status` command is too vague for you – you want to know exactly what you changed, not just which files were changed – you can use the `git diff` command.(((git commands, diff)))
We'll cover `git diff` in more detail later, but you'll probably use it most often to answer these two questions: What have you changed but not yet staged?
And what have you staged that you are about to commit?
Although `git status` answers those questions very generally by listing the file names, `git diff` shows you the exact lines added and removed – the patch, as it were.
//////////////////////////
`git status` コマンドだけではよくわからない
（どのファイルが変更されたのかだけではなく、実際にどのように変わったのかが知りたい）
という場合は `git diff` コマンドを使用します。(((git commands, diff)))
`git diff` コマンドについては後で詳しく解説します。
おそらく、最もよく使う場面としては次の二つの問いに答えるときになるでしょう。
「変更したけどまだステージしていない変更は?」「コミット対象としてステージした変更は?」
`git status` が出力するファイル名のリストを見れば、
これらの質問に対するおおまかな答えは得られますが、
`git diff` の場合は追加したり削除したりした正確な行をパッチ形式で表示します。

//////////////////////////
Let's say you edit and stage the `README` file again and then edit the `CONTRIBUTING.md` file without staging it.
If you run your `git status` command, you once again see something like this:
//////////////////////////
先ほどの続きで、ふたたび `README` ファイルを編集してステージし、
一方 `CONTRIBUTING.md` ファイルは編集だけしてステージしない状態にあると仮定しましょう。
ここで `git status` コマンドを実行すると、次のような結果となります。

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//////////////////////////
To see what you've changed but not yet staged, type `git diff` with no other arguments:
//////////////////////////
変更したけれどもまだステージしていない内容を見るには、引数なしで `git diff` を実行します。

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

//////////////////////////
That command compares what is in your working directory with what is in your staging area.
The result tells you the changes you've made that you haven't yet staged.
//////////////////////////
このコマンドは、作業ディレクトリの内容とステージングエリアの内容を比較します。
この結果を見れば、あなたが変更した内容のうちまだステージされていないものを知ることができます。

//////////////////////////
If you want to see what you've staged that will go into your next commit, you can use `git diff --staged`.
This command compares your staged changes to your last commit:
//////////////////////////
次のコミットに含めるべくステージされた内容を知りたい場合は、`git diff --staged` を使用します。
このコマンドは、ステージされている変更と直近のコミットの内容を比較します。

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

//////////////////////////
It's important to note that `git diff` by itself doesn't show all changes made since your last commit – only changes that are still unstaged.
This can be confusing, because if you've staged all of your changes, `git diff` will give you no output.
//////////////////////////
`git diff` 自体は、直近のコミット以降のすべての変更を表示するわけではないことに注意しましょう。
あくまでもステージされていない変更だけの表示となります。
これにはすこし戸惑うかもしれません。
変更内容をすべてステージしてしまえば `git diff` は何も出力しなくなるわけですから。

//////////////////////////
For another example, if you stage the `CONTRIBUTING.md` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged.
If our environment looks like this:
//////////////////////////
もうひとつの例を見てみましょう。`CONTRIBUTING.md` ファイルをいったんステージした後に編集してみましょう。
`git diff` を使用すると、ステージされたファイルの変更とまだステージされていないファイルの変更を見ることができます。以下のような状態だとすると、

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//////////////////////////
Now you can use `git diff` to see what is still unstaged:
//////////////////////////
`git diff` を使うことで、まだステージされていない内容を知ることができます。

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----


//////////////////////////
and `git diff --cached` to see what you've staged so far (`--staged` and `--cached` are synonyms):
//////////////////////////
そして `git diff --cached` を使うと、これまでにステージした内容を知ることができます（`--staged` と `--cached` は同義です）。

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
//////////////////////////
.Git Diff in an External Tool
====
We will continue to use the `git diff` command in various ways throughout the rest of the book.
There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead.
If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like emerge, vimdiff and many more (including commercial products).
Run `git difftool --tool-help` to see what is available on your system.
====
//////////////////////////
.GitのDiffを他のツールで見る
====
この本では、引き続き`git diff`コマンドを様々な方法で使っていきます。
一方、このコマンドを使わずに差分を見る方法も用意されています。GUIベースだったり、他のツールが好みの場合、役に立つでしょう。
`git diff`の代わりに`git difftool`を実行してください。そうすれば、emerge、vimdiffなどのツールを使って差分を見られます（商用のツールもいくつもあります）。
また、`git difftool --tool-help`を実行すれば、利用可能なdiffツールを確認することもできます。
====

[[r_committing_changes]]
//////////////////////////
==== Committing Your Changes
//////////////////////////
==== 変更のコミット

//////////////////////////
Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged – any files you have created or modified that you haven't run `git add` on since you edited them – won't go into this commit.
They will stay as modified files on your disk.
In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit`:(((git commands, commit)))
//////////////////////////
ステージングエリアの準備ができたら、変更内容をコミットすることができます。
コミットの対象となるのはステージされたものだけ、
つまり追加したり変更したりしただけでまだ `git add` を実行していないファイルはコミットされないことを覚えておきましょう。
そういったファイルは、変更されたままの状態でディスク上に残ります。
ここでは、最後に `git status` を実行したときにすべてがステージされていることを確認したとしましょう。つまり、変更をコミットする準備ができた状態です。(((git commands, status)))
コミットするための最もシンプルな方法は `git commit` と打ち込むことです。(((git commands, commit)))


[source,console]
----
$ git commit
----

//////////////////////////
Doing so launches your editor of choice.
(This is set by your shell's `$EDITOR` environment variable – usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<ch01-introduction#ch01-introduction>>).(((editor, changing default)))(((git commands, config)))
//////////////////////////
これを実行すると、指定したエディタが立ち上がります
（シェルの `$EDITOR` 環境変数で設定されているエディタ。
通常は vim あるいは emacs でしょう。しかし、
それ以外にも<<ch01-introduction#ch01-introduction>>で説明した `git config --global core.editor` コマンドで
お好みのエディタを指定することもできます）。(((editor, changing default)))(((git commands, config)))

//////////////////////////
The editor displays the following text (this example is a Vim screen):
//////////////////////////
エディタには次のようなテキストが表示されています (これは Vim の画面の例です)。


[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----


//////////////////////////
You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).
//////////////////////////
デフォルトのコミットメッセージとして、
直近の `git status` コマンドの結果がコメントアウトして表示され、
先頭に空行があることがわかるでしょう。
このコメントを消して自分でコミットメッセージを書き入れていくこともできますし、
何をコミットしようとしているのかの確認のためにそのまま残しておいてもかまいません 
(何を変更したのかをより明確に知りたい場合は、`git commit` に `-v` オプションを指定します。
そうすると、diff の内容がエディタに表示されるので何をコミットしようとしているかが正確にわかるようになります)。
エディタを終了させると、Git はそのメッセージつきのコミットを作成します
(コメントおよび diff は削除されます)。

//////////////////////////
Alternatively, you can type your commit message inline with the `commit` command by specifying it after a `-m` flag, like this:
//////////////////////////
あるいは、コミットメッセージをインラインで記述することもできます。その場合は、`commit` コマンドの後で `-m` フラグに続けて次のように記述します。

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

//////////////////////////
Now you've created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.
//////////////////////////
これではじめてのコミットができました! 
今回のコミットについて、
「どのブランチにコミットしたのか (`master`)」「そのコミットの SHA-1 チェックサム (`463dc4f`)」「変更されたファイルの数」「そのコミットで追加されたり削除されたりした行数」
といった情報が表示されているのがわかるでしょう。

//////////////////////////
Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.
//////////////////////////
コミットが記録するのは、ステージングエリアのスナップショットであることを覚えておきましょう。
ステージしていない情報については変更された状態のまま残っています。
別のコミットで歴史にそれを書き加えるには、改めて add する必要があります。
コミットするたびにプロジェクトのスナップショットが記録され、あとからそれを取り消したり参照したりできるようになります。

//////////////////////////
==== Skipping the Staging Area
//////////////////////////
==== ステージングエリアの省略

(((staging area, skipping)))
//////////////////////////
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:
//////////////////////////
コミットの内容を思い通りに作り上げることができるという点でステージングエリアは非常に便利なのですが、
普段の作業においては必要以上に複雑に感じられることもあるでしょう。
ステージングエリアを省略したい場合のために、Git ではシンプルなショートカットを用意しています。
`git commit` コマンドに `-a` オプションを指定すると、追跡対象となっているファイルを自動的にステージしてからコミットを行います。
つまり `git add` を省略できるというわけです。

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

//////////////////////////
Notice how you don't have to run `git add` on the `CONTRIBUTING.md` file in this case before you commit.
That's because the `-a` flag includes all changed files.
This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes.
//////////////////////////
この場合、コミットする前に `CONTRIBUTING.md` を `git add` する必要がないことに気づいたでしょうか。
`-a` というフラグのおかげで、変更したファイルがすべてコミットに含まれたからです。
このように `-a` は便利なフラグですが、ときには意図しない変更をコミットに含んでしまうことにもなりますので気をつけましょう。

[[r_removing_files]]
//////////////////////////
==== Removing Files
//////////////////////////
==== ファイルの削除

(((files, removing)))
//////////////////////////
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.
//////////////////////////
ファイルを Git から削除するには、追跡対象からはずし (より正確に言うとステージングエリアから削除し)、そしてコミットします。
`git rm` コマンドは、この作業を行い、そして作業ディレクトリからファイルを削除します。
つまり、追跡されていないファイルとして残り続けることはありません。

//////////////////////////
If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:
//////////////////////////
単に作業ディレクトリからファイルを削除しただけの場合は、`git status` の出力の中では ``Changed but not updated'' (つまり _ステージされていない_) 欄に表示されます。

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

//////////////////////////
Then, if you run `git rm`, it stages the file's removal:
//////////////////////////
`git rm` を実行すると、ファイルの削除がステージされます。

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

//////////////////////////
The next time you commit, the file will be gone and no longer tracked.
If you modified the file and added it to the index already, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.
//////////////////////////
次にコミットするときにファイルが削除され、追跡対象外となります。
変更したファイルをすでにステージしている場合は、`-f` オプションで強制的に削除しなければなりません。
まだスナップショットに記録されていないファイルを誤って削除してしまうと Git で復旧することができなくなってしまうので、それを防ぐための安全装置です。

//////////////////////////
Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:
//////////////////////////
ほかに「こんなことできたらいいな」と思われるであろう機能として、
ファイル自体は作業ツリーに残しつつステージングエリアからの削除だけを行うこともできます。
つまり、ハードディスク上にはファイルを残しておきたいけれど、もう Git では追跡させたくないというような場合のことです。
これが特に便利なのは、`.gitignore` ファイルに書き足すのを忘れたために巨大なログファイルや大量の `.a` ファイルがステージされてしまったなどというときです。
そんな場合は `--cached` オプションを使用します。

[source,console]
----
$ git rm --cached README
----

//////////////////////////
You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as:
//////////////////////////
ファイル名やディレクトリ名、そしてファイル glob パターンを `git rm` コマンドに渡すことができます。
つまり、このようなこともできるということです。

[source,console]
----
$ git rm log/\*.log
----

//////////////////////////
Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:
//////////////////////////
`*` の前にバックスラッシュ (`\`) があることに注意しましょう。
これが必要なのは、シェルによるファイル名の展開だけでなく Git が自前でファイル名の展開を行うからです。
このコマンドは、`log/` ディレクトリにある拡張子 `.log` のファイルをすべて削除します。
あるいは、このような書き方もできます。

[source,console]
----
$ git rm \*~
----

//////////////////////////
This command removes all files whose names end with a `~`.
//////////////////////////
このコマンドは、`~` で終わるファイル名のファイルをすべて削除します。

[[r_git_mv]]
//////////////////////////
==== Moving Files
//////////////////////////
==== ファイルの移動

(((files, moving)))
//////////////////////////
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.
//////////////////////////
他の多くの VCS とは異なり、Git はファイルの移動を明示的に追跡することはありません。
Git の中でファイル名を変更しても、「ファイル名を変更した」というメタデータは Git には保存されないのです。
しかし Git は賢いので、ファイル名が変わったことを知ることができます。ファイルの移動を検出する仕組みについては後ほど説明します。

//////////////////////////
Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like:
//////////////////////////
しかし Git には `mv` コマンドがあります。ちょっと混乱するかもしれませんね。
Git の中でファイル名を変更したい場合は次のようなコマンドを実行します。

[source,console]
----
$ git mv file_from file_to
----

//////////////////////////
and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:
//////////////////////////
このようなコマンドを実行してからステータスを確認すると、Git はそれをファイル名が変更されたと解釈していることがわかるでしょう。

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

//////////////////////////
However, this is equivalent to running something like this:
//////////////////////////
しかし、実際のところこれは、次のようなコマンドを実行するのと同じ意味となります。

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

//////////////////////////
Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `git mv` is one command instead of three – it's a convenience function.
More importantly, you can use any tool you like to rename a file, and address the add/rm later, before you commit.
//////////////////////////
Git はこれが暗黙的なファイル名の変更であると理解するので、この方法であろうが `mv` コマンドを使おうがどちらでもかまいません。
唯一の違いは、この方法だと 3 つのコマンドが必要になるかわりに `git mv` だとひとつのコマンドだけで実行できるという点です。
より重要なのは、ファイル名の変更は何でもお好みのツールで行えるということです。あとでコミットする前に add/rm を指示してやればいいのです。
