[[r_undoing]]
//////////////////////////
=== Undoing Things
//////////////////////////
=== 作業のやり直し

//////////////////////////
At any stage, you may want to undo something.
Here, we'll review a few basic tools for undoing changes that you've made.
Be careful, because you can't always undo some of these undos.
This is one of the few areas in Git where you may lose some work if you do it wrong.
//////////////////////////
どんな場面であっても、何かをやり直したくなることはあります。
ここでは、行った変更を取り消すための基本的なツールについて説明します。
注意点は、ここで扱う内容の中には「やり直しのやり直し」ができないものもあるということです。
Git で何か間違えたときに作業内容を失ってしまう数少ない例がここにあります。

//////////////////////////
One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message.
If you want to try that commit again, you can run commit with the `--amend` option:
//////////////////////////
やり直しを行う場面としてもっともよくあるのは、「コミットを早まりすぎて追加すべきファイルを忘れてしまった」「コミットメッセージが変になってしまった」などです。
そのコミットをもう一度やりなおす場合は、`--amend` オプションをつけてもう一度コミットします。

[source,console]
----
$ git commit --amend
----

//////////////////////////
This command takes your staging area and uses it for the commit.
If you've made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you'll change is your commit message.
//////////////////////////
このコマンドは、ステージングエリアの内容をコミットに使用します。
直近のコミット以降に何も変更をしていない場合 (たとえば、コミットの直後にこのコマンドを実行したような場合)、
スナップショットの内容はまったく同じでありコミットメッセージを変更することになります。

//////////////////////////
The same commit-message editor fires up, but it already contains the message of your previous commit.
You can edit the message the same as always, but it overwrites your previous commit.
//////////////////////////
コミットメッセージのエディタが同じように立ち上がりますが、既に前回のコミット時のメッセージが書き込まれた状態になっています。
ふだんと同様にメッセージを編集できますが、前回のコミット時のメッセージがその内容で上書きされます。

//////////////////////////
As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:
//////////////////////////
たとえば、いったんコミットした後、何かのファイルをステージするのを忘れていたのに気づいたとしましょう。そんな場合はこのようにします。

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

//////////////////////////
You end up with a single commit – the second commit replaces the results of the first.
//////////////////////////
最終的にできあがるのはひとつのコミットです。二番目のコミットが、最初のコミットの結果を上書きするのです。

[[r_unstaging]]
//////////////////////////
==== Unstaging a Staged File
//////////////////////////
==== ステージしたファイルの取り消し

//////////////////////////
The next two sections demonstrate how to wrangle your staging area and working directory changes.
The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them.
For example, let's say you've changed two files and want to commit them as two separate changes, but you accidentally type `git add *` and stage them both.
How can you unstage one of the two?
The `git status` command reminds you:
//////////////////////////
続くふたつのセクションでは、ステージングエリアと作業ディレクトリの変更に関する作業を扱います。
すばらしいことに、これらふたつの場所の状態を表示するコマンドを使用すると、変更内容を取り消す方法も同時に表示されます。
たとえば、ふたつのファイルを変更し、それぞれを別のコミットとするつもりだったのに間違えて `git add *` と打ち込んでしまったときのことを考えましょう。
ファイルが両方ともステージされてしまいました。
ふたつのうちの一方だけのステージを解除するにはどうすればいいでしょう? 
`git status` コマンドが教えてくれます。

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

//////////////////////////
Right below the ``Changes to be committed'' text, it says use `git reset HEAD <file>...` to unstage.
So, let's use that advice to unstage the `CONTRIBUTING.md` file:
//////////////////////////
``Changes to be committed'' の直後に、"use `git reset HEAD <file>...` to unstage" と書かれています。このアドバイスに従って、`CONTRIBUTING.md` ファイルのステージを解除してみましょう。

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//////////////////////////
The command is a bit strange, but it works.
The `CONTRIBUTING.md` file is modified but once again unstaged.
//////////////////////////
ちょっと奇妙に見えるコマンドですが、きちんと動作します。
`CONTRIBUTING.md` ファイルは、変更されたもののステージされていない状態に戻りました。

[NOTE]
//////////////////////////
=====
While `git reset` _can_ be a dangerous command if you call it with `--hard`, in this instance the file in your working directory is not touched.
Calling `git reset` without an option is not dangerous - it only touches your staging area.
=====
//////////////////////////
=====
`git reset` は、危険なコマンドに_なりえます_。その条件は、「`--hard`オプションをつけて実行すること」です。
ただし、上述の例はそうしておらず、作業ディレクトリにあるファイルに変更は加えられていません。
`git reset` をオプションなしで実行するのは危険ではありません。
ステージングエリアのファイルに変更が加えられるだけなのです。
=====

//////////////////////////
For now this magic invocation is all you need to know about the `git reset` command.
We'll go into much more detail about what `reset` does and how to master it to do really interesting things in <<ch07-git-tools#r_git_reset>>.
//////////////////////////
今のところは、`git reset`については上記の魔法の呪文を知っておけば十分でしょう。<<ch07-git-tools#r_git_reset>>で、より詳細に、`reset`の役割と使いこなし方について説明します。色々とおもしろいことができるようになりますよ。

//////////////////////////
==== Unmodifying a Modified File
//////////////////////////
==== ファイルへの変更の取り消し

//////////////////////////
What if you realize that you don't want to keep your changes to the `CONTRIBUTING.md` file?
How can you easily unmodify it – revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?
Luckily, `git status` tells you how to do that, too.
In the last example output, the unstaged area looks like this:
//////////////////////////
`CONTRIBUTING.md` に加えた変更が、実は不要なものだったとしたらどうしますか?
変更を取り消す (直近のコミット時点の状態、あるいは最初にクローンしたり最初に作業ディレクトリに取得したときの状態に戻す) 最も簡単な方法は?
幸いなことに、またもや `git status` がその方法を教えてくれます。
先ほどの例の出力結果で、ステージされていないファイル一覧の部分を見てみましょう。

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//////////////////////////
It tells you pretty explicitly how to discard the changes you've made.
Let's do what it says:
//////////////////////////
とても明確に、変更を取り消す方法が書かれています 。
ではそのとおりにしてみましょう。

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

//////////////////////////
You can see that the changes have been reverted.
//////////////////////////
変更が取り消されたことがわかります。

[IMPORTANT]
//////////////////////////
=====
It's important to understand that `git checkout -- <file>` is a dangerous command.
Any changes you made to that file are gone – Git just copied another file over it.
Don't ever use this command unless you absolutely know that you don't want the file.
=====
//////////////////////////
=====
ここで理解しておくべきなのが、`git checkout -- [file]`は危険なコマンドだ、ということです。
あなたがファイルに加えた変更はすべて消えてしまいます。変更した内容を、別のファイルで上書きしたのと同じことになります。そのファイルが不要であることが確実にわかっているとき以外は、このコマンドを使わないようにしましょう。
=====

//////////////////////////
If you would like to keep the changes you've made to that file but still need to get it out of the way for now, we'll go over stashing and branching in <<ch03-git-branching#ch03-git-branching>>; these are generally better ways to go.
//////////////////////////
やりたいことが、「ファイルに加えた変更はとっておきつつ、一時的に横に追いやっておきたい」ということであれば、<<ch03-git-branching#ch03-git-branching>> で説明する stash やブランチを調べてみましょう。一般にこちらのほうがおすすめの方法です。

//////////////////////////
Remember, anything that is _committed_ in Git can almost always be recovered.
Even commits that were on branches that were deleted or commits that were overwritten with an `--amend` commit can be recovered (see <<ch10-git-internals#r_data_recovery>> for data recovery).
However, anything you lose that was never committed is likely never to be seen again.
//////////////////////////
Git に__コミットした__内容のすべては、ほぼ常に取り消しが可能であることを覚えておきましょう。
削除したブランチへのコミットや `--amend` コミットで上書きされた元のコミットでさえも復旧することができます (データの復元方法については <<ch10-git-internals#r_data_recovery>> を参照ください)。
しかし、まだコミットしていない内容を失ってしまうと、それは二度と取り戻せません。
