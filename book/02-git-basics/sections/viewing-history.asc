[[r_viewing_history]]
//////////////////////////
=== Viewing the Commit History
//////////////////////////
=== コミット履歴の閲覧

//////////////////////////
After you have created several commits, or if you have cloned a repository with an existing commit history, you'll probably want to look back to see what has happened.
The most basic and powerful tool to do this is the `git log` command.
//////////////////////////
何度かコミットを繰り返すと、あるいはコミット履歴つきの既存のリポジトリをクローンすると、
過去に何が起こったのかを振り返りたくなることでしょう。
そのために使用するもっとも基本的かつパワフルな道具が `git log` コマンドです。

//////////////////////////
These examples use a very simple project called ``simplegit''.
To get the project, run
//////////////////////////
ここからの例では、``simplegit'' という非常にシンプルなプロジェクトを使用します。これは、次のようにして取得できます。

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

//////////////////////////
When you run `git log` in this project, you should get output that looks something like this:(((git commands, log)))
//////////////////////////
このプロジェクトで `git log` を実行すると、このような結果が得られます。(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

//////////////////////////
By default, with no arguments, `git log` lists the commits made in that repository in reverse chronological order – that is, the most recent commits show up first.
As you can see, this command lists each commit with its SHA-1 checksum, the author's name and email, the date written, and the commit message.
//////////////////////////
デフォルトで引数を何も指定しなければ、`git log` はそのリポジトリでのコミットを新しい順に表示します。
つまり、直近のコミットが最初に登場するということです。
ごらんのとおり、このコマンドは各コミットについて SHA-1 チェックサム・作者の名前とメールアドレス・コミット日時・コミットメッセージを一覧表示します。

//////////////////////////
A huge number and variety of options to the `git log` command are available to show you exactly what you're looking for.
Here, we'll show you some of the most popular.
//////////////////////////
`git log` コマンドには数多くのバラエティに富んだオプションがあり、あなたが本当に見たいものを表示させることができます。ここでは、人気の高いオプションのいくつかをご覧に入れましょう。

//////////////////////////
One of the more helpful options is `-p`, which shows the difference introduced in each commit.
You can also use `-2`, which limits the output to only the last two entries:
//////////////////////////
もっとも便利なオプションのひとつが `-p` で、これは各コミットで反映された変更点を表示します。また `-2` は、直近の 2 エントリだけを出力します。

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

//////////////////////////
This option displays the same information but with a diff directly following each entry.
This is very helpful for code review or to quickly browse what happened during a series of commits that a collaborator has added.
You can also use a series of summarizing options with `git log`.
For example, if you want to see some abbreviated stats for each commit, you can use the `--stat` option:
//////////////////////////
このオプションは、先ほどと同じ情報を表示するとともに、各エントリの直後にその diff を表示します。
これはコードレビューのときに非常に便利です。また、他のメンバーが一連のコミットで何を行ったのかをざっと眺めるのにも便利でしょう。
また、`git log` では「まとめ」系のオプションを使うこともできます。
たとえば、各コミットに関するちょっとした統計情報を見たい場合は `--stat` オプションを使用します。

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

//////////////////////////
As you can see, the `--stat` option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed.
It also puts a summary of the information at the end.
//////////////////////////
ごらんの通り `--stat` オプションは、各コミットエントリに続けて変更されたファイルの一覧と変更されたファイルの数、追加・削除された行数が表示されます。
また、それらの情報のまとめを最後に出力します。

//////////////////////////
Another really useful option is `--pretty`.
This option changes the log output to formats other than the default.
A few prebuilt options are available for you to use.
The `oneline` option prints each commit on a single line, which is useful if you're looking at a lot of commits.
In addition, the `short`, `full`, and `fuller` options show the output in roughly the same format but with less or more information, respectively:
//////////////////////////
もうひとつの便利なオプションが `--pretty` です。
これは、ログをデフォルトの書式以外で出力します。
あらかじめ用意されているいくつかのオプションを指定することができます。
`oneline` オプションは、各コミットを一行で出力します。
これは、大量のコミットを見る場合に便利です。
さらに `short` や `full` そして `fuller` といったオプションもあり、
これは標準とほぼ同じ書式だけれども情報量がそれぞれ少なめあるいは多めになります。

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

//////////////////////////
The most interesting option is `format`, which allows you to specify your own log output format.
This is especially useful when you're generating output for machine parsing – because you specify the format explicitly, you know it won't change with updates to Git:(((log formatting)))
//////////////////////////
もっとも興味深いオプションは `format` で、これは独自のログ出力フォーマットを指定することができます。
これは、出力結果を機械にパースさせる際に非常に便利です。
自分でフォーマットを指定しておけば、将来 Git をアップデートしても結果が変わらないようにできるからです。(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

//////////////////////////
<<rpretty_format>> lists some of the more useful options that `format` takes.
//////////////////////////
<<rpretty_format>> は、`format` で使用できる便利なオプションをまとめたものです。

[[rpretty_format]]
//////////////////////////
.Useful options for `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Option   | Description of Output
| `%H`     | Commit hash
| `%h`     | Abbreviated commit hash
| `%T`     | Tree hash
| `%t`     | Abbreviated tree hash
| `%P`     | Parent hashes
| `%p`     | Abbreviated parent hashes
| `%an`    | Author name
| `%ae`    | Author email
| `%ad`    | Author date (format respects the --date=option)
| `%ar`    | Author date, relative
| `%cn`    | Committer name
| `%ce`    | Committer email
| `%cd`    | Committer date
| `%cr`    | Committer date, relative
| `%s`     | Subject
|================================
//////////////////////////
.`git log --pretty=format` 用の便利なオプション
[cols="1,4",options="header"]
|================================
| オプション   | 出力される内容
| `%H`         | コミットのハッシュ
| `%h`         | コミットのハッシュ (短縮版)
| `%T`         | ツリーのハッシュ
| `%t`         | ツリーのハッシュ (短縮版)
| `%P`         | 親のハッシュ
| `%p`         | 親のハッシュ (短縮版)
| `%an`        | Author の名前
| `%ae`        | Author のメールアドレス
| `%ad`        | Author の日付 (--date= オプションに従った形式)
| `%ar`        | Author の相対日付
| `%cn`        | Committer の名前
| `%ce`        | Committer のメールアドレス
| `%cd`        | Committer の日付
| `%cr`        | Committer の相対日付
| `%s`         | 件名
|================================

//////////////////////////
You may be wondering what the difference is between _author_ and _committer_.
The author is the person who originally wrote the work, whereas the committer is the person who last applied the work.
So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit – you as the author, and the core member as the committer.
We'll cover this distinction a bit more in <<ch05-distributed-git#ch05-distributed-git>>.
//////////////////////////
_author_ と _committer_ は何が違うのか気になる方もいるでしょう。
authorとはその作業をもともと行った人、committerとはその作業を適用した人のことを指します。
あなたがとあるプロジェクトにパッチを送り、コアメンバーのだれかがそのパッチを適用したとしましょう。
この場合、両方がクレジットされます (あなたがauthor、コアメンバーがcommitterです)。
この区別については<<ch05-distributed-git#ch05-distributed-git>>でもう少し詳しく説明します。

//////////////////////////
The `oneline` and `format` options are particularly useful with another `log` option called `--graph`.
This option adds a nice little ASCII graph showing your branch and merge history:
//////////////////////////
`oneline`オプションおよび`format`オプションは、`log` のもうひとつのオプションである `--graph` と組み合わせるとさらに便利です。
このオプションは、ちょっといい感じのアスキーグラフでブランチやマージの歴史を表示します。

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

//////////////////////////
This type of output will become more interesting as we go through branching and merging in the next chapter.
//////////////////////////
こういった表示の良さは、ブランチやマージに関する次章を読むと明らかになるでしょう。

//////////////////////////
Those are only some simple output-formatting options to `git log` – there are many more.
<<rlog_options>> lists the options we've covered so far, as well as some other common formatting options that may be useful, along with how they change the output of the log command.
//////////////////////////
これらは `git log` の出力フォーマット指定のほんの一部でしかありません。
まだまだオプションはあります。
<<rlog_options>> に、今まで取り上げたオプションやそれ以外によく使われるオプション、
そしてそれぞれが`log`の出力をどのように変えるのかをまとめました。

[[rlog_options]]
//////////////////////////
.Common options to `git log`
[cols="1,4",options="header"]
|================================
| Option            | Description
| `-p`              | Show the patch introduced with each commit.
| `--stat`          | Show statistics for files modified in each commit.
| `--shortstat`     | Display only the changed/insertions/deletions line from the --stat command.
| `--name-only`     | Show the list of files modified after the commit information.
| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
| `--relative-date` | Display the date in a relative format (for example, ``2 weeks ago'') instead of using the full date format.
| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
| `--pretty`        | Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
|================================
//////////////////////////
.`git log`のよく使われるオプション
[cols="1,4",options="header"]
|================================
| オプション        | 説明
| `-p`              | 各コミットのパッチを表示する
| `--stat`          | 各コミットで変更されたファイルの統計情報を表示する
| `--shortstat`     | --stat コマンドのうち、変更/追加/削除 の行だけを表示する
| `--name-only`     | コミット情報の後に変更されたファイルの一覧を表示する
| `--name-status`   | 変更されたファイルと 追加/修正/削除 情報を表示する
| `--abbrev-commit` | SHA-1 チェックサムの全体 (40文字) ではなく最初の数文字のみを表示する
| `--relative-date` | 完全な日付フォーマットではなく、相対フォーマット (``2 weeks ago'' など) で日付を表示する
| `--graph`         | ブランチやマージの歴史を、ログ出力とともにアスキーグラフで表示する
| `--pretty`        | コミットを別のフォーマットで表示する。オプションとして oneline, short, full, fuller そして format (独自フォーマットを設定する) を指定可能
|================================

//////////////////////////
==== Limiting Log Output
//////////////////////////
==== ログ出力の制限

//////////////////////////
In addition to output-formatting options, `git log` takes a number of useful limiting options – that is, options that let you show only a subset of commits.
You've seen one such option already – the `-2` option, which show only the last two commits.
In fact, you can do `-<n>`, where `n` is any integer to show the last `n` commits.
In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.
//////////////////////////
出力のフォーマット用オプションだけでなく、 
`git log` にはログの制限用の便利なオプションもあります。
コミットの一部だけを表示するようなオプションのことです。
既にひとつだけ紹介していますね。
`-2` オプション、これは直近のふたつのコミットだけを表示するものです。
実は `-<n>` の `n` には任意の整数値を指定することができ、直近の `n` 件のコミットだけを表示させることができます。
ただ、実際のところはこれを使うことはあまりないでしょう。
というのも、Git はデフォルトですべての出力をページャにパイプするので、
ログを一度に 1 ページだけ見ることになるからです。

//////////////////////////
However, the time-limiting options such as `--since` and `--until` are very useful.
For example, this command gets the list of commits made in the last two weeks:
//////////////////////////
しかし `--since` や `--until` のような時間制限のオプションは非常に便利です。
たとえばこのコマンドは、過去二週間のコミットの一覧を取得します。

[source,console]
----
$ git log --since=2.weeks
----

//////////////////////////
This command works with lots of formats – you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.
//////////////////////////
このコマンドはさまざまな書式で動作します。特定の日を指定する (`"2008-01-15"`) こともできますし、
相対日付を`"2 years 1 day 3 minutes ago"`のように指定することも可能です。

//////////////////////////
You can also filter the list to commits that match some search criteria.
The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.
(Note that if you want to specify both author and grep options, you have to add `--all-match` or the command will match commits with either.)
//////////////////////////
コミット一覧から検索条件にマッチするものだけを取り出すこともできます。
`--author` オプションは特定のauthorのみを抜き出し、
`--grep` オプションはコミットメッセージの中のキーワードを検索します
（author と grep を両方指定する場合は、`--all-match`オプションも一緒に使ってください。
そうしないと、どちらか一方にだけマッチするものも対象になってしまいます）。

//////////////////////////
Another really helpful filter is the `-S` option which takes a string and only shows the commits that introduced a change to the code that added or removed that string.
For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:
//////////////////////////
もうひとつ、`-S`オプションというとても便利なフィルタがあります。
このオプションは任意の文字列を引数にでき、その文字列が追加・削除されたコミットのみを抜き出してくれます。
仮に、とある関数の呼び出しをコードに追加・削除したコミットのなかから、最新のものが欲しいとしましょう。こうすれば探すことができます。

[source,console]
----
$ git log -Sfunction_name
----

//////////////////////////
The last really useful option to pass to `git log` as a filter is a path.
If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.
This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.
//////////////////////////
最後に紹介する `git log` のフィルタリング用オプションは、パスです。
ディレクトリ名あるいはファイル名を指定すると、それを変更したコミットのみが対象となります。
このオプションは常に最後に指定し、一般にダブルダッシュ (`--`) の後に記述します。
このダブルダッシュが他のオプションとパスの区切りとなります。

//////////////////////////
In <<rlimit_options>> we'll list these and a few other common options for your reference.
//////////////////////////
<<rlimit_options>> に、これらのオプションとその他の一般的なオプションをまとめました。

[[rlimit_options]]
//////////////////////////
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-(n)`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================
//////////////////////////
.`git log`の出力を制限するためのオプション
[cols="2,4",options="header"]
|================================
| オプション            | 説明
| `-(n)`                | 直近の n 件のコミットのみを表示する
| `--since`, `--after`  | 指定した日付より後に作成されたコミットのみに制限する
| `--until`, `--before` | 指定した日付より前に作成されたコミットのみに制限する
| `--author`            | エントリが指定した文字列にマッチするコミットのみを表示する
| `--committer`         | エントリが指定した文字列にマッチするコミットのみを表示する
| `--grep`              | 指定した文字列がコミットメッセージに含まれているコミットのみを表示する
| `-S`                  | 指定した文字列をコードに追加・削除したコミットのみを表示する
|================================

//////////////////////////
For example, if you want to see which commits modifying test files in the Git source code history are merged and were committed by Junio Hamano in the month of October 2008, you can run something like this:(((log filtering)))
//////////////////////////
一つ例を挙げておきましょう。Git ソースツリーのテストファイルに対する変更があったコミットのうち、Junio Hamano がコミットしたものでかつ2008年10月にマージされたものを知りたければ、次のように指定します。(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

//////////////////////////
Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.
//////////////////////////
約 40,000 件におよぶ Git ソースコードのコミットの歴史の中で、このコマンドの条件にマッチするのは 6 件となります。
