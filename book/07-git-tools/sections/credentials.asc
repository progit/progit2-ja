[[r_credential_caching]]
//////////////////////////
=== Credential Storage
//////////////////////////
=== 認証情報の保存

(((credentials)))
(((git commands, credential)))
//////////////////////////
If you use the SSH transport for connecting to remotes, it's possible for you to have a key without a passphrase, which allows you to securely transfer data without typing in your username and password.
However, this isn't possible with the HTTP protocols – every connection needs a username and password.
This gets even harder for systems with two-factor authentication, where the token you use for a password is randomly generated and unpronounceable.
//////////////////////////
SSH を使ってリモートサーバーと接続しているのなら、パスフレーズなしの鍵を使えます。そうすれば、データ転送を安全に行おうとする際に、ユーザー名やパスワードを入力せずにすみます。
一方、HTTP プロトコルの場合はこうはいきません。接続のたびにユーザー名とパスワードが必要です。
さらに大変になるのが二要素認証が必要なシステムの場合です。パスワードと組み合わせて使うトークンはランダムに生成されており、unpronounceable だからです。

//////////////////////////
Fortunately, Git has a credentials system that can help with this.
Git has a few options provided in the box:
//////////////////////////
さいわい、Git には認証情報の仕組みがあり、上述のような大変さを軽減してくれます。
標準の仕組みで選択可能なオプションは以下のとおりです。

//////////////////////////
* The default is not to cache at all.
  Every connection will prompt you for your username and password.
* The ``cache'' mode keeps credentials in memory for a certain period of time.
  None of the passwords are ever stored on disk, and they are purged from the cache after 15 minutes.
* The ``store'' mode saves the credentials to a plain-text file on disk, and they never expire.
  This means that until you change your password for the Git host, you won't ever have to type in your credentials again.
  The downside of this approach is that your passwords are stored in cleartext in a plain file in your home directory.
* If you're using a Mac, Git comes with an ``osxkeychain'' mode, which caches credentials in the secure keychain that's attached to your system account.
  This method stores the credentials on disk, and they never expire, but they're encrypted with the same system that stores HTTPS certificates and Safari auto-fills.
* If you're using Windows, you can install a helper called ``wincred.''
  This is similar to the ``osxkeychain'' helper described above, but uses the Windows Credential Store to control sensitive information.
//////////////////////////
* デフォルトでは、なにもキャッシュされません。
  接続するたび、ユーザー名とパスワードを尋ねられます。
* ``cache'' モードにすると、認証情報が一定の間だけメモリーに記憶されます。
  パスワードはディスクには保存されません。15分経つとメモリーから除去されます。
* ``store'' モードにすると、認証情報がテキストファイルでディスクに保存されます。有効期限はありません。
  ということは、パスワードを変更するまで、認証情報を入力しなくて済むのです。
  ただし、パスワードが暗号化なしのテキストファイルでホームディレクトリに保存される、というデメリットがあります。
* Mac を使っているなら、Git の ``osxkeychain'' モードが使えます。これを使うと、OS のキーチェーン（システムアカウントと紐づく）に認証情報がキャッシュされます。
  このモードでも認証情報がディスクに保存され、有効期限切れもありません。ただし先ほどとは違い、保存内容は暗号化（HTTPS 証明書や Safari の自動入力の暗号化と同じ仕組み）されます。
* Windows を使っているなら、``wincred'' という補助ツールがあります。
  ``osxkeychain'' と同じような仕組み（Windows Credential Store）で、重要な情報を管理します。

//////////////////////////
You can choose one of these methods by setting a Git configuration value:
//////////////////////////
このオプションを設定するには、以下のように Git を設定します。


[source,console]
----
$ git config --global credential.helper cache
----

//////////////////////////
Some of these helpers have options.
The ``store'' helper can take a `--file <path>` argument, which customizes where the plain-text file is saved (the default is `~/.git-credentials`).
The ``cache'' helper accepts the `--timeout <seconds>` option, which changes the amount of time its daemon is kept running (the default is ``900'', or 15 minutes).
Here's an example of how you'd configure the ``store'' helper with a custom file name:
//////////////////////////
補助ツールには、オプションを設定できる場合があります。
``store'' であれば `--file <path>` という引数を指定できます。テキストファイルの保存場所を指定するために用いるオプションです（デフォルトは `~/.git-credentials`）。
``cache'' であれば `--timeout <seconds>` という引数を使って、補助ツールのデーモンが動作する時間を設定できます（デフォルトは ``900''、15分です）。
``store'' 補助ツールのデフォルト設定を変更するには、以下のような設定コマンドを実行します。

[source,console]
----
$ git config --global credential.helper 'store --file ~/.my-credentials'
----

//////////////////////////
Git even allows you to configure several helpers.
When looking for credentials for a particular host, Git will query them in order, and stop after the first answer is provided.
When saving credentials, Git will send the username and password to *all* of the helpers in the list, and they can choose what to do with them.
Here's what a `.gitconfig` would look like if you had a credentials file on a thumb drive, but wanted to use the in-memory cache to save some typing if the drive isn't plugged in:
//////////////////////////
また、複数のヘルパーを有効にし設定することもできます。
サーバーの認証情報が必要になると Git はこれらを順番に検索をかけていき、ヒットした時点で検索を中断します。
認証情報を保存する際は、有効なヘルパー *すべて* にユーザー名とパスワードが渡されます。それらをどう処理するかはヘルパー次第です。
以下は、複数のヘルパーを有効にする `.gitconfig` の例になります。USB メモリ上に保存されている認証情報を優先して使うけれど、もし USB メモリが使用不可の場合はパスワードを一定期間キャッシュしておく、という設定です。



[source,ini]
----
[credential]
    helper = store --file /mnt/thumbdrive/.git-credentials
    helper = cache --timeout 30000
----

//////////////////////////
==== Under the Hood
//////////////////////////
==== 認証情報保存の裏側

//////////////////////////
How does this all work?
Git's root command for the credential-helper system is `git credential`, which takes a command as an argument, and then more input through stdin.
//////////////////////////
認証情報を保存する仕組みは、いったいどのようにして動作しているのでしょうか。
認証情報ヘルパーの仕組みを操作する基本となるコマンドは `git credential` です。コマンドと標準入力経由での入力が引数になります。

//////////////////////////
This might be easier to understand with an example.
Let's say that a credential helper has been configured, and the helper has stored credentials for `mygithost`.
Here's a session that uses the ``fill'' command, which is invoked when Git is trying to find credentials for a host:
//////////////////////////
例を見たほうがわかりやすいかもしれません。
仮に、認証情報ヘルパーが有効になっていて、`mygithost` というサーバーの認証情報を保存しているとします。
``fill'' コマンド（Git がサーバーの認証情報を探すときに呼び出されるコマンド）を使って設定をおこなうと以下のようになります。

[source,console]
----
$ git credential fill <1>
protocol=https <2>
host=mygithost
<3>
protocol=https <4>
host=mygithost
username=bob
password=s3cre7
$ git credential fill <5>
protocol=https
host=unknownhost

Username for 'https://unknownhost': bob
Password for 'https://bob@unknownhost':
protocol=https
host=unknownhost
username=bob
password=s3cre7
----

//////////////////////////
<1> This is the command line that initiates the interaction.
<2> Git-credential is then waiting for input on stdin.
    We provide it with the things we know: the protocol and hostname.
<3> A blank line indicates that the input is complete, and the credential system should answer with what it knows.
<4> Git-credential then takes over, and writes to stdout with the bits of information it found.
<5> If credentials are not found, Git asks the user for the username and password, and provides them back to the invoking stdout (here they're attached to the same console).
//////////////////////////
<1> このコマンドで対話モードが始まります。
<2> すると、標準入力からの入力を Git-credential が待機している状態になります。
    ここでは、わかっている内容（プロトコルとホスト名）を入力してみます。
<3> 空白行を入力すると入力が締め切られます。そうすると、認証システムに保存された内容が返ってくるはずです。
<4> そうなると Git-credential の出番です。見つかった情報を標準出力に出力します。
<5> 認証情報が見つからない場合は、ユーザーがユーザー名とパスワードを入力することになります。入力された結果は標準出力に返されます（この例では同じコンソール内で処理されています。）。

//////////////////////////
The credential system is actually invoking a program that's separate from Git itself; which one and how depends on the `credential.helper` configuration value.
There are several forms it can take:
//////////////////////////
認証情報システムが呼び出しているプログラムは Git とは別のプログラムです。どのプログラムがどのように呼び出されるかは、`credential.helper` という設定によって異なっており、以下の様な値を設定できます。


//////////////////////////
[options="header"]
|======
| Configuration Value | Behavior
| `foo` | Runs `git-credential-foo`
| `foo -a --opt=bcd` | Runs `git-credential-foo -a --opt=bcd`
| `/absolute/path/foo -xyz` | Runs `/absolute/path/foo -xyz`
| `!f() { echo "password=s3cre7"; }; f` | Code after `!` evaluated in shell
|======
//////////////////////////
[options="header"]
|======
| 設定値 | 挙動
| `foo` | `git-credential-foo` を実行する
| `foo -a --opt=bcd` | `git-credential-foo -a --opt=bcd` を実行する
| `/absolute/path/foo -xyz` | `/absolute/path/foo -xyz` を実行する
| `!f() { echo "password=s3cre7"; }; f` | `!` 以降のコードがシェルで評価される
|======

//////////////////////////
So the helpers described above are actually named `git-credential-cache`, `git-credential-store`, and so on, and we can configure them to take command-line arguments.
The general form for this is ``git-credential-foo [args] <action>.''
The stdin/stdout protocol is the same as git-credential, but they use a slightly different set of actions:
//////////////////////////
これはつまり、先ほど説明した一連のヘルパーには、`git-credential-cache` や `git-credential-store` といった名前がつくということです。コマンドライン引数を受け付けるよう設定することもできます。
設定方法は ``git-credential-foo [args] <action>.'' になります。
なお、標準入出力のプロトコルは git-credential と同じですが、指定できるアクションが少し違ってきます。

//////////////////////////
* `get` is a request for a username/password pair.
* `store` is a request to save a set of credentials in this helper's memory.
* `erase` purge the credentials for the given properties from this helper's memory.
//////////////////////////
* `get` はユーザー名/パスワードの組み合わせを要求するときに使います。
* `store` はヘルパーのメモリーに認証情報を保持するよう要求するときに使います。
* `erase` はヘルパーのメモリーから指定したプロパティの認証情報を削除するよう要求するときに使います。


//////////////////////////
For the `store` and `erase` actions, no response is required (Git ignores it anyway).
For the `get` action, however, Git is very interested in what the helper has to say.
If the helper doesn't know anything useful, it can simply exit with no output, but if it does know, it should augment the provided information with the information it has stored.
The output is treated like a series of assignment statements; anything provided will replace what Git already knows.
//////////////////////////
`store` と `erase` のアクションの場合、レスポンスは必要ありません（Git はレスポンスを無視してしまいますし）。
ですが、`get` アクションの場合は、ヘルパーからのレスポンスは Git にとって重要な意味を持ちます。
まず、使える情報を何も保持していないときは、ヘルパーは何も出力せずに終了できます。ですが、何か情報を保持しているときは、渡された情報に対し自身が保持している情報を付加して返さなければなりません。
ヘルパーからの出力は代入文として処理されます。そしてそれを受け取った Git は、既に保持している情報を受け取った情報で置き換えます。


//////////////////////////
Here's the same example from above, but skipping git-credential and going straight for git-credential-store:
//////////////////////////
以下の例は先程のものと同じですが、git-credential の部分を省略して git-credential-store のみになっています。

[source,console]
----
$ git credential-store --file ~/git.store store <1>
protocol=https
host=mygithost
username=bob
password=s3cre7
$ git credential-store --file ~/git.store get <2>
protocol=https
host=mygithost

username=bob <3>
password=s3cre7
----

//////////////////////////
<1> Here we tell `git-credential-store` to save some credentials: the username ``bob'' and the password ``s3cre7'' are to be used when `https://mygithost` is accessed.
<2> Now we'll retrieve those credentials.
    We provide the parts of the connection we already know (`https://mygithost`), and an empty line.
<3> `git-credential-store` replies with the username and password we stored above.
//////////////////////////
<1> まずここでは、`git-credential-store` を呼び出して認証情報を保存しています。この例では、ユーザー名に ``bob'' 、パスワードに ``s3cre7'' を使って `https://mygithost` にアクセスすることになります。
<2> では次に、認証情報を呼び出してみます。
    わかっている情報 (`https://mygithost`) を入力し、それに続いて空行も入力します。
<3> すると、`git-credential-store` が先ほど保存したユーザー名とパスワード返してくれるのです。

//////////////////////////
Here's what the `~/git.store` file looks like:
//////////////////////////
この例での `~/git.store` は以下のようになっています。

[source,ini]
----
https://bob:s3cre7@mygithost
----

//////////////////////////
It's just a series of lines, each of which contains a credential-decorated URL.
The `osxkeychain` and `wincred` helpers use the native format of their backing stores, while `cache` uses its own in-memory format (which no other process can read).
//////////////////////////
中身は認証情報つきの URL がずらずらと続く形になっています。
なお、`osxkeychain` や `wincred` ヘルパーは情報を保存するために独自のフォーマットを使用し、`cache` ヘルパーは独自形式でメモリーに情報を保持します（他のプロセスはこの情報にアクセスできません）。

//////////////////////////
==== A Custom Credential Cache
//////////////////////////
==== 独自の認証情報キャッシュ

//////////////////////////
Given that `git-credential-store` and friends are separate programs from Git, it's not much of a leap to realize that _any_ program can be a Git credential helper.
The helpers provided by Git cover many common use cases, but not all.
For example, let's say your team has some credentials that are shared with the entire team, perhaps for deployment.
These are stored in a shared directory, but you don't want to copy them to your own credential store, because they change often.
None of the existing helpers cover this case; let's see what it would take to write our own.
There are several key features this program needs to have:
//////////////////////////
「`git-credential-store` などのプログラムは Git から独立している。」このことを理解すると、_どんな_ プログラムであれ Git 認証情報ヘルパーとして機能できるということに気づくのもそれほど大変ではないと思います。
Git についてくるヘルパーは多くのユースケースに対応していますが、全てに対応できるわけではありません。
ここでは一例として、あなたのチームには全員が共有している認証情報があるとしましょう。デプロイ用の認証情報であればありえるケースです。
この情報は共有ディレクトリに保存されていますが、自分専用の認証情報としてコピーしておきたくはありません。頻繁に更新されるからです。
既存のヘルパーはどれもこの例には対応していません。この用途に合うヘルパーを作るには何が必要か、順を追って見ていきましょう。
まず、このプログラムには必要不可欠な機能がいくつもあります。

//////////////////////////
. The only action we need to pay attention to is `get`; `store` and `erase` are write operations, so we'll just exit cleanly when they're received.
. The file format of the shared-credential file is the same as that used by `git-credential-store`.
. The location of that file is fairly standard, but we should allow the user to pass a custom path just in case.
//////////////////////////
. 考慮しなければならないアクションは `get` だけなので、書き込みのアクションである `store` や `erase` を受け取った場合は何もせずに終了することにします。
. 共有されている認証情報のファイルフォーマットは `git-credential-store` のものと同様とします。
. 同ファイルはみんなが知っているような場所に保存されていますが、もしもの場合に備えてファイルのパスを指定できるようにしておきます。


//////////////////////////
Once again, we'll write this extension in Ruby, but any language will work so long as Git can execute the finished product.
Here's the full source code of our new credential helper:
//////////////////////////
繰り返しになりますが、今回はこの拡張を Ruby で書いていきますが実際はどんな言語でも書くことができます。できあがった拡張をGit が実行さえできれば問題ありません。

[source,ruby]
--------
include::../git-credential-read-only[]
--------

//////////////////////////
<1> Here we parse the command-line options, allowing the user to specify the input file. The default is `~/.git-credentials`.
<2> This program only responds if the action is `get` and the backing-store file exists.
<3> This loop reads from stdin until the first blank line is reached.
    The inputs are stored in the `known` hash for later reference.
<4> This loop reads the contents of the storage file, looking for matches.
    If the protocol and host from `known` match this line, the program prints the results to stdout and exits.
//////////////////////////
<1> まずここでコマンドラインオプションをパースし、読み込ませるファイルをユーザーが指定できるようにしておきます。デフォルトで読み込まれるファイルは `~/.git-credentials` です。
<2> このプログラムが応答するのはアクションが `get` で、かつ認証情報を保持しているファイルが存在している場合に限られます。
<3> このループは標準入力を読み取っていて、空行が渡されるまで続きます。
    入力された内容は `known` というハッシュに保存しておき、のちのち参照することになります。
<4> こちらのループではファイルの情報を検索します。
    `known` ハッシュに保持されているプロトコルとハッシュに検索結果が合致した場合、検索結果が標準出力に返されます。

//////////////////////////
We'll save our helper as `git-credential-read-only`, put it somewhere in our `PATH` and mark it executable.
Here's what an interactive session looks like:
//////////////////////////
このヘルパーを `git-credential-read-only` としてパスの通っているところに保存したら、ファイルを実行可能にしましょう。
実際に実行したときの対話型セッションは、以下のようになります。

[source,console]
----
$ git credential-read-only --file=/mnt/shared/creds get
protocol=https
host=mygithost

protocol=https
host=mygithost
username=bob
password=s3cre7
----

//////////////////////////
Since its name starts with ``git-'', we can use the simple syntax for the configuration value:
//////////////////////////
ファイル名が ``git-'' で始まっているので、シンプルな書式を使って設定できます。

[source,console]
----
$ git config --global credential.helper 'read-only --file /mnt/shared/creds'
----

//////////////////////////
As you can see, extending this system is pretty straightforward, and can solve some common problems for you and your team.
//////////////////////////
このとおり、Git の認証情報の仕組みを拡張するのはとても単純ですし、個人やチームの悩みを解決するのに役立つはずです。
