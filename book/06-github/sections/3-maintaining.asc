[[r_maintaining_gh_project]]
//////////////////////////
=== Maintaining a Project
//////////////////////////
=== プロジェクトのメンテナンス

//////////////////////////
Now that we're comfortable contributing to a project, let's look at the other side: creating, maintaining and administering your own project.
//////////////////////////
既存のプロジェクトへの貢献のしかたがわかったところで、次はもう一方の側面を見てみましょう。自分自身のプロジェクトを作ったりメンテナンスしたり、管理したりする方法です。

//////////////////////////
==== Creating a New Repository
//////////////////////////
==== 新しいリポジトリの作成

//////////////////////////
Let's create a new repository to share our project code with.
Start by clicking the ``New repository'' button on the right-hand side of the dashboard, or from the `+` button in the top toolbar next to your username as seen in <<r_new_repo_dropdown>>.
//////////////////////////
新しいプロジェクトを作って、自分たちのプロジェクトのコードを共有しましょう。
まずはダッシュボードの右側にある ``New repository'' ボタンをクリックするか、
上のツールバーでユーザー名の隣にある `+` ボタン (<<r_new_repo_dropdown>> を参照) をクリックしましょう。

//////////////////////////
.The ``Your repositories'' area.
image::images/newrepo.png[The ``Your repositories'' area.]
//////////////////////////
.``Your repositories'' エリア
image::images/newrepo.png[``Your repositories'' エリア]

[[r_new_repo_dropdown]]
//////////////////////////
.The ``New repository'' dropdown.
image::images/new-repo.png[The ``new repository'' dropdown.]
//////////////////////////
.``New repository'' ドロップダウン
image::images/new-repo.png[``new repository'' ドロップダウン]

//////////////////////////
This takes you to the ``new repository'' form:
//////////////////////////
これで、``new repository'' フォームが表示されます。

//////////////////////////
.The ``new repository'' form.
image::images/newrepoform.png[The ``new repository'' form.]
//////////////////////////
.``new repository'' フォーム
image::images/newrepoform.png[``new repository'' フォーム]

//////////////////////////
All you really have to do here is provide a project name; the rest of the fields are completely optional.
For now, just click the ``Create Repository'' button, and boom – you have a new repository on GitHub, named `<user>/<project_name>`.
//////////////////////////
ここで必須なのは、プロジェクト名を入力することだけです。それ以外のフィールドは空のままでもかまいません。
プロジェクト名を入力して ``Create Repository'' ボタンを押せば、はいできあがり。
これで GitHub 上に、`<user>/<project_name>` という新しいリポジトリができました。

//////////////////////////
Since you have no code there yet, GitHub will show you instructions for how to create a brand-new Git repository, or connect an existing Git project.
We won't belabor this here; if you need a refresher, check out <<ch02-git-basics#ch02-git-basics>>.
//////////////////////////
まだ何もコードが存在しないので、GitHub はここで、新しい Git リポジトリを作る方法と既存の Git プロジェクトを取り込む方法を教えてくれます。
ここでは、それらの手順について長々と繰り返したりはしません。忘れてしまった人は、<<ch02-git-basics#ch02-git-basics>> を見直しましょう。

//////////////////////////
Now that your project is hosted on GitHub, you can give the URL to anyone you want to share your project with.
Every project on GitHub is accessible over HTTP as `https://github.com/<user>/<project_name>`, and over SSH as `git@github.com:<user>/<project_name>`.
Git can fetch from and push to both of these URLs, but they are access-controlled based on the credentials of the user connecting to them.
//////////////////////////
これで GitHub 上にプロジェクトが用意でき、他の人たちにその URL を示せるようになりました。
GitHub 上のすべてのプロジェクトには、HTTP を使って `https://github.com/<user>/<project_name>` でアクセスすることができます。
また、SSH 経由での `git@github.com:<user>/<project_name>` へのアクセスもできます。
どちらの方式を使ってもデータのフェッチやプッシュができますが、そのプロジェクトに関連付けられたユーザーの認証情報に基づいた、アクセス制御がなされています。

[NOTE]
//////////////////////////
====
It is often preferable to share the HTTP based URL for a public project, since the user does not have to have a GitHub account to access it for cloning.
Users will have to have an account and an uploaded SSH key to access your project if you give them the SSH URL.
The HTTP one is also exactly the same URL they would paste into a browser to view the project there.
====
//////////////////////////
====
公開プロジェクトの共有には、HTTP ベースの URL を使うことをお勧めします。
SSH ベースの場合は、プロジェクトをクローンするためには GitHub のアカウントが必要になるからです。
SSH の URL だけを示した場合、それをクローンするには、GitHub のアカウントを作ったうえで SSH 鍵をアップロードする必要があります。
HTTP の URL は、ブラウザでそのプロジェクトのページを表示するときに使うものと同じです。
====

//////////////////////////
==== Adding Collaborators
//////////////////////////
==== コラボレーターの追加

//////////////////////////
If you're working with other people who you want to give commit access to, you need to add them as ``collaborators''.
If Ben, Jeff, and Louise all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project.
Doing so will give them ``push'' access, which means they have both read and write access to the project and Git repository.
//////////////////////////
他の人たちにもコミットアクセス権を渡したい場合は、その人たちを ``コラボレーター'' として追加しなければいけません。
すでに GitHub のアカウントを持っている Ben、Jeff、Louise に、あなたのリポジトリへのプッシュ権限を渡したい場合は、彼らを自分のプロジェクトに追加しましょう。
そうすれば、そのプロジェクトと Git リポジトリに対して、読み込みだけではなく書き込みアクセスもできるようになります。

//////////////////////////
Click the ``Settings'' link at the bottom of the right-hand sidebar.
//////////////////////////
右側のサイドバーの一番下にあるリンク ``Settings'' をクリックしましょう。

//////////////////////////
.The repository settings link.
image::images/reposettingslink.png[The repository settings link.]
//////////////////////////
.リポジトリの設定用のリンク
image::images/reposettingslink.png[リポジトリの設定用のリンク]

//////////////////////////
Then select ``Collaborators'' from the menu on the left-hand side.
Then, just type a username into the box, and click ``Add collaborator.''
You can repeat this as many times as you like to grant access to everyone you like.
If you need to revoke access, just click the ``X'' on the right-hand side of their row.
//////////////////////////
そして、左側のメニューから ``Collaborators'' を選びます。
そこで、ユーザー名を入力して ``Add collaborator'' をクリックしましょう。
これを、アクセス権を追加したいすべての人に対して繰り返します。
アクセス権を破棄したい場合は、そのアカウントの右側にある ``X'' をクリックします。

//////////////////////////
.Repository collaborators.
image::images/collaborators.png[The repository collaborators box.]
//////////////////////////
.リポジトリのコラボレーター
image::images/collaborators.png[リポジトリのコラボレーター]

//////////////////////////
==== Managing Pull Requests
//////////////////////////
==== プルリクエストの管理

//////////////////////////
Now that you have a project with some code in it and maybe even a few collaborators who also have push access, let's go over what to do when you get a Pull Request yourself.
//////////////////////////
さて、プロジェクトに何らかのコードが追加して、何人かのコラボレーターにプッシュ権限も渡せたかと思います。
ここで、プルリクエストを受け取ったときにやるべきことを紹介しましょう。

//////////////////////////
Pull Requests can either come from a branch in a fork of your repository or they can come from another branch in the same repository.
The only difference is that the ones in a fork are often from people where you can't push to their branch and they can't push to yours, whereas with internal Pull Requests generally both parties can access the branch.
//////////////////////////
プルリクエストは、あなたのリポジトリをフォークした先のブランチからやってくることもあれば、同じリポジトリ内の別ブランチから受け取ることもあります。
フォーク先からやってくるプルリクエストの場合は、あなたはそのリポジトリにプッシュできないし、逆にフォークした側の人もあなたのリポジトリにプッシュできないことが多いでしょう。
一方、同一リポジトリからのプルリクエストの場合は、どちらもお互いに、もう一方のブランチにプッシュできることが多くなります。両者の違いは、ただその一点だけです。

//////////////////////////
For these examples, let's assume you are ``tonychacon'' and you've created a new Arduino code project named ``fade''.
//////////////////////////
ここでは、あなたが ``tonychacon'' の立場にいて、Arduino のコードを管理する ``fade'' プロジェクトを作ったものとしましょう。

[[r_email_notifications]]
//////////////////////////
===== Email Notifications
//////////////////////////
===== メールでの通知

//////////////////////////
Someone comes along and makes a change to your code and sends you a Pull Request.
You should get an email notifying you about the new Pull Request and it should look something like <<r_email_pr>>.
//////////////////////////
あなたのプロジェクトを見つけた誰かが、コードに手を加えてプルリクエストを送ってきました。
このときあなたは、<<r_email_pr>> のような通知メールを受け取るはずです。

[[r_email_pr]]
//////////////////////////
.Email notification of a new Pull Request.
image::images/maint-01-email.png[Pull Request email notification]
//////////////////////////
.プルリクエストのメールでの通知
image::images/maint-01-email.png[プルリクエストのメールでの通知]

//////////////////////////
There are a few things to notice about this email.
It will give you a small diffstat -- a list of files that have changed in the Pull Request and by how much.
It gives you a link to the Pull Request on GitHub.
It also gives you a few URLs that you can use from the command line.
//////////////////////////
このメールの通知の内容を見てみましょう。
まず差分の簡単な状況（このプルリクエストで変更されたファイルの一覧と、どの程度変更されたのか）がわかります。
また、GitHub 上のプルリクエストのページへのリンクがあります。
さらに、コマンドラインから使えるいくつかの URL も挙げられています。

//////////////////////////
If you notice the line that says `git pull <url> patch-1`, this is a simple way to merge in a remote branch without having to add a remote.
We went over this quickly in <<ch05-distributed-git#r_checking_out_remotes>>.
If you wish, you can create and switch to a topic branch and then run this command to merge in the Pull Request changes.
//////////////////////////
`git pull <url> patch-1` と書いてある行に注目しましょう。
このようにすれば、リモートを追加しなくても、このブランチをマージできます。
この件については、<<ch05-distributed-git#r_checking_out_remotes>> で簡単に紹介しました。
もしお望みなら、トピックブランチを作ってそこに移動し、そしてこのコマンドを実行すれば、プルリクエストの変更をマージできます。

//////////////////////////
The other interesting URLs are the `.diff` and `.patch` URLs, which as you may guess, provide unified diff and patch versions of the Pull Request.
You could technically merge in the Pull Request work with something like this:
//////////////////////////
さらに、`.diff` と `.patch` の URL も記載されています。
拡張子から想像できるとおり、これらはそれぞれ、このプルリクエストの unified diff とパッチを取得するための URL です。
技術的には、たとえば以下のようにすれば、このプルリクエストをマージできます。

[source,console]
----
$ curl http://github.com/tonychacon/fade/pull/1.patch | git am
----

//////////////////////////
===== Collaborating on the Pull Request
//////////////////////////
===== プルリクエスト上での共同作業

//////////////////////////
As we covered in <<ch06-github_flow>>, you can now have a conversation with the person who opened the Pull Request.
You can comment on specific lines of code, comment on whole commits or comment on the entire Pull Request itself, using GitHub Flavored Markdown everywhere.
//////////////////////////
<<ch06-github_flow>> で説明したとおり、プルリクエストの作者とのやりとりができるようになりました。
コードの特定の行にコメントをしたり、コミット全体やプルリクエストそのものに対してコメントしたりすることができ、
その際には GitHub Flavored Markdown が使えます。

//////////////////////////
Every time someone else comments on the Pull Request you will continue to get email notifications so you know there is activity happening.
They will each have a link to the Pull Request where the activity is happening and you can also directly respond to the email to comment on the Pull Request thread.
//////////////////////////
プルリクエストに対して誰かがコメントするたびに通知メールが届くので、何らかの動きがあったことを知ることができます。
そのメールには、動きがあったプルリクエストへのリンクが含まれています。そして、通知メールに直接返信すれば、そのプルリクエストのスレッドにコメントをすることができます。

//////////////////////////
.Responses to emails are included in the thread.
image::images/maint-03-email-resp.png[Email response]
//////////////////////////
.メールでの返信が、スレッドに含まれる
image::images/maint-03-email-resp.png[メールでの返信]

//////////////////////////
Once the code is in a place you like and want to merge it in, you can either pull the code down and merge it locally, either with the `git pull <url> <branch>` syntax we saw earlier, or by adding the fork as a remote and fetching and merging.
//////////////////////////
コードが望みどおりの状態になり、取り込みたいと思えるようになったら、ローカルにそのコードを取得してマージできます。先述の `git pull <url> <branch>` 構文を使ってもいいし、
そのフォークをリモートとして追加した上で、フェッチしてからマージしてもいいでしょう。

//////////////////////////
If the merge is trivial, you can also just hit the ``Merge'' button on the GitHub site.
This will do a ``non-fast-forward'' merge, creating a merge commit even if a fast-forward merge was possible.
This means that no matter what, every time you hit the merge button, a merge commit is created.
As you can see in <<r_merge_button>>, GitHub gives you all of this information if you click the hint link.
//////////////////////////
もし特別な作業をせずにマージできる状態なら、GitHub のサイト上で単に ``Merge'' ボタンを押すだけでマージを済ませることもできます。
このボタンを押すと ``non-fast-forward'' マージを行います。つまり、fast-forward マージが可能な場合でも、強制的にマージコミットを作ります。
要するに、どんな場合であっても、マージボタンを押したらマージコミットが作られるということです。
<<r_merge_button>> にあるとおり、ヒントのリンクをクリックすれば、GitHub がこれらの情報をすべて教えてくれます。

[[r_merge_button]]
//////////////////////////
.Merge button and instructions for merging a Pull Request manually.
image::images/maint-02-merge.png[Merge button]
//////////////////////////
.マージボタンと、プルリクエストを手動でマージするための手順
image::images/maint-02-merge.png[マージボタン]

//////////////////////////
If you decide you don't want to merge it, you can also just close the Pull Request and the person who opened it will be notified.
//////////////////////////
マージしたくないと思った場合は、単にそのプルリクエストをクローズするだけでかまいません。プルリクエストの作者には、その旨通知が届きます。

[[r_pr_refs]]
//////////////////////////
===== Pull Request Refs
//////////////////////////
===== プルリクエストの参照

////////////////
If you're dealing with a *lot* of Pull Requests and don't want to add a bunch of remotes or do one time pulls every time, there is a neat trick that GitHub allows you to do.
This is a bit of an advanced trick and we'll go over the details of this a bit more in <<ch10-git-internals#r_refspec>>, but it can be pretty useful.
////////////////
*大量の* プルリクエストを扱っていて、取り込むたびにいちいちリモートを追加するのが面倒な場合は、
GitHub が提供するちょっとしたトリックを使えます。
これは高度な話題なので、その詳細は <<ch10-git-internals#r_refspec>> であらためて取り上げます。ただ、これはとても便利です。

////////////////
GitHub actually advertises the Pull Request branches for a repository as sort of pseudo-branches on the server.
By default you don't get them when you clone, but they are there in an obscured way and you can access them pretty easily.
////////////////
GitHub は、個々のプルリクエストのブランチを、サーバー上で擬似ブランチとして公開しています。
クローンするときに、デフォルトでは取り込まれませんが、目立たないところに存在していて、簡単にアクセスできます。

////////////////
To demonstrate this, we're going to use a low-level command (often referred to as a ``plumbing'' command, which we'll read about more in <<ch10-git-internals#r_plumbing_porcelain>>) called `ls-remote`.
This command is generally not used in day-to-day Git operations but it's useful to show us what references are present on the server.
////////////////
その様子を示すために、ここでは、下位レベルのコマンド (「配管」コマンド) である `ls-remote` を使います。
このコマンドを日々の Git の操作で使うことはあまりありませんが、サーバー上に何があるのかを見るためには便利です。

////////////////
If we run this command against the ``blink'' repository we were using earlier, we will get a list of all the branches and tags and other references in the repository.
////////////////
先ほどの ``blink'' リポジトリに対してこのコマンドを実行すると、すべてのブランチやタグ、そしてその他の参照の一覧を取得できます。

[source,console]
----
$ git ls-remote https://github.com/schacon/blink
10d539600d86723087810ec636870a504f4fee4d	HEAD
10d539600d86723087810ec636870a504f4fee4d	refs/heads/master
6a83107c62950be9453aac297bb0193fd743cd6e	refs/pull/1/head
afe83c2d1a70674c9505cc1d8b7d380d5e076ed3	refs/pull/1/merge
3c8d735ee16296c242be7a9742ebfbc2665adec1	refs/pull/2/head
15c9f4f80973a2758462ab2066b6ad9fe8dcf03d	refs/pull/2/merge
a5a7751a33b7e86c5e9bb07b26001bb17d775d1a	refs/pull/4/head
31a45fc257e8433c8d8804e3e848cf61c9d3166c	refs/pull/4/merge
----

////////////////
Of course, if you're in your repository and you run `git ls-remote origin` or whatever remote you want to check, it will show you something similar to this.
////////////////
もちろん、自分のリポジトリにいるときに `git ls-remote origin` のようにリモートを指定すると、これと同じような結果が得られるでしょう。

////////////////
If the repository is on GitHub and you have any Pull Requests that have been opened, you'll get these references that are prefixed with `refs/pull/`.
These are basically branches, but since they're not under `refs/heads/` you don't get them normally when you clone or fetch from the server -- the process of fetching ignores them normally.
////////////////
GitHub 上にあるリポジトリで、オープン中のプルリクエストがある場合は、
プルリクエストへの参照も表示されます。これらの参照は、先頭が `refs/pull/` となります。
基本的にはブランチですが、`refs/heads/` の配下にあるわけではないので、通常のクローンやフェッチで取得することはできません。
フェッチの際には通常、これらのブランチを無視します。

////////////////
There are two references per Pull Request - the one that ends in `/head` points to exactly the same commit as the last commit in the Pull Request branch.
So if someone opens a Pull Request in our repository and their branch is named `bug-fix` and it points to commit `a5a775`, then in *our* repository we will not have a `bug-fix` branch (since that's in their fork), but we _will_ have `pull/<pr#>/head` that points to `a5a775`.
This means that we can pretty easily pull down every Pull Request branch in one go without having to add a bunch of remotes.
////////////////
ひとつのプルリクエストにつき、二つの参照が表示されています。
一方は `/head` で終わるもので、これは、そのプルリクエストのブランチの最新のコミットを指しています。
誰かが私たちのリポジトリにプルリクエストを送ってきたとして、仮にそのブランチ名が `bug-fix` で参照先のコミットが `a5a775` だったとしましょう。
*私たちの* リポジトリには `bug-fix` ブランチがありません (彼らのフォーク上にしかありません) が、
`pull/<pr#>/head` が `a5a775` を指すようになるのです。
つまり、大量にリモートを追加したりしなくても、あらゆるプルリクエストのブランチをコマンドひとつで手元に取り込めるのです。

////////////////
Now, you could do something like fetching the reference directly.
////////////////
この参照を直接指定して、以下のようにフェッチすることができます。

[source,console]
----
$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD
----

////////////////
This tells Git, ``Connect to the `origin` remote, and download the ref named `refs/pull/958/head`.''
Git happily obeys, and downloads everything you need to construct that ref, and puts a pointer to the commit you want under `.git/FETCH_HEAD`.
You can follow that up with `git merge FETCH_HEAD` into a branch you want to test it in, but that merge commit message looks a bit weird.
Also, if you're reviewing a *lot* of pull requests, this gets tedious.
////////////////
このコマンドは Git に対して、「リモート `origin` に接続して、`refs/pull/958/head` をダウンロードしなさい」という指示を出します。
Git はその指示に従い、必要なものをすべてダウンロードして、あなたが必要とするコミットへのポインタを `.git/FETCH_HEAD` に置きます。
これを `git merge FETCH_HEAD` で自分のブランチに取り込んで試すこともできますが、マージコミットのメッセージは少しわかりにくくなります。
また、*大量の* プルリクエストを処理するときには、この作業は退屈でしょう。

////////////////
There's also a way to fetch _all_ of the pull requests, and keep them up to date whenever you connect to the remote.
Open up `.git/config` in your favorite editor, and look for the `origin` remote.
It should look a bit like this:
////////////////
_すべての_ プルリクエストを取得して、リモートに接続するたびに最新の状態を保つようにする方法もあります。
`.git/config` をお好みのエディタで開いて、リモート `origin` の記載を探しましょう。
きっと、このようになっているはずです。

[source,ini]
----
[remote "origin"]
    url = https://github.com/libgit2/libgit2
    fetch = +refs/heads/*:refs/remotes/origin/*
----

////////////////
That line that begins with `fetch =` is a ``refspec.''
It's a way of mapping names on the remote with names in your local `.git` directory.
This particular one tells Git, "the things on the remote that are under `refs/heads` should go in my local repository under `refs/remotes/origin`."
You can modify this section to add another refspec:
////////////////
`fetch =` で始まっている行が、``refspec'' です。
ここで、リモートでの名前とローカルの `.git` ディレクトリ内での名前のマッピングができます。
この例では、Git に対して「リモートの `refs/heads` 配下にあるものを、ローカルのリポジトリ内では `refs/remotes/origin` 配下に置くこと」と指示しています。
このセクションを書き換えて、別の refspec を追加できます。

[source,ini]
----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
----

////////////////
That last line tells Git, ``All the refs that look like `refs/pull/123/head` should be stored locally like `refs/remotes/origin/pr/123`.''
Now, if you save that file, and do a `git fetch`:
////////////////
最後のに追加した行は、「`refs/pull/123/head` のような参照はすべて、ローカルでは `refs/remotes/origin/pr/123` のように保存すること」という意味です。
さて、このファイルを保存したら、`git fetch` を実行してみましょう。

[source,console]
----
$ git fetch
# …
 * [new ref]         refs/pull/1/head -> origin/pr/1
 * [new ref]         refs/pull/2/head -> origin/pr/2
 * [new ref]         refs/pull/4/head -> origin/pr/4
# …
----

////////////////
Now all of the remote pull requests are represented locally with refs that act much like tracking branches; they're read-only, and they update when you do a fetch.
This makes it super easy to try the code from a pull request locally:
////////////////
リモートのすべてのプルリクエストが、ローカルでも、まるで追跡ブランチであるかのように表されるようになりました。
これらのブランチは読み込み専用で、フェッチするたびに更新されます。
これで、プルリクエストのコードをローカルで簡単に試せるようになりました。

[source,console]
----
$ git checkout pr/2
Checking out files: 100% (3769/3769), done.
Branch pr/2 set up to track remote branch pr/2 from origin.
Switched to a new branch 'pr/2'
----

////////////////
The eagle-eyed among you would note the `head` on the end of the remote portion of the refspec.
There's also a `refs/pull/#/merge` ref on the GitHub side, which represents the commit that would result if you push the ``merge'' button on the site.
This can allow you to test the merge before even hitting the button.
////////////////
リモート側の refspec の最後に `head` と表示されていることに、目ざとい人なら気づいたかもしれません。
GitHub 上には、これだけではなく `refs/pull/#/merge` という参照もあります。
これは、サイト上で「マージ」ボタンを押したときに作られるコミットを指す参照です。
これを使えば、マージしたらどうなるかを、ボタンを押す前に確かめることができるのです。

////////////////
===== Pull Requests on Pull Requests
////////////////
===== プルリクエスト上でのプルリクエスト

////////////////
Not only can you open Pull Requests that target the main or `master` branch, you can actually open a Pull Request targeting any branch in the network.
In fact, you can even target another Pull Request.
////////////////
別に、プルリクエストの対象がメインブランチ (`master` ブランチ) でなければいけないなどという決まりはありません。
ネットワーク上にあるあらゆるブランチに対して、プルリクエストを作ることができます。
別のプルリクエストに対して、プルリクエストを送ることだってできるのです。

////////////////
If you see a Pull Request that is moving in the right direction and you have an idea for a change that depends on it or you're not sure is a good idea, or you just don't have push access to the target branch, you can open a Pull Request directly to it.
////////////////
正しい方向に進みつつあるプルリクエストに対して、それを元にした新たな変更のアイデアが浮かんだ場合や、
単にそのプルリクエストの対象ブランチへのプッシュ権限がない場合などに、
プルリクエストに対するプルリクエストを作ることができます。

////////////////
When you go to open a Pull Request, there is a box at the top of the page that specifies which branch you're requesting to pull to and which you're requesting to pull from.
If you hit the ``Edit'' button at the right of that box you can change not only the branches but also which fork.
////////////////
プルリクエストを作る際に、ページの上のほうに二つの入力欄があることがわかります。
それぞれ、どのブランチに対するリクエストなのかと、どのブランチからプルしてほしいのかを指定する欄です。
この欄の右側にある「編集」ボタンを押すと、ブランチ名だけではなく、どのフォークを使うのかも変更できます。

[[r_pr_targets]]
////////////////
.Manually change the Pull Request target fork and branch.
image::images/maint-04-target.png[PR targets]
////////////////
.プルリクエストの対象となるフォークとブランチを手動で変更する
image::images/maint-04-target.png[PRの対象]

////////////////
Here you can fairly easily specify to merge your new branch into another Pull Request or another fork of the project.
////////////////
これを使えば、あなたのブランチを別のプルリクエストにマージするよう指定したり、そのプロジェクトの別のフォークへのマージ依頼を出したりするのも簡単です。

////////////////
==== Mentions and Notifications
////////////////
==== 言及と通知

////////////////
GitHub also has a pretty nice notifications system built in that can come in handy when you have questions or need feedback from specific individuals or teams.
////////////////
GitHub には、よくできた通知システムも組み込まれています。特定の人やチームに質問をしたり、何かのフィードバックが必要だったりする場合に便利です。

////////////////
In any comment you can start typing a `@` character and it will begin to autocomplete with the names and usernames of people who are collaborators or contributors in the project.
////////////////
コメントの記入時に `@` を入力すると、自動補完が始まります。
そのプロジェクトの Collaborator や、これまでの貢献者たちの、名前やユーザー名を補完できます。

////////////////
.Start typing @ to mention someone.
image::images/maint-05-mentions.png[Mentions]
////////////////
.誰かについて言及するには、@ を入力する
image::images/maint-05-mentions.png[言及]

////////////////
You can also mention a user who is not in that dropdown, but often the autocompleter can make it faster.
////////////////
このドロップダウンに登場しないユーザーについても言及できますが、
通常は、この自動補完を使ったほうがずっとお手軽でしょう。

////////////////
Once you post a comment with a user mention, that user will be notified.
This means that this can be a really effective way of pulling people into conversations rather than making them poll.
Very often in  Pull Requests on GitHub people will pull in other people on their teams or in their company to review an Issue or Pull Request.
////////////////
コメントの中でユーザーについて言及すると、そのユーザーに通知が届きます。
他の人を議論に巻き込みたいときに、これをうまく活用できるでしょう。
GitHub 上のプルリクエストでは、チームや社内の他のメンバーを巻き込んだレビューが行われることも、珍しくありません。

////////////////
If someone gets mentioned on a Pull Request or Issue, they will be ``subscribed'' to it and will continue getting notifications any time some activity occurs on it.
You will also be subscribed to something if you opened it, if you're watching the repository or if you comment on something.
If you no longer wish to receive notifications, there is an ``Unsubscribe'' button on the page you can click to stop receiving updates on it.
////////////////
プルリクエストや Issue の中で言及された人は、自動的にそれを「購読した」状態になり、
何らかのアクションがあるたびに通知が届くことになります。
また、自分がウォッチしていたり、何かのコメントをしたりしたことがあるリポジトリに対してプルリクエストや Issue を作った場合も、
あなたはそれを自動的に「購読した」ことになります。
その通知を受け取りたくなくなった場合は、ページ上にある ``Unsubscribe'' ボタンをクリックすると、更新の通知が届かないようになります。

////////////////
.Unsubscribe from an Issue or Pull Request.
image::images/maint-06-unsubscribe.png[Unsubscribe]
////////////////
.Issue やプルリクエストの購読の解除
image::images/maint-06-unsubscribe.png[購読解除]

////////////////
===== The Notifications Page
////////////////
===== 通知ページ

////////////////
When we mention ``notifications'' here with respect to GitHub, we mean a specific way that GitHub tries to get in touch with you when events happen and there are a few different ways you can configure them.
If you go to the ``Notification center'' tab from the settings page, you can see some of the options you have.
////////////////
GitHub に関する話題で「通知」と言ったときには、それは、
何かの出来事が起こったときに GitHub が私たちにそれを伝える手段のことを指します。
どのように通知を受け取るのかについては、いくつか設定できる項目があります。
設定ページの ``Notification center'' タブに移動すると、設定可能な選択肢を確認できるでしょう。

////////////////
.Notification center options.
image::images/maint-07-notifications.png[Notification center]
////////////////
.通知センターのオプション
image::images/maint-07-notifications.png[通知センター]

////////////////
The two choices are to get notifications over ``Email'' and over ``Web'' and you can choose either, neither or both for when you actively participate in things and for activity on repositories you are watching.
////////////////
通知の受け取りかたを、「メールで受け取る」のか「Webで受け取る」のか (あるいはその両方で受け取るのか、どちらでも受け取らないのか) を、
自分がかかわっているものについてと自分がウォッチしているリポジトリについてとで、それぞれ選べます。

////////////////
====== Web Notifications
////////////////
====== Web での通知

////////////////
Web notifications only exist on GitHub and you can only check them on GitHub.
If you have this option selected in your preferences and a notification is triggered for you, you will see a small blue dot over your notifications icon at the top of your screen as seen in <<r_not_center>>.
////////////////
Web での通知は GitHub 上でだけ行われるもので、GitHub のサイトに行かないと確認できません。
このオプションを選んだ場合、あなたに届いた通知は、画面上部の通知アイコンに青い点として表示されて、
<<r_not_center>> のようになります。

[[r_not_center]]
////////////////
.Notification center.
image::images/maint-08-notifications-page.png[Notification center]
////////////////
.通知センター
image::images/maint-08-notifications-page.png[通知センター]

////////////////
If you click on that, you will see a list of all the items you have been notified about, grouped by project.
You can filter to the notifications of a specific project by clicking on its name in the left hand sidebar.
You can also acknowledge the notification by clicking the checkmark icon next to any notification, or acknowledge _all_ of the notifications in a project by clicking the checkmark at the top of the group.
There is also a mute button next to each checkmark that you can click to not receive any further notifications on that item.
////////////////
これをクリックすると、通知の一覧が、プロジェクトごとにまとまった形式で表示されます。
特定のプロジェクトの通知だけに絞り込むには、左側のサイドバーにあるプロジェクト名をクリックしましょう。
通知の受け取り確認をするには、個々の通知の隣にあるチェックマークをクリックします。
または、プロジェクトごとのグループのプロジェクト名のところにあるチェックマークをクリックすると、そのプロジェクトの _すべての_ 通知を確認済みにできます。
チェックマークの隣にあるのがミュートボタンで、これをクリックすると、その件に関する通知が今後届かなくなります。

////////////////
All of these tools are very useful for handling large numbers of notifications.
Many GitHub power users will simply turn off email notifications entirely and manage all of their notifications through this screen.
////////////////
これらをうまく活用すれば、通知が大量に届いても、うまくさばくことができます。
GitHub のパワーユーザーの多くは、メールでの通知を完全にオフにしてしまって、通知はすべてこの画面だけで管理しているようです。

////////////////
====== Email Notifications
////////////////
====== メールでの通知

////////////////
Email notifications are the other way you can handle notifications through GitHub.
If you have this turned on you will get emails for each notification.
We saw examples of this in <<r_email_notification>> and <<r_email_pr>>.
The emails will also be threaded properly, which is nice if you're using a threading email client.
////////////////
メールでの通知を使って、GitHub からの通知を処理することもできます。
この機能を有効にしておくと、さまざまな通知をメールで受け取れるようになります。
その例を <<r_email_notification>> と <<r_email_pr>> に示します。
メールのスレッド機能にも対応しているので、スレッド対応のメールソフトを使えば適切に表示できることでしょう。

////////////////
There is also a fair amount of metadata embedded in the headers of the emails that GitHub sends you, which can be really helpful for setting up custom filters and rules.
////////////////
GitHub が送るメールのヘッダーには、さまざまなメタデータが埋め込まれています。
これらを使えば、フィルタリングやフォルダ分けの設定も簡単に行えます。

////////////////
For instance, if we look at the actual email headers sent to Tony in the email shown in <<r_email_pr>>, we will see the following among the information sent:
////////////////
<<r_email_pr>> に示す、Tony に送られたメールのヘッダーには、このような情報が含まれています。

[source,mbox]
----
To: tonychacon/fade <fade@noreply.github.com>
Message-ID: <tonychacon/fade/pull/1@github.com>
Subject: [fade] Wait longer to see the dimming effect better (#1)
X-GitHub-Recipient: tonychacon
List-ID: tonychacon/fade <fade.tonychacon.github.com>
List-Archive: https://github.com/tonychacon/fade
List-Post: <mailto:reply+i-4XXX@reply.github.com>
List-Unsubscribe: <mailto:unsub+i-XXX@reply.github.com>,...
X-GitHub-Recipient-Address: tchacon@example.com
----

////////////////
There are a couple of interesting things here.
If you want to highlight or re-route emails to this particular project or even Pull Request, the information in `Message-ID` gives you all the data in `<user>/<project>/<type>/<id>` format.
If this were an issue, for example, the `<type>` field would have been ``issues'' rather than ``pull''.
////////////////
いろいろ興味深い内容が含まれていることがわかるでしょう。
特定のプロジェクト、あるいは特定のプルリクエストに関するメールを強調したり転送したりしたければ、
`Message-ID` を利用できます。これは `<user>/<project>/<type>/<id>` 形式になっています。
もしこれば issue に関する通知なら、`<type>` の部分が ``pull'' ではなく ``issues'' になります。

////////////////
The `List-Post` and `List-Unsubscribe` fields mean that if you have a mail client that understands those, you can easily post to the list or ``Unsubscribe'' from the thread.
That would be essentially the same as clicking the ``mute'' button on the web version of the notification or ``Unsubscribe'' on the Issue or Pull Request page itself.
////////////////
`List-Post` や `List-Unsubscribe` フィールドを解釈できるメールソフトを使っている場合は、
そのスレッドへの投稿やスレッドからの「脱退」(通知を受け取らないようにすること) を簡単に行えます。
スレッドからの脱退とは、Web の通知画面でミュートボタンを押したり、Issue やプルリクエストのページで ``Unsubscribe'' をクリックしたりするのと同じことです。

////////////////
It's also worth noting that if you have both email and web notifications enabled and you read the email version of the notification, the web version will be marked as read as well if you have images allowed in your mail client.
////////////////
メールと Web の両方で通知を受け取っている場合は、メールでの通知を読んだ時点で、Web 版の通知も既読になります。
ただし、お使いのメールソフトでメール本文中の画像の表示を許可している場合に限ります。

////////////////
==== Special Files
////////////////
==== 特別なファイル

////////////////
There are a couple of special files that GitHub will notice if they are present in your repository.
////////////////
以下の名前のファイルがリポジトリ内にあった場合、GitHub はそれを特別扱いします。

==== README

////////////////
The first is the `README` file, which can be of nearly any format that GitHub recognizes as prose.
For example, it could be `README`, `README.md`, `README.asciidoc`, etc.
If GitHub sees a README file in your source, it will render it on the landing page of the project.
////////////////
特別扱いする最初のファイルは `README` です。ほとんどのファイル形式について、GitHub 自身がそのフォーマットを解釈します。
たとえば `README`、`README.md`、`README.asciidoc` などが使えます。
README ファイルを発見すると、GitHub はそれをレンダリングして、プロジェクトのトップページに表示します。

////////////////
Many teams use this file to hold all the relevant project information for someone who might be new to the repository or project.
This generally includes things like:
////////////////
多くのチームは、このファイルを使って、プロジェクトに関する情報をまとめています。
そのリポジトリやプロジェクトに初めて参加する人たち向けの情報を含めているのです。たとえば以下のような内容です。

////////////////
* What the project is for
* How to configure and install it
* An example of how to use it or get it running
* The license that the project is offered under
* How to contribute to it
////////////////
* そのプロジェクトの目的
* インストール手順
* 利用例や、動作させるための手順
* そのプロジェクトのライセンス情報
* プロジェクトに参加する方法

////////////////
Since GitHub will render this file, you can embed images or links in it for added ease of understanding.
////////////////
GitHub がこのファイルをレンダリングしてくれるので、画像やリンクを追加したりして、わかりやすい説明を書くことができます。

==== CONTRIBUTING

////////////////
The other special file that GitHub recognizes is the `CONTRIBUTING` file.
If you have a file named `CONTRIBUTING` with any file extension, GitHub will show <<r_contrib_file>> when anyone starts opening a Pull Request.
////////////////
GitHub は、`CONTRIBUTING` も特別扱いするファイルとして認識します。
`CONTRIBUTING` という名前 (拡張子は何でもかまいません) のファイルを用意すると、
誰かがプルリクエストを作ろうとしたときに、GitHub がその内容を <<r_contrib_file>> のように表示します。

[[r_contrib_file]]
////////////////
.Opening a Pull Request when a CONTRIBUTING file exists.
image::images/maint-09-contrib.png[Contributing notice]
////////////////
.CONTRIBUTING ファイルが存在するプロジェクトへのプルリクエスト
image::images/maint-09-contrib.png[協力にあたっての注意]

////////////////
The idea here is that you can specify specific things you want or don't want in a Pull Request sent to your project.
This way people may actually read the guidelines before opening the Pull Request.
////////////////
このファイルには、プロジェクトへのプルリクエストを送る際に気をつけてほしいこと
(あるいは、してほしくないこと) などを書いておくといいでしょう。
プルリクエストを作ろうとした人は、このガイドラインを見ることになります。

////////////////
==== Project Administration
////////////////
==== プロジェクトの管理

////////////////
Generally there are not a lot of administrative things you can do with a single project, but there are a couple of items that might be of interest.
////////////////
実際のところ、単独のプロジェクトについての管理操作は、そんなに多くはありません。
しかし、中には皆さんの興味をひくものもあることでしょう。

////////////////
===== Changing the Default Branch
////////////////
===== デフォルトブランチの変更

////////////////
If you are using a branch other than ``master'' as your default branch that you want people to open Pull Requests on or see by default, you can change that in your repository's settings page under the ``Options'' tab.
////////////////
``master'' 以外のブランチをデフォルトにして、他の人たちからのプルリクエストのデフォルトの送り先をそこにすることができます。
デフォルトブランチを変更するには、``Options'' タブの中にある設定ページを使います。

[[r_default_branch]]
////////////////
.Change the default branch for a project.
image::images/maint-10-default-branch.png[Default branch]
////////////////
.プロジェクトのデフォルトブランチの変更
image::images/maint-10-default-branch.png[デフォルトブランチ]

////////////////
Simply change the default branch in the dropdown and that will be the default for all major operations from then on, including which branch is checked out by default when someone clones the repository.
////////////////
ドロップダウンでブランチを変更すれば、それが主要な操作のデフォルトの対象となります。
誰かがそのリポジトリをクローンしたときに、デフォルトでチェックアウトされるのも、このブランチです。

////////////////
===== Transferring a Project
////////////////
===== プロジェクトの移管

////////////////
If you would like to transfer a project to another user or an organization in GitHub, there is a ``Transfer ownership'' option at the bottom of the same ``Options'' tab of your repository settings page that allows you to do this.
////////////////
GitHub 上で、別のユーザーや組織にプロジェクトを移管したい場合に使えるのが、
同じくリポジトリの設定ページの ``Options'' タブの一番下にある ``Transfer ownership'' 欄です。

[[r_transfer_project]]
////////////////
.Transfer a project to another GitHub user or Organization.
image::images/maint-11-transfer.png[Transfer]
////////////////
.別の GitHub ユーザーや組織への、プロジェクトの移管
image::images/maint-11-transfer.png[移管]

////////////////
This is helpful if you are abandoning a project and someone wants to take it over, or if your project is getting bigger and want to move it into an organization.
////////////////
自分のリポジトリを手放して他の誰かに運営してもらう場合や、プロジェクトが成長したこともあって個人管理から組織での管理に移行したい場合などに使えます。

////////////////
Not only does this move the repository along with all its watchers and stars to another place, it also sets up a redirect from your URL to the new place.
It will also redirect clones and fetches from Git, not just web requests.
////////////////
これは、リポジトリそのものだけではなく、そのリポジトリをウォッチしたり、スターを付けたりしている人の情報も含めて移行します。
さらに、移管前の URL から新しい URL へのリダイレクトの設定も行われます。
もちろん、Web のリクエストに限らず、Git のクローンやフェッチのリクエストもリダイレクトされます。
