//////////////////////////
=== Git Attributes
//////////////////////////
=== Git の属性

(((attributes)))
//////////////////////////
Some of these settings can also be specified for a path, so that Git applies those settings only for a subdirectory or subset of files.
These path-specific settings are called Git attributes and are set either in a `.gitattributes` file in one of your directories (normally the root of your project) or in the `.git/info/attributes` file if you don't want the attributes file committed with your project.
//////////////////////////
設定項目の中には、パスに対して指定できるものもあります。Git はこれらの設定を、指定したパスのサブディレクトリやファイルにのみ適用します。
これらパス固有の設定は、 Git の属性と呼ばれ、あるディレクトリ （通常はプロジェクトのルートディレクトリ）の直下の `.gitattributes` か、あるいはそのファイルをプロジェクトとともにコミットしたくない場合は `.git/info/attributes` に設定します。

//////////////////////////
Using attributes, you can do things like specify separate merge strategies for individual files or directories in your project, tell Git how to diff non-text files, or have Git filter content before you check it into or out of Git.
In this section, you'll learn about some of the attributes you can set on your paths in your Git project and see a few examples of using this feature in practice.
//////////////////////////
属性を使うと、ファイルやディレクトリ単位で個別のマージ戦略を指定したり、テキストファイル以外の diff を取る方法を指示したり、あるいはチェックインやチェックアウトの前にその内容を Git にフィルタリングさせたりできます。
このセクションでは、Git プロジェクトでパスに対して設定できる属性のいくつかについて学び、実際にその機能を使う例を見ていきます。

//////////////////////////
==== Binary Files
//////////////////////////
==== バイナリファイル

(((binary files)))
//////////////////////////
One cool trick for which you can use Git attributes is telling Git which files are binary (in cases it otherwise may not be able to figure out) and giving Git special instructions about how to handle those files.
For instance, some text files may be machine generated and not diffable, whereas some binary files can be diffed.
You'll see how to tell Git which is which.
//////////////////////////
Git の属性を使ってできるちょっとした技として、どのファイルがバイナリファイルなのかを (その他の方法で判別できない場合のために) 指定した上で、 Git に対してバイナリファイルの扱い方を指示するというものがあります。
たとえば、機械で生成したテキストファイルの中には diff が取得できないものがありますし、バイナリファイルであっても diff が取得できるものもあります。
それを Git に指示する方法を紹介します。

//////////////////////////
===== Identifying Binary Files
//////////////////////////
===== バイナリファイルの特定

//////////////////////////
Some files look like text files but for all intents and purposes are to be treated as binary data.
For instance, Xcode projects on the Mac contain a file that ends in `.pbxproj`, which is basically a JSON (plain-text JavaScript data format) dataset written out to disk by the IDE, which records your build settings and so on.
Although it's technically a text file (because it's all UTF-8), you don't want to treat it as such because it's really a lightweight database – you can't merge the contents if two people change it, and diffs generally aren't helpful.
The file is meant to be consumed by a machine.
In essence, you want to treat it like a binary file.
//////////////////////////
テキストファイルのように見えるファイルであっても、何らかの目的のために意図的にバイナリデータとして扱いたいことがあります。
たとえば、Mac の Xcode プロジェクトの中には `.pbxproj` で終わる名前のファイルがあります。これは JSON (プレーンテキスト形式の JavaScript のデータフォーマット) のデータセットで、IDE がビルドの設定などをディスクに書き出したものです。
このファイルの内容はすべて UTF-8 の文字なので、理論上はテキストファイルであると言えます。しかし、このファイルをテキストファイルとして扱いたくはありません。実際のところ、このファイルは軽量なデータベースとして使われているからです。他の人が変更した内容はマージできませんし、diff をとってもあまり意味がありません。
このファイルは、基本的に機械が処理するものなのです。
要するに、バイナリファイルと同じように扱いたいということです。

//////////////////////////
To tell Git to treat all `pbxproj` files as binary data, add the following line to your `.gitattributes` file:
//////////////////////////
すべての `pbxproj` ファイルをバイナリデータとして扱うよう Git に指定するには、次の行を `.gitattributes` ファイルに追加します。

[source,ini]
----
*.pbxproj binary
----

//////////////////////////
Now, Git won't try to convert or fix CRLF issues; nor will it try to compute or print a diff for changes in this file when you run `git show` or `git diff` on your project.
//////////////////////////
これで、Git が CRLF 問題の対応をすることもなくなりますし、`git show` や `git diff` を実行したときにもこのファイルの diff を調べることはなくなります。

//////////////////////////
===== Diffing Binary Files
//////////////////////////
===== バイナリファイルの差分

//////////////////////////
You can also use the Git attributes functionality to effectively diff binary files.
You do this by telling Git how to convert your binary data to a text format that can be compared via the normal diff.
//////////////////////////
バイナリファイルに対して意味のある差分を取る際にも、Git の属性を使うことができます。
普通の diff でも比較できるよう、バイナリデータをテキストデータに変換する方法をGitに教えればいいのです。

//////////////////////////
First, you'll use this technique to solve one of the most annoying problems known to humanity: version-controlling Microsoft Word documents.
Everyone knows that Word is the most horrific editor around, but oddly, everyone still uses it.
If you want to version-control Word documents, you can stick them in a Git repository and commit every once in a while; but what good does that do?
If you run `git diff` normally, you only see something like this:
//////////////////////////
このテクニックを使ってまず解決したいことといえば、人類にとって最も厄介な問題のひとつ、Wordで作成した文書のバージョン管理ではないでしょうか。
奇妙なことに、Wordは最悪のエディタだと全ての人が知っているにも係わらず、皆がWordを使っています。
Word文書をバージョン管理したいと思ったなら、Gitのリポジトリにそれらを追加して、まとめてコミットすればいいのです。しかし、それでいいのでしょうか？
あなたが `git diff` をいつも通りに実行すると、次のように表示されるだけです。

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 88839c4..4afcb7c 100644
Binary files a/chapter1.docx and b/chapter1.docx differ
----

//////////////////////////
You can't directly compare two versions unless you check them out and scan them manually, right?
It turns out you can do this fairly well using Git attributes.
Put the following line in your `.gitattributes` file:
//////////////////////////
これでは、2つのバージョンをチェックアウトして、目視で見比べなくては、比較はできませんよね？
Gitの属性を使えば、これをうまく解決できます。
`.gitattributes` に次の行を追加して下さい。

[source,ini]
----
*.docx diff=word
----

//////////////////////////
This tells Git that any file that matches this pattern (`.docx`) should use the ``word'' filter when you try to view a diff that contains changes.
What is the ``word'' filter?
You have to set it up.
Here you'll configure Git to use the `docx2txt` program to convert Word documents into readable text files, which it will then diff properly.
//////////////////////////
これは、指定したパターン (`.docx`) にマッチした全てのファイルに対して、差分を表示する時には ``word'' というフィルタを使うよう Git に指示しているのです。
では、 ``word'' フィルタとは何でしょうか？
これは自分で用意しなければなりません。
ここでは、 `docx2txt` を使ってWord文書をテキストファイルに変換した上で、正しく diff が取れるように設定してみましょう。

//////////////////////////
First, you'll need to install `docx2txt`; you can download it from http://docx2txt.sourceforge.net[].
Follow the instructions in the `INSTALL` file to put it somewhere your shell can find it.
Next, you'll write a wrapper script to convert output to the format Git expects.
Create a file that's somewhere in your path called `docx2txt`, and add these contents:
//////////////////////////
まず、 `docx2txt` をインストールする必要があります。 http://docx2txt.sourceforge.net[] からダウンロードしたら、 `INSTALL` ファイルの指示に従って、シェルから見える場所にファイルを置いてください。
次に、出力を Git に合わせて変換するラッパースクリプトを作成します。
パスの通った場所に、 `docx2txt` という名前のファイルを次の内容で作成してください。

[source,console]
----
#!/bin/bash
docx2txt.pl $1 -
----

//////////////////////////
Don't forget to `chmod a+x` that file.
Finally, you can configure Git to use this script:
//////////////////////////
作ったファイルに `chmod a+x` するのを忘れないでください。
最後に、Git がこのファイルを使うように設定します。

[source,console]
----
$ git config diff.word.textconv docx2txt
----

//////////////////////////
Now Git knows that if it tries to do a diff between two snapshots, and any of the files end in `.docx`, it should run those files through the ``word'' filter, which is defined as the `docx2txt` program.
This effectively makes nice text-based versions of your Word files before attempting to diff them.
//////////////////////////
これで、二つのスナップショットの diff を取る際に、ファイル名の末尾が `.docx` だったら、 ``word'' フィルタを通す（この ``word'' フィルタは `docx2txt` というプログラムとして定義されている）ということが Git に伝わりました。
こうすることで、Wordファイルの差分を取る際に、より効果的なテキストベースでの差分を取ることができるようになります。

//////////////////////////
Here's an example: Chapter 1 of this book was converted to Word format and committed in a Git repository.
Then a new paragraph was added.
Here's what `git diff` shows:
//////////////////////////
例を示しましょう。この本の第1章をWord形式に変換し、Gitリポジトリに登録しました。
さらに、新しい段落を追加しました。
`git diff` の出力は次のようになります。

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 0b013ca..ba25db5 100644
--- a/chapter1.docx
+++ b/chapter1.docx
@@ -2,6 +2,7 @@
 This chapter will be about getting started with Git. We will begin at the beginning by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it setup to start working with. At the end of this chapter you should understand why Git is around, why you should use it and you should be all setup to do so.
 1.1. About Version Control
 What is "version control", and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.
+Testing: 1, 2, 3.
 If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.
 1.1.1. Local Version Control Systems
 Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.
----

//////////////////////////
Git successfully and succinctly tells us that we added the string ``Testing: 1, 2, 3.'', which is correct.
It's not perfect – formatting changes wouldn't show up here – but it certainly works.
//////////////////////////
Gitは、追加した ``Testing: 1, 2, 3.'' という正しい文字列を首尾よく、かつ、簡潔に知らせてくれました。
これだけでは完璧ではありません（書式の変更はここでは表示されていません）が、確実に動作しています。

//////////////////////////
Another interesting problem you can solve this way involves diffing image files.
One way to do this is to run image files through a filter that extracts their EXIF information – metadata that is recorded with most image formats.
If you download and install the `exiftool` program, you can use it to convert your images into text about the metadata, so at least the diff will show you a textual representation of any changes that happened.
Put the following line in your `.gitattributes` file:
//////////////////////////
その他の興味深い問題としては、画像ファイルの差分があります。
ひとつの方法として、EXIF情報（多くのファイル形式で使用されているメタデータ）を抽出するフィルタを使う方法があります。
`exiftool` をダウンロードしてインストールすれば、画像データを、メタデータを表すテキストデータへ変換できます。これによって、 diff では少なくとも、変更内容をテキスト形式で表示できるようになります。
ではここで、以下の行を `.gitattributes` に追加してみましょう。

[source,ini]
----
*.png diff=exif
----

//////////////////////////
Configure Git to use this tool:
//////////////////////////
続いて、さきほどインストールしたツールを使うようGitの設定を変更します。

[source,console]
----
$ git config diff.exif.textconv exiftool
----

//////////////////////////
If you replace an image in your project and run `git diff`, you see something like this:
//////////////////////////
プロジェクト中の画像データを置き換えて `git diff` を実行すると、次のように表示されるでしょう。

[source,diff]
----
diff --git a/image.png b/image.png
index 88839c4..4afcb7c 100644
--- a/image.png
+++ b/image.png
@@ -1,12 +1,12 @@
 ExifTool Version Number         : 7.74
-File Size                       : 70 kB
-File Modification Date/Time     : 2009:04:21 07:02:45-07:00
+File Size                       : 94 kB
+File Modification Date/Time     : 2009:04:21 07:02:43-07:00
 File Type                       : PNG
 MIME Type                       : image/png
-Image Width                     : 1058
-Image Height                    : 889
+Image Width                     : 1056
+Image Height                    : 827
 Bit Depth                       : 8
 Color Type                      : RGB with Alpha
----

//////////////////////////
You can easily see that the file size and image dimensions have both changed.
//////////////////////////
ファイルのサイズと画像のサイズが変更されたことが簡単に見て取れます。

[[r_keyword_expansion]]
//////////////////////////
==== Keyword Expansion
//////////////////////////
==== キーワード展開

(((keyword expansion)))
//////////////////////////
SVN- or CVS-style keyword expansion is often requested by developers used to those systems.
The main problem with this in Git is that you can't modify a file with information about the commit after you've committed, because Git checksums the file first.
However, you can inject text into a file when it's checked out and remove it again before it's added to a commit.
Git attributes offers you two ways to do this.
//////////////////////////
SubversionやCVSを使っていた開発者から、キーワード展開機能をリクエストされることがよくあります。
ここでの主な問題は、Git では、コミットの後に、コミットに関する情報を使ってファイルを変更することはできないということです。これは、Git がコミットの最初にファイルのチェックサムを生成するためです。
しかし、ファイルをチェックアウトする際にテキストを挿入し、コミットへ追加する際にそれを削除することは可能です。
Gitの属性はこれを行うための方法を2つ提供します。

//////////////////////////
First, you can inject the SHA-1 checksum of a blob into an `$Id$` field in the file automatically.
If you set this attribute on a file or set of files, then the next time you check out that branch, Git will replace that field with the SHA-1 of the blob.
It's important to notice that it isn't the SHA-1 of the commit, but of the blob itself.
Put the following line in your `.gitattributes` file:
//////////////////////////
ひとつめの方法として、ファイルの `$Id$` フィールドへ、 blob の SHA-1 チェックサムを自動的に挿入できます。
あるファイル、もしくはいくつかのファイルに対してこの属性を設定すれば、次にそのブランチをチェックアウトする時、Gitはこの置き換えを行うようになります。
ただし、挿入されるチェックサムはコミットに対するものではなく、対象となるblobのものであるという点に注意して下さい。
ではここで、以下の行を `.gitattributes` に追加してみましょう。

[source,ini]
----
*.txt ident
----

//////////////////////////
Add an `$Id$` reference to a test file:
//////////////////////////
続いて、`$Id$` への参照をテスト用ファイルに追加します。

[source,console]
----
$ echo '$Id$' > test.txt
----

//////////////////////////
The next time you check out this file, Git injects the SHA-1 of the blob:
//////////////////////////
そうすると、次にこのファイルをチェックアウトする時、GitはblobのSHA-1チェックサムを挿入します。

[source,console]
----
$ rm test.txt
$ git checkout -- test.txt
$ cat test.txt
$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $
----

//////////////////////////
However, that result is of limited use.
If you've used keyword substitution in CVS or Subversion, you can include a datestamp – the SHA-1 isn't all that helpful, because it's fairly random and you can't tell if one SHA-1 is older or newer than another just by looking at them.
//////////////////////////
しかし、この結果はあまり役に立ちません。
CVSやSubversionのキーワード展開ではタイムスタンプを含めることができます。対して、SHA-1チェックサムは完全にランダムな値ですから、2つの値の新旧を知るための助けにはなりません。

//////////////////////////
It turns out that you can write your own filters for doing substitutions in files on commit/checkout.
These are called ``clean'' and ``smudge'' filters.
In the `.gitattributes` file, you can set a filter for particular paths and then set up scripts that will process files just before they're checked out (``smudge'', see <<rfilters_a>>) and just before they're staged (``clean'', see <<rfilters_b>>).
These filters can be set to do all sorts of fun things.
//////////////////////////
これには、コミットおよびチェックアウトの時にキーワード展開を行うフィルタを書いてやれば対応できます。
このフィルタは ``clean'' および ``smudge'' フィルタと呼ばれます。
`.gitattributes` ファイルで、特定のパスにフィルタを設定し、チェックアウトの直前（ ``smudge'' 、 <<rfilters_a>> を参照）およびステージングの直前（ ``clean'' 、 <<rfilters_b>> を参照）に処理を行うスクリプトを設定できます。
これらのフィルタは、色々と面白いことに使えます。

[[rfilters_a]]
//////////////////////////
.The ``smudge'' filter is run on checkout.
image::images/smudge.png[The ``smudge'' filter is run on checkout.]
//////////////////////////
.チェックアウトする時に ``smudge'' フィルタを実行する
image::images/smudge.png[チェックアウトする時に ``smudge'' フィルタを実行する]

[[rfilters_b]]
//////////////////////////
.The ``clean'' filter is run when files are staged.
image::images/clean.png[The ``clean'' filter is run when files are staged.]
//////////////////////////
.ステージングする時に ``clean'' フィルタを実行する
image::images/clean.png[ステージングする時に ``clean'' フィルタを実行する]

//////////////////////////
The original commit message for this feature gives a simple example of running all your C source code through the `indent` program before committing.
You can set it up by setting the filter attribute in your `.gitattributes` file to filter `*.c` files with the ``indent'' filter:
//////////////////////////
この機能に対してオリジナルのコミットメッセージは簡単な例を与えてくれています。それはコミット前にCのソースコードを `indent` プログラムに通すというものです。
`*.c` ファイルに対してこのフィルタを実行するように、`.gitattributes` ファイルにfilter属性を設定できます。

[source,ini]
----
*.c filter=indent
----

//////////////////////////
Then, tell Git what the ``indent'' filter does on smudge and clean:
//////////////////////////
それから、smudgeとcleanで ``indent'' フィルタが何を行えばいいのかをGitに教えます。

[source,console]
----
$ git config --global filter.indent.clean indent
$ git config --global filter.indent.smudge cat
----

//////////////////////////
In this case, when you commit files that match `*.c`, Git will run them through the indent program before it stages them and then run them through the `cat` program before it checks them back out onto disk.
The `cat` program does essentially nothing: it spits out the same data that it comes in.
This combination effectively filters all C source code files through `indent` before committing.
//////////////////////////
このケースでは、 `*.c` にマッチするファイルをコミットした時、Gitはステージング前にindentプログラムにファイルを通し、チェックアウトする前には `cat` を通すようにします。
`cat` は基本的に何もしません。入力されたデータと同じデータを吐き出すだけです。
この組み合わせを使えば、Cのソースコードのコミット前に、効果的に `indent` を通せます。

//////////////////////////
Another interesting example gets `$Date$` keyword expansion, RCS style.
To do this properly, you need a small script that takes a filename, figures out the last commit date for this project, and inserts the date into the file.
Here is a small Ruby script that does that:
//////////////////////////
もうひとつの興味深い例として、RCSスタイルの `$Date$` キーワード展開があります。
これを正しく行うには、ファイル名を受け取り、プロジェクトの最新のコミットの日付を見て、その日付をファイルに挿入するちょっとしたスクリプトが必要になります。
これを行うRubyスクリプトを以下に示します。

[source,ruby]
----
#! /usr/bin/env ruby
data = STDIN.read
last_date = `git log --pretty=format:"%ad" -1`
puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')
----

//////////////////////////
All the script does is get the latest commit date from the `git log` command, stick that into any `$Date$` strings it sees in stdin, and print the results – it should be simple to do in whatever language you're most comfortable in.
You can name this file `expand_date` and put it in your path.
Now, you need to set up a filter in Git (call it `dater`) and tell it to use your `expand_date` filter to smudge the files on checkout.
You'll use a Perl expression to clean that up on commit:
//////////////////////////
このスクリプトは、`git log` コマンドの出力から最新のコミットの日付を取得し、標準入力中のすべての `$Date$` 文字列にその日付を追加し、結果を出力します。お気に入りのどんな言語で書くにしても、簡単なスクリプトになるでしょう。
このスクリプトファイルに `expand_date` と名前をつけ、実行パスのどこかに置きます。
次に、Git にフィルタ（ここでは `dater` とします）を設定し、チェックアウト時に smudge で `expand_date` フィルタを使うように指定します。
コミット時に日付を削除するのには、 Perl の正規表現が使えます。

[source,console]
----
$ git config filter.dater.smudge expand_date
$ git config filter.dater.clean 'perl -pe "s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/"'
----

//////////////////////////
This Perl snippet strips out anything it sees in a `$Date$` string, to get back to where you started.
Now that your filter is ready, you can test it by setting up a Git attribute for that file that engages the new filter and creating a file with your `$Date$` keyword:
//////////////////////////
このPerlのスニペットは、 `$Date$` 文字列の内側にある内容を削除し、日付を挿入する前の状態に戻します。
さて、フィルタの準備ができました。このファイルが新しいフィルタに引っかかるように Git の属性を設定し、ファイルに `$Date$` キーワードを追加した上で、テストしてみましょう。

[source,ini]
----
date*.txt filter=dater
----

[source,console]
----
$ echo '# $Date$' > date_test.txt
----

//////////////////////////
If you commit those changes and check out the file again, you see the keyword properly substituted:
//////////////////////////
これらの変更をコミットして、再度ファイルをチェックアウトすれば、キーワードが正しく置き換えられているのがわかります。

[source,console]
----
$ git add date_test.txt .gitattributes
$ git commit -m "Testing date expansion in Git"
$ rm date_test.txt
$ git checkout date_test.txt
$ cat date_test.txt
# $Date: Tue Apr 21 07:26:52 2009 -0700$
----

//////////////////////////
You can see how powerful this technique can be for customized applications.
You have to be careful, though, because the `.gitattributes` file is committed and passed around with the project, but the driver (in this case, `dater`) isn't, so it won't work everywhere.
When you design these filters, they should be able to fail gracefully and have the project still work properly.
//////////////////////////
アプリケーションのカスタマイズにあたり、このテクニックがどれほど強力か、おわかりいただけたと思います。
しかし、注意してほしいのですが、 `.gitattributes` ファイルはコミットされてプロジェクト内で共有されますが、ドライバ（このケースで言えば、`dater`）そうはそうはいきません。そのため、この機能はどこででも働くわけではありません。
フィルタを設計する時には、たとえフィルタが正常に動作しなかったとしても、プロジェクトは適切に動き続けられるようにすべきです。

//////////////////////////
==== Exporting Your Repository
//////////////////////////
==== リポジトリをエクスポートする

(((archiving)))
//////////////////////////
Git attribute data also allows you to do some interesting things when exporting an archive of your project.
//////////////////////////
あなたのプロジェクトのアーカイブをエクスポートする時には、Gitの属性データを使って興味深いことができます。

===== `export-ignore`

//////////////////////////
You can tell Git not to export certain files or directories when generating an archive.
If there is a subdirectory or file that you don't want to include in your archive file but that you do want checked into your project, you can determine those files via the `export-ignore` attribute.
//////////////////////////
アーカイブを生成するとき、特定のファイルやディレクトリをエクスポートしないように設定できます。
プロジェクトにはチェックインしたいが、アーカイブファイルには含めたくないディレクトリやファイルがあるなら、それらに `export-ignore` 属性を設定することで、分別が行えます。

//////////////////////////
For example, say you have some test files in a `test/` subdirectory, and it doesn't make sense to include them in the tarball export of your project.
You can add the following line to your Git attributes file:
//////////////////////////
例えば、プロジェクトをエクスポートする際に tarball に含めたくないテストファイルが、 `test/` ディレクトリ以下に入っているとしましょう。
その場合、次の1行をGitの属性ファイルに追加します。

[source,ini]
----
test/ export-ignore
----

//////////////////////////
Now, when you run git archive to create a tarball of your project, that directory won't be included in the archive.
//////////////////////////
これで、プロジェクトのtarballを作成するために `git archive` を実行した時、アーカイブには `test/` ディレクトリが含まれないようになります。

===== `export-subst`

//////////////////////////
When exporting files for deployment you can apply `git log`'s formatting and keyword-expansion processing to selected portions of files marked with the
`export-subst` attribute.

For instance, if you want to include a file named `LAST_COMMIT` in your project, and have metadata about the last commit automatically injected into it when `git archive` runs, you can for example set up your `.gitattributes` and `LAST_COMMIT` files like this:
//////////////////////////
デプロイ用にファイルをエクスポートする際に、`export-subst` 属性のついたファイルを指定して `git log` のログ書式指定機能とキーワード展開機能で生成した内容をファイルに付与できます。
例えば、`LAST_COMMIT` という名前のファイルをプロジェクトに追加し、`git archive` を実行した時にそのファイルのメタデータを最新コミットと同じ内容に変換したい場合、`.gitattributes` ファイルと `LAST_COMMIT` ファイルを
次のように設定します。

[source,ini]
----
LAST_COMMIT export-subst
----

[source,console]
----
$ echo 'Last commit date: $Format:%cd by %aN$' > LAST_COMMIT
$ git add LAST_COMMIT .gitattributes
$ git commit -am 'adding LAST_COMMIT file for archives'
----

//////////////////////////
When you run `git archive`, the contents of the archived file will look like this:
//////////////////////////
`git archive` を実行すると、 `LAST_COMMIT` は以下のような内容になっているはずです。

[source,console]
----
$ git archive HEAD | tar xCf ../deployment-testing -
$ cat ../deployment-testing/LAST_COMMIT
Last commit date: Tue Apr 21 08:38:48 2009 -0700 by Scott Chacon
----

//////////////////////////
The substitutions can include for example the commit message and any git notes, and git log can do simple word wrapping:
//////////////////////////
このような置換に、コミットメッセージや git note を用いることもできます。その際、git log コマンドのワードラップ処理が適用されます。

[source,console]
----
$ echo '$Format:Last commit: %h by %aN at %cd%n%+w(76,6,9)%B$' > LAST_COMMIT
$ git commit -am 'export-subst uses git log's custom formatter

git archive uses git log's `pretty=format:` processor
directly, and strips the surrounding `$Format:` and `$`
markup from the output.
'
$ git archive @ | tar xfO - LAST_COMMIT
Last commit: 312ccc8 by Jim Hill at Fri May 8 09:14:04 2015 -0700
       export-subst uses git log's custom formatter

         git archive uses git log's `pretty=format:` processor directly, and
         strips the surrounding `$Format:` and `$` markup from the output.
----

//////////////////////////
The resulting archive is suitable for deployment work, but like any exported archive it isn't suitable for further development work.
//////////////////////////
この結果作成されたアーカイブはデプロイするのにぴったりです。一方、いったんエクスポートされてしまったアーカイブで開発を続けるのはおすすめできません。

//////////////////////////
==== Merge Strategies
//////////////////////////
==== マージの戦略

(((merging, strategies)))
//////////////////////////
You can also use Git attributes to tell Git to use different merge strategies for specific files in your project.
One very useful option is to tell Git to not try to merge specific files when they have conflicts, but rather to use your side of the merge over someone else's.
//////////////////////////
Gitの属性を使えば、プロジェクト中の特定のファイルに対して、異なるマージ戦略を使うこともできます。
非常に有用なオプションのひとつに、指定したファイルで競合が発生した場合に、マージを行わずに、あなたの変更内容で他の誰かの変更を上書きするように設定するというものがあります。

//////////////////////////
This is helpful if a branch in your project has diverged or is specialized, but you want to be able to merge changes back in from it, and you want to ignore certain files.
Say you have a database settings file called `database.xml` that is different in two branches, and you want to merge in your other branch without messing up the database file.
You can set up an attribute like this:
//////////////////////////
これはプロジェクトにおいて、分岐したブランチや、特別版のブランチで作業をしている時、そのブランチでの変更をマージさせたいが、特定のファイルの変更はなかったことにしたいというような時に助けになります。
例えば、 `database.xml` というデータベースの設定ファイルがあり、ふたつのブランチでその内容が異なっているとしましょう。そして、そのデータベースファイルを台無しにすることなしに、一方のブランチへとマージしたいとします。
これは、次のように属性を設定すれば実現できます。

[source,ini]
----
database.xml merge=ours
----

//////////////////////////
And then define a dummy `ours` merge strategy with:
//////////////////////////
その上で、ダミーのマージ戦略 `ours` を次のように定義します。

[source,console]
----
$ git config --global merge.ours.driver true
----

//////////////////////////
If you merge in the other branch, instead of having merge conflicts with the `database.xml` file, you see something like this:
//////////////////////////
もう一方のブランチでマージを実行すると、 `database.xml` に関する競合は発生せず、次のような結果になります。

[source,console]
----
$ git merge topic
Auto-merging database.xml
Merge made by recursive.
----

//////////////////////////
In this case, `database.xml` stays at whatever version you originally had.
//////////////////////////
この場合、 `database.xml` は元々のバージョンのまま、書き変わりません。
