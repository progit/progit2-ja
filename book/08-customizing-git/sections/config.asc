[[r_git_config]]
//////////////////////////
=== Git Configuration
//////////////////////////
=== Git の設定

(((git commands, config)))
//////////////////////////
As you briefly saw in <<ch01-introduction#ch01-introduction>>, you can specify Git configuration settings with the `git config` command.
One of the first things you did was set up your name and email address:
//////////////////////////
<<ch01-introduction#ch01-introduction>> で手短にごらんいただいたように、`git config` コマンドで Gitの設定が行えます。
最初にすることと言えば、名前とメールアドレスの設定でしょう。

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

//////////////////////////
Now you'll learn a few of the more interesting options that you can set in this manner to customize your Git usage.
//////////////////////////
ここでは、同じようにして設定できるより興味深い項目をいくつか身につけ、Git をカスタマイズしてみましょう。

//////////////////////////
First, a quick review: Git uses a series of configuration files to determine non-default behavior that you may want.
The first place Git looks for these values is in an `/etc/gitconfig` file, which contains values for every user on the system and all of their repositories.
If you pass the option `--system` to `git config`, it reads and writes from this file specifically.
//////////////////////////
まず、簡単におさらいしましょう。Git では、いくつかの設定ファイルを使ってデフォルト以外の挙動を定義します。
最初に Git が見るのは `/etc/gitconfig` で、ここにはシステム上の全ユーザーの全リポジトリ向けの設定値を記述します。
`git config` にオプション `--system` を指定すると、このファイルの読み書きを行います。

//////////////////////////
The next place Git looks is the `~/.gitconfig` (or `~/.config/git/config`) file, which is specific to each user.
You can make Git read and write to this file by passing the `--global` option.
//////////////////////////
次に Git が見るのは `~/.gitconfig` （または `~/.config/git/config` ）で、これは各ユーザー専用のファイルです。
Git でこのファイルの読み書きをするには、`--global` オプションを指定します。

//////////////////////////
Finally, Git looks for configuration values in the configuration file in the Git directory (`.git/config`) of whatever repository you're currently using.
These values are specific to that single repository.
//////////////////////////
最後に Git が設定値を探すのは、現在使用中のリポジトリの設定ファイル (`.git/config`) です。
この値は、そのリポジトリだけで有効なものです。

//////////////////////////
Each of these ``levels'' (system, global, local) overwrites values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`, for instance.
//////////////////////////
これらの ``レベル'' （システム、グローバル、ローカル）の間では、いずれも後から読んだ値がその前の値を上書きします。したがって、たとえば `.git/config` に書いた値は `/etc/gitconfig` での設定よりも優先されます。

[NOTE]
====
//////////////////////////
Git's configuration files are plain-text, so you can also set these values by manually editing the file and inserting the correct syntax.
It's generally easier to run the `git config` command, though.
//////////////////////////
Git の設定ファイルはプレーンテキストなので、これらのファイルを手動で編集し、正しい構文で内容を追加することで、上記のような設定を行うことも可能ですが、通常は `git config` コマンドを使ったほうが簡単です。
====

//////////////////////////
==== Basic Client Configuration
//////////////////////////
==== 基本的なクライアントのオプション

//////////////////////////
The configuration options recognized by Git fall into two categories: client-side and server-side.
The majority of the options are client-side – configuring your personal working preferences.
Many, _many_ configuration options are supported, but a large fraction of them are only useful in certain edge cases.
We'll only be covering the most common and most useful here.
If you want to see a list of all the options your version of Git recognizes, you can run
//////////////////////////
Git の設定オプションは、おおきく二種類に分類できます。クライアント側のオプションとサーバー側のオプションです。
大半のオプションは、クライアント側のもの、つまり個人的な作業環境を設定するためのものとなります。
大量の、_本当に大量の_ オプションが使用できますが、ここでは、もっとも一般的で、もっともよく使われているものだけを取り上げます。
その他のオプションの多くは特定の場合にのみ有用なものなので、ここでは扱いません。
Git で使えるすべてのオプションを知りたい場合は、次のコマンドを実行しましょう。

[source,console]
----
$ man git-config
----

//////////////////////////
This command lists all the available options in quite a bit of detail.
You can also find this reference material at http://git-scm.com/docs/git-config.html[].
//////////////////////////
このコマンドは、利用できるすべてのオプションを、簡単な説明とともに一覧表示します。
この内容は、 http://git-scm.com/docs/git-config.html[] にあるリファレンスでも見ることができます。

===== `core.editor`

((($EDITOR)))((($VISUAL, see $EDITOR)))
//////////////////////////
By default, Git uses whatever you've set as your default text editor (`$VISUAL` or `$EDITOR`) or else falls back to the `vi` editor to create and edit your commit and tag messages.
To change that default to something else, you can use the `core.editor` setting:
//////////////////////////
デフォルトでは、コミットやタグのメッセージを編集するときには、ユーザーがデフォルトエディタとして設定したエディタ（ `$VISUAL` または `$EDITOR`）が使われます。デフォルトエディタが設定されていない場合は vi エディタが使われます。
このデフォルト設定を別のものに変更するには `core.editor` を設定します。

[source,console]
----
$ git config --global core.editor emacs
----

//////////////////////////
Now, no matter what is set as your default shell editor, Git will fire up Emacs to edit messages.
//////////////////////////
これで、シェルのデフォルトエディタに関係なく、Git でメッセージを編集する際には Emacs が起動されるようになりました。

===== `commit.template`

(((commit templates)))
//////////////////////////
If you set this to the path of a file on your system, Git will use that file as the default message when you commit.
For instance, suppose you create a template file at `~/.gitmessage.txt` that looks like this:
//////////////////////////
システム上のファイルへのパスをここに設定すると、Git はそのファイルをコミット時のデフォルトメッセージとして使います。
たとえば、次のようなテンプレートファイルを作って `~/.gitmessage.txt` においたとしましょう。

[source,text]
----
subject line

what happened

[ticket: X]
----

//////////////////////////
To tell Git to use it as the default message that appears in your editor when you run `git commit`, set the `commit.template` configuration value:
//////////////////////////
`git commit` のときにエディタに表示されるデフォルトメッセージをこれにするには、`commit.template` の設定を変更します。

[source,console]
----
$ git config --global commit.template ~/.gitmessage.txt
$ git commit
----

//////////////////////////
Then, your editor will open to something like this for your placeholder commit message when you commit:
//////////////////////////
すると、コミットメッセージの雛形としてこのような内容がエディタに表示されます。

[source,text]
----
subject line

what happened

[ticket: X]
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
# modified:   lib/test.rb
#
~
~
".git/COMMIT_EDITMSG" 14L, 297C
----

//////////////////////////
If your team has a commit-message policy, then putting a template for that policy on your system and configuring Git to use it by default can help increase the chance of that policy being followed regularly.
//////////////////////////
コミットメッセージについてチーム内に所定の決まりがあるのなら、その決まりに従ったテンプレートをシステム上に作って Git にそれを使わせるようにするとよいでしょう。そうすれば、その決まりに従ってもらいやすくなります。

===== `core.pager`

(((pager)))
//////////////////////////
This setting determines which pager is used when Git pages output such as `log` and `diff`.
You can set it to `more` or to your favorite pager (by default, it's `less`), or you can turn it off by setting it to a blank string:
//////////////////////////
core.pager は、Git が `log` や `diff` などを出力するときに使うページャを設定します。
`more` などのお好みのページャを設定したり (デフォルトは `less` です)、空文字列を設定してページャを使わないようにしたりできます。

[source,console]
----
$ git config --global core.pager ''
----

//////////////////////////
If you run that, Git will page the entire output of all commands, no matter how long they are.
//////////////////////////
これを実行すると、すべてのコマンドの出力を、どんなに長くなったとしても全部 Git が出力するようになります。

===== `user.signingkey`

(((GPG)))
//////////////////////////
If you're making signed annotated tags (as discussed in <<ch07-git-tools#r_signing>>), setting your GPG signing key as a configuration setting makes things easier.
Set your key ID like so:
//////////////////////////
署名入りの注釈付きタグ (<<ch07-git-tools#r_signing>> で取り上げました) を作る場合は、GPG 署名用の鍵を登録しておくと便利です。
鍵の ID を設定するには、このようにします。

[source,console]
----
$ git config --global user.signingkey <gpg-key-id>
----

//////////////////////////
Now, you can sign tags without having to specify your key every time with the `git tag` command:
//////////////////////////
これで、`git tag` コマンドでいちいち鍵を指定しなくてもタグに署名できるようになりました。

[source,console]
----
$ git tag -s <tag-name>
----

===== `core.excludesfile`

(((excludes)))(((.gitignore)))
//////////////////////////
You can put patterns in your project's `.gitignore` file to have Git not see them as untracked files or try to stage them when you run `git add` on them, as discussed in <<ch02-git-basics#r_ignoring>>.
//////////////////////////
プロジェクトごとの `.gitignore` ファイルでパターンを指定すると、`git add` したときに Git がそのファイルを無視してステージしないようになります。これについては <<ch02-git-basics#r_ignoring>> で説明しました。

//////////////////////////
But sometimes you want to ignore certain files for all repositories that you work with.
If your computer is running Mac OS X, you're probably familiar with `.DS_Store` files.
If your preferred editor is Emacs or Vim, you know about filenames that end with a `~` or `.swp`.
//////////////////////////
ですが、作業中のすべてのリポジトリで、ある特定のファイルを無視したい場合もあります。
Mac OS X を使っているのなら、 `.DS_Store` というファイルに見おぼえがあるでしょう。
使っているエディタが Emacs か Vim なら、 `~` で終わるファイル名のことを知っていることと思います。

//////////////////////////
This setting lets you write a kind of global `.gitignore` file.
If you create a `~/.gitignore_global` file with these contents:
//////////////////////////
このような設定を行うには、グローバルな `.gitignore` のようなファイルが必要です。
`~/.gitignore_global` ファイルへ次の内容を書き込んで、

[source,ini]
----
*~
.*.swp
.DS_Store
----

//////////////////////////
…and you run `git config --global core.excludesfile ~/.gitignore_global`, Git will never again bother you about those files.
//////////////////////////
その上で `git config --global core.excludesfile ~/.gitignore_global` を実行すれば、これらのファイルで手を煩わすことは二度となくなります。

===== `help.autocorrect`

(((autocorrect)))
//////////////////////////
If you mistype a command, it shows you something like this:
//////////////////////////
Git でコマンドを打ち間違えると、こんなふうに表示されます。

[source,console]
----
$ git chekcout master
git: 'chekcout' is not a git command. See 'git --help'.

Did you mean this?
    checkout
----

//////////////////////////
Git helpfully tries to figure out what you meant, but it still refuses to do it.
If you set `help.autocorrect` to 1, Git will actually run this command for you:
//////////////////////////
Git は気を利かせて、何をしたかったのか推測はしてくれますが、実行まではしません。
`help.autocorrect` を 1 にしておくと、 Git は実際にそのコマンドを実行しようとします。

[source,console]
----
$ git chekcout master
WARNING: You called a Git command named 'chekcout', which does not exist.
Continuing under the assumption that you meant 'checkout'
in 0.1 seconds automatically...
----

//////////////////////////
Note that ``0.1 seconds'' business. `help.autocorrect` is actually an integer which represents tenths of a second.
So if you set it to 50, Git will give you 5 seconds to change your mind before executing the autocorrected command.
//////////////////////////
``0.1 seconds'' という箇所に注目してください。 `help.autocorrect` は整数値で、0.1秒単位での時間を表しています。
そのため、仮に 50 を設定したなら、自動修正したコマンドが実行される前に 5 秒の猶予が与えられます。

//////////////////////////
==== Colors in Git
//////////////////////////
==== Git における色


(((color)))
//////////////////////////
Git fully supports colored terminal output, which greatly aids in visually parsing command output quickly and easily.
A number of options can help you set the coloring to your preference.
//////////////////////////
Git では、ターミナルへの出力に色をつけることができます。ぱっと見て、すばやくお手軽に出力内容を把握できるようになるでしょう。
さまざまなオプションで、お好みに合わせて色を設定しましょう。

===== `color.ui`

//////////////////////////
Git automatically colors most of its output, but there's a master switch if you don't like this behavior.
To turn off all Git's colored terminal output, do this:
//////////////////////////
Git は自動的に大半の出力に色づけをします。ですが、この挙動が気に入らないなら、そのためのマスタースイッチがあります。
ターミナルへの出力への色付けをすべてオフにするなら、以下のようにします。

[source,console]
----
$ git config --global color.ui false
----

//////////////////////////
The default setting is `auto`, which colors output when it's going straight to a terminal, but omits the color-control codes when the output is redirected to a pipe or a file.
//////////////////////////
デフォルトの設定は `auto` で、直接ターミナルへ出力する場合には色付けを行いますが、パイプやファイルへリダイレクトした場合にはカラーコントロールコードを出力しません。

//////////////////////////
You can also set it to `always` to ignore the difference between terminals and pipes.
You'll rarely want this; in most scenarios, if you want color codes in your redirected output, you can instead pass a `--color` flag to the Git command to force it to use color codes.
The default setting is almost always what you'll want.
//////////////////////////
また `always` を指定すると、ターミナルであってもパイプであっても色をつけます。
`always` を使うことは、まずないでしょう。たいていの場合は、カラーコードを含む結果をリダイレクトしたければ、 Git コマンドに `--color` フラグを渡せばカラーコードの使用を強制できます。
ふだんはデフォルトの設定で要望を満たせるでしょう。

===== `color.*`

//////////////////////////
If you want to be more specific about which commands are colored and how, Git provides verb-specific coloring settings.
Each of these can be set to `true`, `false`, or `always`:
//////////////////////////
どのコマンドをどのように色づけするかをより細やかに指定したい場合、コマンド単位の色づけ設定を使用します。
これらの項目には `true` 、 `false` あるいは `always` が指定できます。

  color.branch
  color.diff
  color.interactive
  color.status

//////////////////////////
In addition, each of these has subsettings you can use to set specific colors for parts of the output, if you want to override each color.
For example, to set the meta information in your diff output to blue foreground, black background, and bold text, you can run
//////////////////////////
さらに、これらの項目ではサブ設定が使え、出力の一部について特定の色を使うように指定することもできます。
たとえば、diff の出力で、メタ情報を黒地に青の太字で出力させたい場合は次のようにします。

[source,console]
----
$ git config --global color.diff.meta "blue black bold"
----

//////////////////////////
You can set the color to any of the following values: `normal`, `black`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan`, or `white`.
If you want an attribute like bold in the previous example, you can choose from `bold`, `dim`, `ul` (underline), `blink`, and `reverse` (swap foreground and background).
//////////////////////////
色として指定できる値は `normal`、 `black`、 `red、 `green`、 `yellow`、 `blue`、 `magenta`、 `cyan`、 `white` のいずれかです。先ほどの例の bold のように属性も指定できます。`bold`、 `dim`、 `ul` （下線つき）、 `blink`、 `reverse` （文字と背景の色を逆にする）のいずれかを指定できます。

[[r_external_merge_tools]]
//////////////////////////
==== External Merge and Diff Tools
//////////////////////////
==== 外部のマージツールおよび diff ツール

(((mergetool)))(((difftool)))
//////////////////////////
Although Git has an internal implementation of diff, which is what we've been showing in this book, you can set up an external tool instead.
You can also set up a graphical merge-conflict-resolution tool instead of having to resolve conflicts manually.
We'll demonstrate setting up the Perforce Visual Merge Tool (P4Merge) to do your diffs and merge resolutions, because it's a nice graphical tool and it's free.
//////////////////////////
Git には、内部的な diff の実装が組み込まれています。本書でこれまで見てきた内容は、それを使用しています。ですが、外部のツールを使うよう設定することもできます。
また、コンフリクトを手動で解決するのではなくグラフィカルなコンフリクト解消ツールを使うよう設定することもできます。
ここでは Perforce Visual Merge Tool (P4Merge) を使って diff の表示とマージの処理を行えるようにする例を示します。これはすばらしいグラフィカルツールで、しかも無料で使えるからです。

//////////////////////////
If you want to try this out, P4Merge works on all major platforms, so you should be able to do so.
We'll use path names in the examples that work on Mac and Linux systems; for Windows, you'll have to change `/usr/local/bin` to an executable path in your environment.
//////////////////////////
P4Merge はすべての主要プラットフォーム上で動作するので、実際に試してみたい人は試してみるとよいでしょう。
この例では、Mac や Linux 形式のパス名を例に使います。Windows の場合は、`/usr/local/bin` のところを環境に合わせたパスに置き換えてください。

//////////////////////////
To begin, https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools[download P4Merge from Perforce].
Next, you'll set up external wrapper scripts to run your commands.
We'll use the Mac path for the executable; in other systems, it will be where your `p4merge` binary is installed.
Set up a merge wrapper script named `extMerge` that calls your binary with all the arguments provided:
//////////////////////////
まず、P4Merge を https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools[からダウンロードします]。
次に、コマンドを実行するための外部ラッパースクリプトを用意します。
この例では、Mac 用の実行パスを使います。他のシステムで使う場合は、`p4merge` のバイナリがインストールされた場所に置き換えてください。
次のような内容のマージ用ラッパースクリプト `extMerge` を用意してください。これは、 `p4merge` にすべての引数を渡して呼び出します。

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/p4merge.app/Contents/MacOS/p4merge $*
----

//////////////////////////
The diff wrapper checks to make sure seven arguments are provided and passes two of them to your merge script.
By default, Git passes the following arguments to the diff program:
//////////////////////////
diff のラッパーは、7 つの引数が渡されていることを確認したうえでそのうちのふたつをマージスクリプトに渡します。
デフォルトでは、Git は次のような引数を diff プログラムに渡します。

[source]
----
path old-file old-hex old-mode new-file new-hex new-mode
----

//////////////////////////
Because you only want the `old-file` and `new-file` arguments, you use the wrapper script to pass the ones you need.
//////////////////////////
ここで必要な引数は `old-file` と `new-file` だけなので、ラッパースクリプトではこれらを渡すようにします。

[source,console]
----
$ cat /usr/local/bin/extDiff
#!/bin/sh
[ $# -eq 7 ] && /usr/local/bin/extMerge "$2" "$5"
----

//////////////////////////
You also need to make sure these tools are executable:
//////////////////////////
また、これらのツールは実行可能にしておかなければなりません。

[source,console]
----
$ sudo chmod +x /usr/local/bin/extMerge
$ sudo chmod +x /usr/local/bin/extDiff
----

//////////////////////////
Now you can set up your config file to use your custom merge resolution and diff tools.
This takes a number of custom settings: `merge.tool` to tell Git what strategy to use, `mergetool.<tool>.cmd` to specify how to run the command, `mergetool.<tool>.trustExitCode` to tell Git if the exit code of that program indicates a successful merge resolution or not, and `diff.external` to tell Git what command to run for diffs.
So, you can either run four config commands
//////////////////////////
これで、自前のマージツールや diff ツールを使えるように設定する準備が整いました。
設定項目はひとつだけではありません。まず `merge.tool` でどんなツールを使うのかを Git に伝え、 `mergetool.<tool>.cmd` でそのコマンドを実行する方法を指定し、`mergetool.<tool>.trustExitCode` では「そのコマンドの終了コードでマージが成功したかどうかを判断できるのか」を指定し、`diff.external` では diff の際に実行するコマンドを指定します。つまり、このような 4 つのコマンドを実行することになります。

[source,console]
----
$ git config --global merge.tool extMerge
$ git config --global mergetool.extMerge.cmd \
  'extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"'
$ git config --global mergetool.extMerge.trustExitCode false
$ git config --global diff.external extDiff
----

//////////////////////////
or you can edit your `~/.gitconfig` file to add these lines:
//////////////////////////
あるいは、`~/.gitconfig` ファイルを編集してこのような行を追加します。

[source,ini]
----
[merge]
  tool = extMerge
[mergetool "extMerge"]
  cmd = extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
  trustExitCode = false
[diff]
  external = extDiff
----

//////////////////////////
After all this is set, if you run diff commands such as this:
//////////////////////////
すべて設定し終えたら、このような diff コマンドを実行すると、

[source,console]
----
$ git diff 32d1776b1^ 32d1776b1
----

//////////////////////////
Instead of getting the diff output on the command line, Git fires up P4Merge, which looks something like this:
//////////////////////////
結果をコマンドラインに出力するかわりに、Git から P4Merge が呼び出され、次のようになります。

.P4Merge.
image::images/p4merge.png[P4Merge.]

//////////////////////////
If you try to merge two branches and subsequently have merge conflicts, you can run the command `git mergetool`; it starts P4Merge to let you resolve the conflicts through that GUI tool.
//////////////////////////
ふたつのブランチをマージしてコンフリクトが発生した場合は `git mergetool` を実行します。すると P4Merge が立ち上がり、コンフリクトの解決を GUI ツールで行えるようになります。

//////////////////////////
The nice thing about this wrapper setup is that you can change your diff and merge tools easily.
For example, to change your `extDiff` and `extMerge` tools to run the KDiff3 tool instead, all you have to do is edit your `extMerge` file:
//////////////////////////
このようなラッパーを設定しておくと、あとで diff ツールやマージツールを簡単に変更できます。
たとえば `extDiff` や `extMerge` で KDiff3 を実行させるように変更するには `extMerge` ファイルをこのように変更するだけでよいのです。

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*
----

//////////////////////////
Now, Git will use the KDiff3 tool for diff viewing and merge conflict resolution.
//////////////////////////
これで、Git での diff の閲覧やコンフリクトの解決の際に KDiff3 が立ち上がるようになりました。

//////////////////////////
Git comes preset to use a number of other merge-resolution tools without your having to set up the cmd configuration.
To see a list of the tools it supports, try this:
//////////////////////////
Git にはさまざまなマージツール用の設定が事前に準備されており、特に設定しなくても利用できます。
サポートされているツールを確認するには、次のコマンドを実行します。

[source,console]
----
$ git mergetool --tool-help
'git mergetool --tool=<tool>' may be set to one of the following:
        emerge
        gvimdiff
        gvimdiff2
        opendiff
        p4merge
        vimdiff
        vimdiff2

The following tools are valid, but not currently available:
        araxis
        bc3
        codecompare
        deltawalker
        diffmerge
        diffuse
        ecmerge
        kdiff3
        meld
        tkdiff
        tortoisemerge
        xxdiff

Some of the tools listed above only work in a windowed
environment. If run in a terminal-only session, they will fail.
----

//////////////////////////
If you're not interested in using KDiff3 for diff but rather want to use it just for merge resolution, and the kdiff3 command is in your path, then you can run
//////////////////////////
KDiff3 を diff ツールとしてではなくマージのときにだけ使いたい場合は、kdiff3 コマンドにパスが通っている状態で次のコマンドを実行します。

[source,console]
----
$ git config --global merge.tool kdiff3
----

//////////////////////////
If you run this instead of setting up the `extMerge` and `extDiff` files, Git will use KDiff3 for merge resolution and the normal Git diff tool for diffs.
//////////////////////////
`extMerge` や `extDiff` を準備せずにこのコマンドを実行すると、マージの解決の際には KDiff3 を立ち上げて diff の際には通常の Git の diff ツールを使うようになります。

//////////////////////////
==== Formatting and Whitespace
//////////////////////////
==== 書式設定と空白文字

(((whitespace)))
//////////////////////////
Formatting and whitespace issues are some of the more frustrating and subtle problems that many developers encounter when collaborating, especially cross-platform.
It's very easy for patches or other collaborated work to introduce subtle whitespace changes because editors silently introduce them, and if your files ever touch a Windows system, their line endings might be replaced.
Git has a few configuration options to help with these issues.
//////////////////////////
書式設定や空白文字の問題は微妙にうっとうしいもので、とくにさまざまなプラットフォームで開発している人たちと共同作業をするときに問題になりがちです。
使っているエディタが知らぬ間に空白文字を埋め込んでしまっていたり Windows で開発している人が行末にキャリッジリターンを付け加えてしまったりなどしてパッチが面倒な状態になってしまうことも多々あります。
Git では、こういった問題に対処するための設定項目も用意しています。

===== `core.autocrlf`

(((crlf)))(((line endings)))
//////////////////////////
If you're programming on Windows and working with people who are not (or vice-versa), you'll probably run into line-ending issues at some point.
This is because Windows uses both a carriage-return character and a linefeed character for newlines in its files, whereas Mac and Linux systems use only the linefeed character.
This is a subtle but incredibly annoying fact of cross-platform work; many editors on Windows silently replace existing LF-style line endings with CRLF, or insert both line-ending characters when the user hits the enter key.
//////////////////////////
自分が Windows で開発している一方、チームの中に Windows 以外の環境で開発している人がいる場合（逆も同様）には、改行コードの問題に巻き込まれることがありがちです。
Windows ではキャリッジリターンとラインフィードでファイルの改行を表すのですが、Mac や Linux ではラインフィードだけで改行を表すという違いが原因です。
これはささいな違いではありますが、さまざまなプラットフォームにまたがる作業では非常に面倒なものです。Windows のエディタには、LFだけの改行をだまってCRLFに置き換えたり、ユーザがEnterキーを押下した際にCRとLFの両方を挿入したりするものが数多くあります。

//////////////////////////
Git can handle this by auto-converting CRLF line endings into LF when you add a file to the index, and vice versa when it checks out code onto your filesystem.
You can turn on this functionality with the `core.autocrlf` setting.
//////////////////////////
Git はこの問題に対処するために、コミットする際には行末の CRLF を LF に自動変換し、ファイルシステム上にチェックアウトするときには逆の変換を行うようにできます。
この機能を使うには `core.autocrlf` を設定します。

//////////////////////////
If you're on a Windows machine, set it to `true` – this converts LF endings into CRLF when you check out code:
//////////////////////////
Windows で作業をするときにこれを `true` に設定すると、コードをチェックアウトするときに行末の LF を CRLF に自動変換してくれます。

[source,console]
----
$ git config --global core.autocrlf true
----

//////////////////////////
If you're on a Linux or Mac system that uses LF line endings, then you don't want Git to automatically convert them when you check out files; however, if a file with CRLF endings accidentally gets introduced, then you may want Git to fix it.
You can tell Git to convert CRLF to LF on commit but not the other way around by setting `core.autocrlf` to input:
//////////////////////////
Linux や Mac などの行末に LF を使うシステムで作業をしている場合は、Git にチェックアウト時の自動変換をされてしまうと困ります。しかし、行末が CRLF なファイルが紛れ込んでしまった場合には Git に自動修正してもらいたいものです。
コミット時の CRLF から LF への変換はさせたいけれどもそれ以外の自動変換が不要な場合は、`core.autocrlf` を input に設定します。

[source,console]
----
$ git config --global core.autocrlf input
----

//////////////////////////
This setup should leave you with CRLF endings in Windows checkouts, but LF endings on Mac and Linux systems and in the repository.
//////////////////////////
この設定は、Windows にチェックアウトしたときの CRLF への変換は行いますが、Mac や Linux へのチェックアウト時は LF のままにします。

//////////////////////////
If you're a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to `false`:
//////////////////////////
Windows のみのプロジェクトで作業をしているのなら、この機能を無効にしてキャリッジリターンをそのままリポジトリに記録してもよいでしょう。その場合は、値 `false` を設定します。

[source,console]
----
$ git config --global core.autocrlf false
----

===== `core.whitespace`

//////////////////////////
Git comes preset to detect and fix some whitespace issues.
It can look for six primary whitespace issues – three are enabled by default and can be turned off, and three are disabled by default but can be activated.
//////////////////////////
Git には、空白文字に関する問題を見つけて修正するための設定もあります。
空白文字に関する主要な六つの問題に対応するもので、そのうち三つはデフォルトで有効になっています。残りの三つはデフォルトでは有効になっていませんが、有効化することもできます。

//////////////////////////
The three that are turned on by default are `blank-at-eol`, which looks for spaces at the end of a line; `blank-at-eof`, which notices blank lines at the end of a file; and `space-before-tab`, which looks for spaces before tabs at the beginning of a line.
//////////////////////////
デフォルトで有効になっている設定は、行末の空白文字を見つける `blank-at-eol` 、ファイル末尾の空白文字を見つける `blank-at-eof` 、行頭のタブ文字より前にある空白文字を見つける `space-before-tab` です。

//////////////////////////
The three that are disabled by default but can be turned on are `indent-with-non-tab`, which looks for lines that begin with spaces instead of tabs (and is controlled by the `tabwidth` option); `tab-in-indent`, which watches for tabs in the indentation portion of a line; and `cr-at-eol`, which tells Git that carriage returns at the end of lines are OK.
//////////////////////////
デフォルトでは無効だけれども有効にすることもできる三つの設定は、行頭がタブ文字でなく空白文字になっている行を見つける `indent-with-non-tab` （空白文字の数は `tabwidth` オプションで制御可能）、行内のインデント部分にあるタブ文字を見つける `tab-in-indent` 、行末のキャリッジリターンを許容する `cr-at-eol` です。

//////////////////////////
You can tell Git which of these you want enabled by setting `core.whitespace` to the values you want on or off, separated by commas.
You can disable settings by either leaving them out of the setting string or prepending a `-` in front of the value.
For example, if you want all but `cr-at-eol` to be set, you can do this:
//////////////////////////
これらのオン・オフを切り替えるには、`core.whitespace` にカンマ区切りで項目を指定します。
無効にしたい場合は、設定文字列でその項目を省略するか、あるいは項目名の前に `-` をつけます。
たとえば `cr-at-eol` 以外のすべてを設定したい場合は、このようにします。

[source,console]
----
$ git config --global core.whitespace \
    trailing-space,space-before-tab,indent-with-non-tab
----

//////////////////////////
Git will detect these issues when you run a `git diff` command and try to color them so you can possibly fix them before you commit.
It will also use these values to help you when you apply patches with `git apply`.
When you're applying patches, you can ask Git to warn you if it's applying patches with the specified whitespace issues:
//////////////////////////
`git diff` コマンドを実行したときに Git がこれらの問題を検出すると、その部分を色付けして表示します。修正してからコミットするようにしましょう。
この設定は、`git apply` でパッチを適用する際にも助けとなります。
空白に関する問題を含むパッチを適用するときに警告を発してほしい場合には、次のようにします。

[source,console]
----
$ git apply --whitespace=warn <patch>
----

//////////////////////////
Or you can have Git try to automatically fix the issue before applying the patch:
//////////////////////////
あるいは、問題を自動的に修正してからパッチを適用したい場合は、次のようにします。

[source,console]
----
$ git apply --whitespace=fix <patch>
----

//////////////////////////
These options apply to the `git rebase` command as well.
If you've committed whitespace issues but haven't yet pushed upstream, you can run `git rebase --whitespace=fix` to have Git automatically fix whitespace issues as it's rewriting the patches.
//////////////////////////
これらの設定は、`git rebase` コマンドにも適用されます。
空白に関する問題を含むコミットをしたけれどまだそれを公開リポジトリにプッシュしていない場合は、 `git rebase --whitespace=fix` を実行すれば、パッチを書き換えて空白問題を自動修正してくれます。

//////////////////////////
==== Server Configuration
//////////////////////////
==== サーバーの設定

//////////////////////////
Not nearly as many configuration options are available for the server side of Git, but there are a few interesting ones you may want to take note of.
//////////////////////////
Git のサーバー側の設定オプションはそれほど多くありませんが、いくつか興味深いものがあるので紹介します。

===== `receive.fsckObjects`

//////////////////////////
Git is capable of making sure every object received during a push still matches its SHA-1 checksum and points to valid objects.
However, it doesn't do this by default; it's a fairly expensive operation, and might slow down the operation, especially on large repositories or pushes.
If you want Git to check object consistency on every push, you can force it to do so by setting `receive.fsckObjects` to true:
//////////////////////////
デフォルトでは、Git はプッシュで受け取ったオブジェクトの SHA-1 チェックサムが一致していて有効なオブジェクトを指しているということをチェックさせることができます。
ですが、デフォルトではこのチェックは行わないようになっています。このチェックは比較的重たい処理であり、リポジトリのサイズが大きかったりプッシュする量が多かったりすると、毎回チェックさせるのには時間がかかるでしょう。
毎回のプッシュの際に Git にオブジェクトの一貫性をチェックさせたい場合は、`receive.fsckObjects` を true にして強制的にチェックさせるようにします。

[source,console]
----
$ git config --system receive.fsckObjects true
----

//////////////////////////
Now, Git will check the integrity of your repository before each push is accepted to make sure faulty (or malicious) clients aren't introducing corrupt data.
//////////////////////////
これで、Git がリポジトリの整合性を確認してからでないとプッシュが認められないようになります。壊れたデータをまちがって受け入れてしまうことがなくなりました。

===== `receive.denyNonFastForwards`

//////////////////////////
If you rebase commits that you've already pushed and then try to push again, or otherwise try to push a commit to a remote branch that doesn't contain the commit that the remote branch currently points to, you'll be denied.
This is generally good policy; but in the case of the rebase, you may determine that you know what you're doing and can force-update the remote branch with a `-f` flag to your push command.
//////////////////////////
すでにプッシュしたコミットをリベースしてもう一度プッシュした場合、あるいはリモートブランチが現在指しているコミットを含まないコミットをプッシュしようとした場合は、プッシュが拒否されます。
これは悪くない方針でしょう。しかしリベースの場合は、自分が何をしているのかをきちんと把握していれば、プッシュの際に `-f` フラグを指定して強制的にリモートブランチを更新することもできます。

//////////////////////////
To tell Git to refuse force-pushes, set `receive.denyNonFastForwards`:
//////////////////////////
このような強制更新機能を無効にするには、`receive.denyNonFastForwards` を設定します。

[source,console]
----
$ git config --system receive.denyNonFastForwards true
----

//////////////////////////
The other way you can do this is via server-side receive hooks, which we'll cover in a bit.
That approach lets you do more complex things like deny non-fast-forwards to a certain subset of users.
//////////////////////////
もうひとつの方法として、サーバー側の receive フックを使うこともできます。こちらの方法については後ほど簡単に説明します。
receive フックを使えば、特定のユーザーだけ強制更新を無効にするなどより細やかな制御ができるようになります。

===== `receive.denyDeletes`

//////////////////////////
One of the workarounds to the `denyNonFastForwards` policy is for the user to delete the branch and then push it back up with the new reference.
To avoid this, set `receive.denyDeletes` to true:
//////////////////////////
`denyNonFastForwards` の制限を回避する方法として、いったんブランチを削除してから新しいコミットを参照するブランチをプッシュしなおすことができます。
これを無効にするには、 `receive.denyDeletes` を true に設定します。

[source,console]
----
$ git config --system receive.denyDeletes true
----

//////////////////////////
This denies any deletion of branches or tags – no user can do it.
To remove remote branches, you must remove the ref files from the server manually.
There are also more interesting ways to do this on a per-user basis via ACLs, as you'll learn in <<r_an_example_git_enforced_policy>>.
//////////////////////////
これは、プッシュによるブランチやタグの削除を一切拒否し、誰も削除できないようにします。
リモートブランチを削除するには、サーバー上の ref ファイルを手で削除しなければなりません。ACL を使って、ユーザー単位でこれを制限することもできますが、その方法は <<r_an_example_git_enforced_policy>> で扱います。
