[[r_first_time]]
//////////////////////////
=== First-Time Git Setup
//////////////////////////
=== 最初のGitの構成

//////////////////////////
Now that you have Git on your system, you'll want to do a few things to customize your Git environment.
You should have to do these things only once on any given computer; they'll stick around between upgrades.
You can also change them at any time by running through the commands again.
//////////////////////////
今や、Gitがシステムにあります。Git環境をカスタマイズするためにしたい事が少しはあることでしょう。
どんなコンピューターであれ、その作業は一度だけ行えばいいでしょう。Gitをアップグレードしても設定は引き継がれるからです。
またそれらは、またコマンドを実行することによっていつでも変更することができます。

//////////////////////////
Git comes with a tool called `git config` that lets you get and set configuration variables that control all aspects of how Git looks and operates.(((git commands, config)))
These variables can be stored in three different places:
//////////////////////////
Gitには、`git config`と呼ばれるツールが付属します。これで、どのようにGitが見えて機能するかの全ての面を制御できる設定変数を取得し、設定することができます。(((git commands, config)))
これらの変数は三つの異なる場所に格納されうります：

//////////////////////////
1. `/etc/gitconfig` file: Contains values for every user on the system and all their repositories.
  If you pass the option `--system` to `git config`, it reads and writes from this file specifically.
2. `~/.gitconfig` or `~/.config/git/config` file: Specific to your user.
  You can make Git read and write to this file specifically by passing the `--global` option.
3. `config` file in the Git directory (that is, `.git/config`) of whatever repository you're currently using: Specific to that single repository.
//////////////////////////
1. `/etc/gitconfig` ファイル: システム上の全てのユーザーと全てのリポジトリに対する設定値を保持します。
  もし`--system`オプションを`git config`に指定すると、明確にこのファイルに読み書きを行ないます。
2. `~/.gitconfig` か `~/.config/git/config` ファイル: 特定のユーザーに対する設定値を保持します。
  `--global`オプションを指定することで、Gitに、明確にこのファイルに読み書きを行なわせることができます。
3. 現在使っているリポジトリのGitディレクトリにある`config`ファイル(`.git/config`のことです): 特定の単一リポジトリに対する設定値を保持します。

//////////////////////////
Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.
//////////////////////////
それぞれのレベルの値は以前のレベルの値を上書きするため、`.git/config`の中の設定値は`/etc/gitconfig`の設定値に優先されます。

//////////////////////////
On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Users\$USER` for most people).
It also still looks for `/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.
If you are using version 2.x or later of Git for Windows, there is also a system-level config file at
`C:\Documents and Settings\All Users\Application Data\Git\config` on Windows XP, and in `C:\ProgramData\Git\config` on Windows Vista and newer.
This config file can only be changed by `git config -f <file>` as an admin.
//////////////////////////
Windowsの場合、Gitはまず `$HOME` ディレクトリ（通常は `C:\Users\$USER` です。）にある `.gitconfig` ファイルを検索します。
また、`/etc/gitconfig` も他のシステムと同様に検索されます。ただし、実際に検索される場所は、MSysのルート（Gitのインストーラーを実行した際に指定したパス。）からの相対パスになります。
さらに、Git for Windows 2.x以降を使っている場合は、システム全体で有効な設定ファイルも検索されます。Windows XPであれば `C:\Documents and Settings\All Users\Application Data\Git\config`、Windows Vista以降であれば `C:\ProgramData\Git\config` です。
なお、検索される設定ファイルは、管理者権限で `git config -f <file>` を実行すれば変更できます。

//////////////////////////
==== Your Identity
//////////////////////////
==== 個人の識別情報

//////////////////////////
The first thing you should do when you install Git is to set your user name and email address.
This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:
//////////////////////////
Gitをインストールしたときに最初にすべきことは、ユーザー名とEmailアドレスを設定することです。
全てのGitのコミットはこの情報を用いるため、これは重要で、作成するコミットに永続的に焼き付けられます：

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

//////////////////////////
Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
<<<<<<< HEAD
If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.
//////////////////////////
また、もし`--global`オプションを指定するのであれば、Gitはその後、そのシステム上で行なう（訳者注：あるユーザーの）全ての操作に対して常にこの情報を使うようになるため、この操作を行なう必要はたった一度だけです。
もし、違う名前とEmailアドレスを特定のプロジェクトで上書きしたいのであれば、そのプロジェクトの（訳者注：Gitディレクトリの）中で、`--global`オプション無しでこのコマンドを実行することができます。

//////////////////////////
Many of the GUI tools will help you do this when you first run them.
//////////////////////////
GUIのツールの場合、初めて起動した際にこの作業を行うよう促されることが多いようです。

//////////////////////////
==== Your Editor
//////////////////////////
==== エディター

//////////////////////////
Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor.
If you want to use a different text editor, such as Emacs, you can do the following:
//////////////////////////
個人の識別情報が設定できたので、Gitがメッセージのタイプをさせる必要があるときに使う、標準のテキストエディターを設定できます。
これが設定されていない場合、Gitはシステムのデフォルトエディターを使います。
Emacsのような違うテキストエディターを使いたい場合は、次のようにします：

[source,console]
----
$ git config --global core.editor emacs
----

//////////////////////////
While on a Windows system, if you want to use a different text editor, such as Notepad++, you can do the following:
//////////////////////////
また、Windowsで違うエディタ（Notepad++など）を使いたいのなら、以下のように設定してみてください。

//////////////////////////
On a x86 system
//////////////////////////
32bit版Windowsの場合
[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

//////////////////////////
On a x64 system
//////////////////////////
64bit版Windowsの場合
[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----
[NOTE]
//////////////////////////
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix based systems like Linux and OS X or a Windows system.
If you are not familiar with either of these editors, you may need to search for specific instructions for how to set up your favorite editor with Git.
====
//////////////////////////
====
Vim、Emacs、Notepad++は人気があり、LinuxやMacのようなUnixベースのシステムやWindowsのシステム使う開発者たちに特によく使われています。
それらのエディターをあまり知らない場合は、好みのエディターをGitで使うにはどうすればいいか、個別に調べる必要があるかもしれません。
====

[WARNING]
//////////////////////////
====
You may find, if you don't setup an editor like this, you will likely get into a really confusing state when they are launched.
Such example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====
//////////////////////////
====
Git用のエディターを設定していなくて、Gitを使っている最中にそれらが立ち上がって困惑することになってしまうでしょう。
特にWindowsの場合、Gitを操作する過程でのテキスト編集を中断してしまうと、やっかいなことになることがあります。
====

//////////////////////////
==== Checking Your Settings
//////////////////////////
==== 設定の確認

//////////////////////////
If you want to check your settings, you can use the `git config --list` command to list all the settings Git can find at that point:
//////////////////////////
設定を確認したい場合は、その時点でGitが見つけられる全ての設定を一覧するコマンドである`git config --list`を使う事ができます：

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

//////////////////////////
You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.
//////////////////////////
Gitは異なったファイル(例えば`/etc/gitconfig`と`~/.gitconfig`)から同一のキーを読み込むため、同一のキーを1度以上見ることになるでしょう。この場合、Gitは見つけたそれぞれ同一のキーに対して最後の値を用います。

//////////////////////////
You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))
//////////////////////////
また、Gitに設定されている特定のキーの値を、`git config <key>`とタイプすることで確認することができます：(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----
