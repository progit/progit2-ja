//////////////////////////
=== About Version Control
//////////////////////////
=== バージョン管理に関して

(((version control)))
//////////////////////////
What is "version control", and why should you care?
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.
//////////////////////////
「バージョン管理」とは何でしょうか。また、なぜそれを気にする必要があるのでしょうか。
バージョン管理とは、一つのファイルやファイルの集合に対して時間とともに加えられていく変更を記録するシステムで、後で特定バージョンを呼び出すことができるようにするためのものです。
本書の例では、バージョン管理されるファイルとしてソフトウェアのソースコードを用いていますが、実際にはコンピューター上のあらゆる種類のファイルをバージョン管理のもとに置くことができます。

//////////////////////////
If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.
It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.
Using a VCS also generally means that if you screw things up or lose files, you can easily recover.
In addition, you get all this for very little overhead.
//////////////////////////
もしあなたがグラフィックス・デザイナーやウェブ・デザイナーで、画像やレイアウトの全てのバージョンを保存しておきたいとすると（きっとそうしたいですよね）、バージョン管理システム（VCS）を使うというのはいい考えです。
VCSを使うことで、ファイルを以前の状態まで戻したり、プロジェクト丸ごとを以前の状態に戻したり、過去の変更履歴を比較したり、問題が起こっているかもしれないものを誰が最後に修正したか、誰がいつ問題点を混入させたかを確認したりといった様々なことができるようになります。
また、VCSを使うと、やっていることがめちゃくちゃになってしまったり、ファイルを失ったりしても、普通は簡単に復活させることができるようになります。
それに、これらのことにかかるオーバーヘッドは僅かなものです。

//////////////////////////
==== Local Version Control Systems
//////////////////////////
==== ローカル・バージョン管理システム

(((version control,local)))
//////////////////////////
Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever).
This approach is very common because it is so simple, but it is also incredibly error prone.
It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.
//////////////////////////
多くの人々が使っているバージョン管理手法は、他のディレクトリ（気の利いた人であれば、日時のついたディレクトリ）にファイルをコピーするというものです。
このアプローチはとても単純なので非常に一般的ですが、信じられないほど間違いが起こりやすいものです。
どのディレクトリにいるのか忘れやすく、うっかり間違ったファイルに書き込んだり、上書きするつもりのないファイルを上書きしてしまったりします。

//////////////////////////
To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control.
//////////////////////////
この問題を扱うため、はるか昔のプログラマは、ローカルのVCSを開発しました。それは、バージョン管理下のファイルに対する全ての変更を保持するシンプルなデータベースによるものでした。

//////////////////////////
.Local version control.
image::images/local.png[Local version control diagram]
//////////////////////////
.ローカル・バージョン管理図解
image::images/local.png[ローカル・バージョン管理図解]

//////////////////////////
One of the more popular VCS tools was a system called RCS, which is still distributed with many computers today.
Even the popular Mac OS X operating system includes the `rcs` command when you install the Developer Tools.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.
//////////////////////////
もっとも有名なVCSツールの一つは、RCSと呼ばれるシステムでした。今日でも、依然として多くのコンピューターに入っています。
人気のMac OS Xオペレーティング・システムでも、開発者ツールをインストールすると `rcs` コマンドが入っています。
このツールは基本的に、リビジョン間のパッチ（ファイル間の差分）の集合を特殊なフォーマットでディスク上に保持するという仕組みで動いています。こうすることで、任意のファイルについて、それが過去の任意の時点でどういうものだったかということを、パッチを重ね上げていくことで再現することができます。

//////////////////////////
==== Centralized Version Control Systems
//////////////////////////
==== 集中バージョン管理システム

(((version control,centralized)))
//////////////////////////
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.
//////////////////////////
次に人々が遭遇した大きな問題は、他のシステムを使う開発者と共同作業をする必要があるということです。
この問題に対処するために、集中バージョン管理システム（CVCS）が開発されました。このようなシステムにはCVS、Subversion、Perforceなどがありますが、それらはバージョン管理されたファイルを全て持つ一つのサーバーと、その中心点からファイルをチェックアウトする多数のクライアントからなっています。(((CVS)))(((Subversion)))(((Perforce)))
長年の間、これはバージョン管理の標準でした。

//////////////////////////
.Centralized version control.
image::images/centralized.png[Centralized version control diagram]
//////////////////////////
.集中バージョン管理図解
image::images/centralized.png[集中バージョン管理図解]

//////////////////////////
This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what; and it's far easier to administer a CVCS than it is to deal with local databases on every client.
//////////////////////////
この構成には、特にローカルVCSと比べると、多くの利点があります。
例えば、プロジェクトの他のみんなが何をしているのか、全員がある程度わかります。
管理者は、誰が何をできるのかについて、きめ細かくコントロールできます。それに、一つのCVCSを管理するのは、全てのクライアントのローカル・データベースを取り扱うより、ずっと簡単です。

//////////////////////////
However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything – the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem – whenever you have the entire history of the project in a single place, you risk losing everything.
//////////////////////////
しかし、この構成には深刻なマイナス面もあります。
もっとも明白なのは、中央サーバーという単一障害点です。
そのサーバーが1時間の間停止すると、その1時間の間は全員が、共同作業も全くできず、作業中のものにバージョンをつけて保存をすることもできなくなります。
もし中央データベースのあるハードディスクが破損し、適切なバックアップが保持されていなければ、完全に全てを失ってしまいます。プロジェクトの全ての履歴は失われ、残るのは個人のローカル・マシンにたまたまあった幾らかの単一スナップショット（訳者注：ある時点のファイル、ディレクトリなどの編集対象の状態）ぐらいです。
ローカルVCSシステムも、これと同じ問題があります。つまり、一つの場所にプロジェクトの全体の履歴を持っていると、全てを失うリスクが常にあります。

//////////////////////////
==== Distributed Version Control Systems
//////////////////////////
==== 分散バージョン管理システム

(((version control,distributed)))
//////////////////////////
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files: they fully mirror the repository.
Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.
//////////////////////////
ここで分散バージョン管理システム(DVCS)の出番になります。
DVCS(Git、Mercurial、Bazaar、Darcsのようなもの)では、クライアントはファイルの最新スナップショットをチェックアウト（訳者注：バージョン管理システムから、作業ディレクトリにファイルやディレクトリをコピーすること）するだけではありません。リポジトリ（訳者注：バージョン管理の対象になるファイル、ディレクトリ、更新履歴などの一群）全体をミラーリングするのです。
そのため、あるサーバーが故障して、DVCSがそのサーバーを介して連携していたとしても、どれでもいいのでクライアント・リポジトリの一つをサーバーにコピーすれば修復できます。
クローンは全て、実際は全データの完全バックアップなのです。

//////////////////////////
.Distributed version control.
image::images/distributed.png[Distributed version control diagram]
//////////////////////////
.分散バージョン管理図解
image::images/distributed.png[分散バージョン管理図解]

//////////////////////////
Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
//////////////////////////
さらに、これらのDVCSの多くは、複数のリモート・リポジトリで作業をするということがうまく扱えるようになっているので、異なった方法で異なる人々のグループと同時に同じプロジェクト内で共同作業することができます。
このため、階層モデルなどの、集中システムでは不可能な幾つかのワークフローが構築できるようになっています。
